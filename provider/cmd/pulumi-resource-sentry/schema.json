{
    "name": "sentry",
    "displayName": "Sentry",
    "description": "A Pulumi package for creating and managing Sentry resources.",
    "keywords": [
        "pulumi",
        "sentry",
        "category/cloud"
    ],
    "homepage": "https://github.com/pulumiverse",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`sentry` Terraform Provider](https://github.com/jianyuan/terraform-provider-sentry).",
    "repository": "https://github.com/pulumiverse/pulumi-sentry",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-sentry/main/sentry.svg",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-sentry/sdk/go/sentry",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/sentry",
            "packageDescription": "A Pulumi package for creating and managing Sentry resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jianyuan/terraform-provider-sentry)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sentry` repo](https://github.com/pulumiverse/pulumi-sentry/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sentry` repo](https://github.com/jianyuan/terraform-provider-sentry/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_sentry",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/jianyuan/terraform-provider-sentry)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-sentry` repo](https://github.com/pulumiverse/pulumi-sentry/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-sentry` repo](https://github.com/jianyuan/terraform-provider-sentry/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SENTRY_BASE_URL"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SENTRY_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "types": {
        "sentry:index/SentryDashboardWidget:SentryDashboardWidget": {
            "properties": {
                "displayType": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "interval": {
                    "type": "string"
                },
                "layout": {
                    "$ref": "#/types/sentry:index/SentryDashboardWidgetLayout:SentryDashboardWidgetLayout"
                },
                "limit": {
                    "type": "integer"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryDashboardWidgetQuery:SentryDashboardWidgetQuery"
                    }
                },
                "title": {
                    "type": "string"
                },
                "widgetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayType",
                "layout",
                "queries",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayType",
                        "id",
                        "interval",
                        "layout",
                        "limit",
                        "queries",
                        "title",
                        "widgetType"
                    ]
                }
            }
        },
        "sentry:index/SentryDashboardWidgetLayout:SentryDashboardWidgetLayout": {
            "properties": {
                "h": {
                    "type": "integer"
                },
                "minH": {
                    "type": "integer"
                },
                "w": {
                    "type": "integer"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "h",
                "minH",
                "w",
                "x",
                "y"
            ]
        },
        "sentry:index/SentryDashboardWidgetQuery:SentryDashboardWidgetQuery": {
            "properties": {
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "string"
                },
                "fieldAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "orderBy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aggregates",
                        "columns",
                        "conditions",
                        "fieldAliases",
                        "fields",
                        "id",
                        "orderBy"
                    ]
                }
            }
        },
        "sentry:index/SentryMetricAlertTrigger:SentryMetricAlertTrigger": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryMetricAlertTriggerAction:SentryMetricAlertTriggerAction"
                    }
                },
                "alertThreshold": {
                    "type": "number"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "label": {
                    "type": "string"
                },
                "resolveThreshold": {
                    "type": "number"
                },
                "thresholdType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "alertThreshold",
                "label",
                "thresholdType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertThreshold",
                        "id",
                        "label",
                        "resolveThreshold",
                        "thresholdType"
                    ]
                }
            }
        },
        "sentry:index/SentryMetricAlertTriggerAction:SentryMetricAlertTriggerAction": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "inputChannelId": {
                    "type": "string",
                    "description": "Slack channel ID to avoid rate-limiting, see [here](https://docs.sentry.io/product/integrations/notification-incidents/slack/#rate-limiting-error)\n"
                },
                "integrationId": {
                    "type": "integer"
                },
                "targetIdentifier": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "targetType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "targetType",
                        "type"
                    ]
                }
            }
        },
        "sentry:index/SentryProjectSymbolSourceLayout:SentryProjectSymbolSourceLayout": {
            "properties": {
                "casing": {
                    "type": "string",
                    "description": "The casing of the symbol source layout. The layout of the folder structure. The options are: `default` - Default (mixed case), `uppercase` - Uppercase, `lowercase` - Lowercase.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The layout of the folder structure. The options are: `native` - Platform-Specific (SymStore / GDB / LLVM), `symstore` - Microsoft SymStore, `symstore_index2` - Microsoft SymStore (with index2.txt), `ssqp` - Microsoft SSQP, `unified` - Unified Symbol Server Layout, `debuginfod` - debuginfod.\n"
                }
            },
            "type": "object",
            "required": [
                "casing",
                "type"
            ]
        },
        "sentry:index/getSentryAllKeysKey:getSentryAllKeysKey": {
            "properties": {
                "dsnCsp": {
                    "type": "string",
                    "description": "Security header endpoint for features like CSP and Expect-CT reports.\n"
                },
                "dsnPublic": {
                    "type": "string",
                    "description": "The DSN tells the SDK where to send the events to.\n"
                },
                "dsnSecret": {
                    "type": "string",
                    "description": "Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.\n"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client key.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the resource belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project that the key belongs to.\n"
                },
                "public": {
                    "type": "string",
                    "description": "The public key.\n"
                },
                "rateLimitCount": {
                    "type": "integer",
                    "description": "Number of events that can be reported within the rate limit window.\n"
                },
                "rateLimitWindow": {
                    "type": "integer",
                    "description": "Length of time that will be considered when checking the rate limit.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret key.\n"
                }
            },
            "type": "object",
            "required": [
                "dsnCsp",
                "dsnPublic",
                "dsnSecret",
                "id",
                "name",
                "organization",
                "project",
                "projectId",
                "public",
                "rateLimitCount",
                "rateLimitWindow",
                "secret"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryAllProjectsProject:getSentryAllProjectsProject": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of this project.\n"
                },
                "dateCreated": {
                    "type": "string",
                    "description": "The date this project was created.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The features of this project.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID of this project.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of this project.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The platform of this project.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of this project.\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "dateCreated",
                "features",
                "internalId",
                "name",
                "platform",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryDashboardWidget:getSentryDashboardWidget": {
            "properties": {
                "displayType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "type": "string"
                },
                "layouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getSentryDashboardWidgetLayout:getSentryDashboardWidgetLayout"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getSentryDashboardWidgetQuery:getSentryDashboardWidgetQuery"
                    }
                },
                "title": {
                    "type": "string"
                },
                "widgetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "displayType",
                "id",
                "interval",
                "layouts",
                "limit",
                "queries",
                "title",
                "widgetType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryDashboardWidgetLayout:getSentryDashboardWidgetLayout": {
            "properties": {
                "h": {
                    "type": "integer"
                },
                "minH": {
                    "type": "integer"
                },
                "w": {
                    "type": "integer"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "h",
                "minH",
                "w",
                "x",
                "y"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryDashboardWidgetQuery:getSentryDashboardWidgetQuery": {
            "properties": {
                "aggregates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "string"
                },
                "fieldAliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "orderBy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aggregates",
                "columns",
                "conditions",
                "fieldAliases",
                "fields",
                "id",
                "name",
                "orderBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryMetricAlertTrigger:getSentryMetricAlertTrigger": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/getSentryMetricAlertTriggerAction:getSentryMetricAlertTriggerAction"
                    }
                },
                "alertThreshold": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "resolveThreshold": {
                    "type": "number"
                },
                "thresholdType": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "alertThreshold",
                "id",
                "label",
                "resolveThreshold",
                "thresholdType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "sentry:index/getSentryMetricAlertTriggerAction:getSentryMetricAlertTriggerAction": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "inputChannelId": {
                    "type": "string"
                },
                "integrationId": {
                    "type": "integer"
                },
                "targetIdentifier": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "inputChannelId",
                "integrationId",
                "targetIdentifier",
                "targetType",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the sentry package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n"
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "baseUrl": {
                "type": "string",
                "description": "The target Sentry Base API URL in the format `https://[hostname]/api/`. The default value is `https://sentry.io/api/`.\nThe value must be provided when working with Sentry On-Premise. The value can be sourced from the `SENTRY_BASE_URL`\nenvironment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "SENTRY_BASE_URL"
                    ]
                }
            },
            "token": {
                "type": "string",
                "description": "The authentication token used to connect to Sentry. The value can be sourced from the `SENTRY_AUTH_TOKEN` environment\nvariable.\n",
                "defaultInfo": {
                    "environment": [
                        "SENTRY_TOKEN"
                    ]
                },
                "secret": true
            }
        }
    },
    "resources": {
        "sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection": {
            "description": "Enable spike protection for all projects in an organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Enable spike protection for several projects in a Sentry organization.\nconst web_app = new sentry.SentryProject(\"web-app\", {\n    organization: \"my-organization\",\n    teams: [\"my-first-team\"],\n    slug: \"web-app\",\n    platform: \"go\",\n});\nconst mobile_app = new sentry.SentryProject(\"mobile-app\", {\n    organization: \"my-organization\",\n    teams: [\"my-second-team\"],\n    slug: \"mobile-app\",\n    platform: \"android\",\n});\nconst mainSentryAllProjectsSpikeProtection = new sentry.SentryAllProjectsSpikeProtection(\"mainSentryAllProjectsSpikeProtection\", {\n    organization: \"my-organization\",\n    projects: [\n        web_app.id,\n        mobile_app.id,\n    ],\n    enabled: true,\n});\nconst all = sentry.getSentryAllProjects({\n    organization: \"my-organization\",\n});\nconst mainIndex_sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection = new sentry.SentryAllProjectsSpikeProtection(\"mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection\", {\n    organization: all.then(all =\u003e all.organization),\n    projects: all.then(all =\u003e all.projectSlugs),\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\n# Enable spike protection for several projects in a Sentry organization.\nweb_app = sentry.SentryProject(\"web-app\",\n    organization=\"my-organization\",\n    teams=[\"my-first-team\"],\n    slug=\"web-app\",\n    platform=\"go\")\nmobile_app = sentry.SentryProject(\"mobile-app\",\n    organization=\"my-organization\",\n    teams=[\"my-second-team\"],\n    slug=\"mobile-app\",\n    platform=\"android\")\nmain_sentry_all_projects_spike_protection = sentry.SentryAllProjectsSpikeProtection(\"mainSentryAllProjectsSpikeProtection\",\n    organization=\"my-organization\",\n    projects=[\n        web_app.id,\n        mobile_app.id,\n    ],\n    enabled=True)\nall = sentry.get_sentry_all_projects(organization=\"my-organization\")\nmain_index_sentry_all_projects_spike_protection_sentry_all_projects_spike_protection = sentry.SentryAllProjectsSpikeProtection(\"mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection\",\n    organization=all.organization,\n    projects=all.project_slugs,\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Enable spike protection for several projects in a Sentry organization.\n    var web_app = new Sentry.SentryProject(\"web-app\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n        },\n        Slug = \"web-app\",\n        Platform = \"go\",\n    });\n\n    var mobile_app = new Sentry.SentryProject(\"mobile-app\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-second-team\",\n        },\n        Slug = \"mobile-app\",\n        Platform = \"android\",\n    });\n\n    var mainSentryAllProjectsSpikeProtection = new Sentry.SentryAllProjectsSpikeProtection(\"mainSentryAllProjectsSpikeProtection\", new()\n    {\n        Organization = \"my-organization\",\n        Projects = new[]\n        {\n            web_app.Id,\n            mobile_app.Id,\n        },\n        Enabled = true,\n    });\n\n    var all = Sentry.GetSentryAllProjects.Invoke(new()\n    {\n        Organization = \"my-organization\",\n    });\n\n    var mainIndex_sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection = new Sentry.SentryAllProjectsSpikeProtection(\"mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection\", new()\n    {\n        Organization = all.Apply(getSentryAllProjectsResult =\u003e getSentryAllProjectsResult.Organization),\n        Projects = all.Apply(getSentryAllProjectsResult =\u003e getSentryAllProjectsResult.ProjectSlugs),\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Enable spike protection for several projects in a Sentry organization.\n\t\t_, err := sentry.NewSentryProject(ctx, \"web-app\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t},\n\t\t\tSlug:     pulumi.String(\"web-app\"),\n\t\t\tPlatform: pulumi.String(\"go\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryProject(ctx, \"mobile-app\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t\tSlug:     pulumi.String(\"mobile-app\"),\n\t\t\tPlatform: pulumi.String(\"android\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryAllProjectsSpikeProtection(ctx, \"mainSentryAllProjectsSpikeProtection\", \u0026sentry.SentryAllProjectsSpikeProtectionArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tProjects: pulumi.StringArray{\n\t\t\t\tweb_app.ID(),\n\t\t\t\tmobile_app.ID(),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tall, err := sentry.GetSentryAllProjects(ctx, \u0026sentry.GetSentryAllProjectsArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryAllProjectsSpikeProtection(ctx, \"mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection\", \u0026sentry.SentryAllProjectsSpikeProtectionArgs{\n\t\t\tOrganization: pulumi.String(all.Organization),\n\t\t\tProjects:     interface{}(all.ProjectSlugs),\n\t\t\tEnabled:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryAllProjectsSpikeProtection;\nimport com.pulumi.sentry.SentryAllProjectsSpikeProtectionArgs;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryAllProjectsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Enable spike protection for several projects in a Sentry organization.\n        var web_app = new SentryProject(\"web-app\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(\"my-first-team\")\n            .slug(\"web-app\")\n            .platform(\"go\")\n            .build());\n\n        var mobile_app = new SentryProject(\"mobile-app\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(\"my-second-team\")\n            .slug(\"mobile-app\")\n            .platform(\"android\")\n            .build());\n\n        var mainSentryAllProjectsSpikeProtection = new SentryAllProjectsSpikeProtection(\"mainSentryAllProjectsSpikeProtection\", SentryAllProjectsSpikeProtectionArgs.builder()\n            .organization(\"my-organization\")\n            .projects(            \n                web_app.id(),\n                mobile_app.id())\n            .enabled(true)\n            .build());\n\n        final var all = SentryFunctions.getSentryAllProjects(GetSentryAllProjectsArgs.builder()\n            .organization(\"my-organization\")\n            .build());\n\n        var mainIndex_sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection = new SentryAllProjectsSpikeProtection(\"mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection\", SentryAllProjectsSpikeProtectionArgs.builder()\n            .organization(all.applyValue(getSentryAllProjectsResult -\u003e getSentryAllProjectsResult.organization()))\n            .projects(all.applyValue(getSentryAllProjectsResult -\u003e getSentryAllProjectsResult.projectSlugs()))\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Enable spike protection for several projects in a Sentry organization.\n  web-app:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-first-team\n      slug: web-app\n      platform: go\n  mobile-app:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-second-team\n      slug: mobile-app\n      platform: android\n  mainSentryAllProjectsSpikeProtection:\n    type: sentry:SentryAllProjectsSpikeProtection\n    properties:\n      organization: my-organization\n      projects:\n        - ${[\"web-app\"].id}\n        - ${[\"mobile-app\"].id}\n      enabled: true\n  mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection:\n    type: sentry:SentryAllProjectsSpikeProtection\n    properties:\n      organization: ${all.organization}\n      projects: ${all.projectSlugs}\n      enabled: true\nvariables:\n  all:\n    fn::invoke:\n      Function: sentry:getSentryAllProjects\n      Arguments:\n        organization: my-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The slugs of the projects to enable or disable spike protection for.\n"
                }
            },
            "required": [
                "enabled",
                "organization",
                "projects"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The slugs of the projects to enable or disable spike protection for.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "organization",
                "projects"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryAllProjectsSpikeProtection resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The slugs of the projects to enable or disable spike protection for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryDashboard:SentryDashboard": {
            "description": "Sentry Dashboard resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst main = new sentry.SentryDashboard(\"main\", {\n    organization: data.sentry_organization.main.id,\n    title: \"Test dashboard\",\n    widgets: [\n        {\n            title: \"Number of Errors\",\n            displayType: \"big_number\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\"count()\"],\n                aggregates: [\"count()\"],\n                conditions: \"!event.type:transaction\",\n                orderBy: \"count()\",\n            }],\n            layout: {\n                x: 0,\n                y: 0,\n                w: 1,\n                h: 1,\n                minH: 1,\n            },\n        },\n        {\n            title: \"Number of Issues\",\n            displayType: \"big_number\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\"count_unique(issue)\"],\n                aggregates: [\"count_unique(issue)\"],\n                conditions: \"!event.type:transaction\",\n                orderBy: \"count_unique(issue)\",\n            }],\n            layout: {\n                x: 1,\n                y: 0,\n                w: 1,\n                h: 1,\n                minH: 1,\n            },\n        },\n        {\n            title: \"Events\",\n            displayType: \"line\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                name: \"Events\",\n                fields: [\"count()\"],\n                aggregates: [\"count()\"],\n                conditions: \"!event.type:transaction\",\n                orderBy: \"count()\",\n            }],\n            layout: {\n                x: 2,\n                y: 0,\n                w: 4,\n                h: 2,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Affected Users\",\n            displayType: \"line\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [\n                {\n                    name: \"Known Users\",\n                    fields: [\"count_unique(user)\"],\n                    aggregates: [\"count_unique(user)\"],\n                    conditions: \"has:user.email !event.type:transaction\",\n                    orderBy: \"count_unique(user)\",\n                },\n                {\n                    name: \"Anonymous Users\",\n                    fields: [\"count_unique(user)\"],\n                    aggregates: [\"count_unique(user)\"],\n                    conditions: \"!has:user.email !event.type:transaction\",\n                    orderBy: \"count_unique(user)\",\n                },\n            ],\n            layout: {\n                x: 1,\n                y: 2,\n                w: 1,\n                h: 2,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Handled vs. Unhandled\",\n            displayType: \"line\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [\n                {\n                    name: \"Handled\",\n                    fields: [\"count()\"],\n                    aggregates: [\"count()\"],\n                    conditions: \"error.handled:true\",\n                    orderBy: \"count()\",\n                },\n                {\n                    name: \"Unhandled\",\n                    fields: [\"count()\"],\n                    aggregates: [\"count()\"],\n                    conditions: \"error.handled:false\",\n                    orderBy: \"count()\",\n                },\n            ],\n            layout: {\n                x: 0,\n                y: 2,\n                w: 1,\n                h: 2,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Errors by Country\",\n            displayType: \"table\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"geo.country_code\",\n                    \"geo.region\",\n                    \"count()\",\n                ],\n                aggregates: [\"count()\"],\n                conditions: \"!event.type:transaction has:geo.country_code\",\n                orderBy: \"count()\",\n            }],\n            layout: {\n                x: 4,\n                y: 6,\n                w: 2,\n                h: 4,\n                minH: 2,\n            },\n        },\n        {\n            title: \"High Throughput Transactions\",\n            displayType: \"table\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"count()\",\n                    \"transaction\",\n                ],\n                aggregates: [\"count()\"],\n                columns: [\"transaction\"],\n                conditions: \"!event.type:error\",\n                orderBy: \"-count()\",\n            }],\n            layout: {\n                x: 0,\n                y: 6,\n                w: 2,\n                h: 4,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Errors by Browser\",\n            displayType: \"table\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"browser.name\",\n                    \"count()\",\n                ],\n                aggregates: [\"count()\"],\n                columns: [\"browser.name\"],\n                conditions: \"!event.type:transaction has:browser.name\",\n                orderBy: \"-count()\",\n            }],\n            layout: {\n                x: 5,\n                y: 2,\n                w: 1,\n                h: 4,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Overall User Misery\",\n            displayType: \"big_number\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\"user_misery(300)\"],\n                aggregates: [\"user_misery(300)\"],\n            }],\n            layout: {\n                x: 0,\n                y: 1,\n                w: 1,\n                h: 1,\n                minH: 1,\n            },\n        },\n        {\n            title: \"Overall Apdex\",\n            displayType: \"big_number\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\"apdex(300)\"],\n                aggregates: [\"apdex(300)\"],\n            }],\n            layout: {\n                x: 1,\n                y: 1,\n                w: 1,\n                h: 1,\n                minH: 1,\n            },\n        },\n        {\n            title: \"High Throughput Transactions\",\n            displayType: \"top_n\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"transaction\",\n                    \"count()\",\n                ],\n                aggregates: [\"count()\"],\n                columns: [\"transaction\"],\n                conditions: \"!event.type:error\",\n                orderBy: \"-count()\",\n            }],\n            layout: {\n                x: 0,\n                y: 4,\n                w: 2,\n                h: 2,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Issues Assigned to Me or My Teams\",\n            displayType: \"table\",\n            interval: \"5m\",\n            widgetType: \"issue\",\n            queries: [{\n                fields: [\n                    \"assignee\",\n                    \"issue\",\n                    \"title\",\n                ],\n                columns: [\n                    \"assignee\",\n                    \"issue\",\n                    \"title\",\n                ],\n                conditions: \"assigned_or_suggested:me is:unresolved\",\n                orderBy: \"priority\",\n            }],\n            layout: {\n                x: 2,\n                y: 2,\n                w: 2,\n                h: 4,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Transactions Ordered by Misery\",\n            displayType: \"table\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"transaction\",\n                    \"user_misery(300)\",\n                ],\n                aggregates: [\"user_misery(300)\"],\n                columns: [\"transaction\"],\n                orderBy: \"-user_misery(300)\",\n            }],\n            layout: {\n                x: 2,\n                y: 6,\n                w: 2,\n                h: 4,\n                minH: 2,\n            },\n        },\n        {\n            title: \"Errors by Browser Over Time\",\n            displayType: \"top_n\",\n            interval: \"5m\",\n            widgetType: \"discover\",\n            queries: [{\n                fields: [\n                    \"browser.name\",\n                    \"count()\",\n                ],\n                aggregates: [\"count()\"],\n                columns: [\"browser.name\"],\n                conditions: \"event.type:error has:browser.name\",\n                orderBy: \"-count()\",\n            }],\n            layout: {\n                x: 4,\n                y: 2,\n                w: 1,\n                h: 4,\n                minH: 2,\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\nmain = sentry.SentryDashboard(\"main\",\n    organization=data[\"sentry_organization\"][\"main\"][\"id\"],\n    title=\"Test dashboard\",\n    widgets=[\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Number of Errors\",\n            display_type=\"big_number\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\"count()\"],\n                aggregates=[\"count()\"],\n                conditions=\"!event.type:transaction\",\n                order_by=\"count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=0,\n                y=0,\n                w=1,\n                h=1,\n                min_h=1,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Number of Issues\",\n            display_type=\"big_number\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\"count_unique(issue)\"],\n                aggregates=[\"count_unique(issue)\"],\n                conditions=\"!event.type:transaction\",\n                order_by=\"count_unique(issue)\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=1,\n                y=0,\n                w=1,\n                h=1,\n                min_h=1,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Events\",\n            display_type=\"line\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                name=\"Events\",\n                fields=[\"count()\"],\n                aggregates=[\"count()\"],\n                conditions=\"!event.type:transaction\",\n                order_by=\"count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=2,\n                y=0,\n                w=4,\n                h=2,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Affected Users\",\n            display_type=\"line\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[\n                sentry.SentryDashboardWidgetQueryArgs(\n                    name=\"Known Users\",\n                    fields=[\"count_unique(user)\"],\n                    aggregates=[\"count_unique(user)\"],\n                    conditions=\"has:user.email !event.type:transaction\",\n                    order_by=\"count_unique(user)\",\n                ),\n                sentry.SentryDashboardWidgetQueryArgs(\n                    name=\"Anonymous Users\",\n                    fields=[\"count_unique(user)\"],\n                    aggregates=[\"count_unique(user)\"],\n                    conditions=\"!has:user.email !event.type:transaction\",\n                    order_by=\"count_unique(user)\",\n                ),\n            ],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=1,\n                y=2,\n                w=1,\n                h=2,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Handled vs. Unhandled\",\n            display_type=\"line\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[\n                sentry.SentryDashboardWidgetQueryArgs(\n                    name=\"Handled\",\n                    fields=[\"count()\"],\n                    aggregates=[\"count()\"],\n                    conditions=\"error.handled:true\",\n                    order_by=\"count()\",\n                ),\n                sentry.SentryDashboardWidgetQueryArgs(\n                    name=\"Unhandled\",\n                    fields=[\"count()\"],\n                    aggregates=[\"count()\"],\n                    conditions=\"error.handled:false\",\n                    order_by=\"count()\",\n                ),\n            ],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=0,\n                y=2,\n                w=1,\n                h=2,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Errors by Country\",\n            display_type=\"table\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"geo.country_code\",\n                    \"geo.region\",\n                    \"count()\",\n                ],\n                aggregates=[\"count()\"],\n                conditions=\"!event.type:transaction has:geo.country_code\",\n                order_by=\"count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=4,\n                y=6,\n                w=2,\n                h=4,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"High Throughput Transactions\",\n            display_type=\"table\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"count()\",\n                    \"transaction\",\n                ],\n                aggregates=[\"count()\"],\n                columns=[\"transaction\"],\n                conditions=\"!event.type:error\",\n                order_by=\"-count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=0,\n                y=6,\n                w=2,\n                h=4,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Errors by Browser\",\n            display_type=\"table\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"browser.name\",\n                    \"count()\",\n                ],\n                aggregates=[\"count()\"],\n                columns=[\"browser.name\"],\n                conditions=\"!event.type:transaction has:browser.name\",\n                order_by=\"-count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=5,\n                y=2,\n                w=1,\n                h=4,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Overall User Misery\",\n            display_type=\"big_number\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\"user_misery(300)\"],\n                aggregates=[\"user_misery(300)\"],\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=0,\n                y=1,\n                w=1,\n                h=1,\n                min_h=1,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Overall Apdex\",\n            display_type=\"big_number\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\"apdex(300)\"],\n                aggregates=[\"apdex(300)\"],\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=1,\n                y=1,\n                w=1,\n                h=1,\n                min_h=1,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"High Throughput Transactions\",\n            display_type=\"top_n\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"transaction\",\n                    \"count()\",\n                ],\n                aggregates=[\"count()\"],\n                columns=[\"transaction\"],\n                conditions=\"!event.type:error\",\n                order_by=\"-count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=0,\n                y=4,\n                w=2,\n                h=2,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Issues Assigned to Me or My Teams\",\n            display_type=\"table\",\n            interval=\"5m\",\n            widget_type=\"issue\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"assignee\",\n                    \"issue\",\n                    \"title\",\n                ],\n                columns=[\n                    \"assignee\",\n                    \"issue\",\n                    \"title\",\n                ],\n                conditions=\"assigned_or_suggested:me is:unresolved\",\n                order_by=\"priority\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=2,\n                y=2,\n                w=2,\n                h=4,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Transactions Ordered by Misery\",\n            display_type=\"table\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"transaction\",\n                    \"user_misery(300)\",\n                ],\n                aggregates=[\"user_misery(300)\"],\n                columns=[\"transaction\"],\n                order_by=\"-user_misery(300)\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=2,\n                y=6,\n                w=2,\n                h=4,\n                min_h=2,\n            ),\n        ),\n        sentry.SentryDashboardWidgetArgs(\n            title=\"Errors by Browser Over Time\",\n            display_type=\"top_n\",\n            interval=\"5m\",\n            widget_type=\"discover\",\n            queries=[sentry.SentryDashboardWidgetQueryArgs(\n                fields=[\n                    \"browser.name\",\n                    \"count()\",\n                ],\n                aggregates=[\"count()\"],\n                columns=[\"browser.name\"],\n                conditions=\"event.type:error has:browser.name\",\n                order_by=\"-count()\",\n            )],\n            layout=sentry.SentryDashboardWidgetLayoutArgs(\n                x=4,\n                y=2,\n                w=1,\n                h=4,\n                min_h=2,\n            ),\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var main = new Sentry.SentryDashboard(\"main\", new()\n    {\n        Organization = data.Sentry_organization.Main.Id,\n        Title = \"Test dashboard\",\n        Widgets = new[]\n        {\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Number of Errors\",\n                DisplayType = \"big_number\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Conditions = \"!event.type:transaction\",\n                        OrderBy = \"count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 0,\n                    Y = 0,\n                    W = 1,\n                    H = 1,\n                    MinH = 1,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Number of Issues\",\n                DisplayType = \"big_number\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"count_unique(issue)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count_unique(issue)\",\n                        },\n                        Conditions = \"!event.type:transaction\",\n                        OrderBy = \"count_unique(issue)\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 1,\n                    Y = 0,\n                    W = 1,\n                    H = 1,\n                    MinH = 1,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Events\",\n                DisplayType = \"line\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Name = \"Events\",\n                        Fields = new[]\n                        {\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Conditions = \"!event.type:transaction\",\n                        OrderBy = \"count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 2,\n                    Y = 0,\n                    W = 4,\n                    H = 2,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Affected Users\",\n                DisplayType = \"line\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Name = \"Known Users\",\n                        Fields = new[]\n                        {\n                            \"count_unique(user)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count_unique(user)\",\n                        },\n                        Conditions = \"has:user.email !event.type:transaction\",\n                        OrderBy = \"count_unique(user)\",\n                    },\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Name = \"Anonymous Users\",\n                        Fields = new[]\n                        {\n                            \"count_unique(user)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count_unique(user)\",\n                        },\n                        Conditions = \"!has:user.email !event.type:transaction\",\n                        OrderBy = \"count_unique(user)\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 1,\n                    Y = 2,\n                    W = 1,\n                    H = 2,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Handled vs. Unhandled\",\n                DisplayType = \"line\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Name = \"Handled\",\n                        Fields = new[]\n                        {\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Conditions = \"error.handled:true\",\n                        OrderBy = \"count()\",\n                    },\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Name = \"Unhandled\",\n                        Fields = new[]\n                        {\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Conditions = \"error.handled:false\",\n                        OrderBy = \"count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 0,\n                    Y = 2,\n                    W = 1,\n                    H = 2,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Errors by Country\",\n                DisplayType = \"table\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"geo.country_code\",\n                            \"geo.region\",\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Conditions = \"!event.type:transaction has:geo.country_code\",\n                        OrderBy = \"count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 4,\n                    Y = 6,\n                    W = 2,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"High Throughput Transactions\",\n                DisplayType = \"table\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"count()\",\n                            \"transaction\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Columns = new[]\n                        {\n                            \"transaction\",\n                        },\n                        Conditions = \"!event.type:error\",\n                        OrderBy = \"-count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 0,\n                    Y = 6,\n                    W = 2,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Errors by Browser\",\n                DisplayType = \"table\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"browser.name\",\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Columns = new[]\n                        {\n                            \"browser.name\",\n                        },\n                        Conditions = \"!event.type:transaction has:browser.name\",\n                        OrderBy = \"-count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 5,\n                    Y = 2,\n                    W = 1,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Overall User Misery\",\n                DisplayType = \"big_number\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"user_misery(300)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"user_misery(300)\",\n                        },\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 0,\n                    Y = 1,\n                    W = 1,\n                    H = 1,\n                    MinH = 1,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Overall Apdex\",\n                DisplayType = \"big_number\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"apdex(300)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"apdex(300)\",\n                        },\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 1,\n                    Y = 1,\n                    W = 1,\n                    H = 1,\n                    MinH = 1,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"High Throughput Transactions\",\n                DisplayType = \"top_n\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"transaction\",\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Columns = new[]\n                        {\n                            \"transaction\",\n                        },\n                        Conditions = \"!event.type:error\",\n                        OrderBy = \"-count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 0,\n                    Y = 4,\n                    W = 2,\n                    H = 2,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Issues Assigned to Me or My Teams\",\n                DisplayType = \"table\",\n                Interval = \"5m\",\n                WidgetType = \"issue\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"assignee\",\n                            \"issue\",\n                            \"title\",\n                        },\n                        Columns = new[]\n                        {\n                            \"assignee\",\n                            \"issue\",\n                            \"title\",\n                        },\n                        Conditions = \"assigned_or_suggested:me is:unresolved\",\n                        OrderBy = \"priority\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 2,\n                    Y = 2,\n                    W = 2,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Transactions Ordered by Misery\",\n                DisplayType = \"table\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"transaction\",\n                            \"user_misery(300)\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"user_misery(300)\",\n                        },\n                        Columns = new[]\n                        {\n                            \"transaction\",\n                        },\n                        OrderBy = \"-user_misery(300)\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 2,\n                    Y = 6,\n                    W = 2,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n            new Sentry.Inputs.SentryDashboardWidgetArgs\n            {\n                Title = \"Errors by Browser Over Time\",\n                DisplayType = \"top_n\",\n                Interval = \"5m\",\n                WidgetType = \"discover\",\n                Queries = new[]\n                {\n                    new Sentry.Inputs.SentryDashboardWidgetQueryArgs\n                    {\n                        Fields = new[]\n                        {\n                            \"browser.name\",\n                            \"count()\",\n                        },\n                        Aggregates = new[]\n                        {\n                            \"count()\",\n                        },\n                        Columns = new[]\n                        {\n                            \"browser.name\",\n                        },\n                        Conditions = \"event.type:error has:browser.name\",\n                        OrderBy = \"-count()\",\n                    },\n                },\n                Layout = new Sentry.Inputs.SentryDashboardWidgetLayoutArgs\n                {\n                    X = 4,\n                    Y = 2,\n                    W = 1,\n                    H = 4,\n                    MinH = 2,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.NewSentryDashboard(ctx, \"main\", \u0026sentry.SentryDashboardArgs{\n\t\t\tOrganization: pulumi.Any(data.Sentry_organization.Main.Id),\n\t\t\tTitle:        pulumi.String(\"Test dashboard\"),\n\t\t\tWidgets: sentry.SentryDashboardWidgetArray{\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Number of Errors\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"big_number\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:transaction\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(0),\n\t\t\t\t\t\tY:    pulumi.Int(0),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(1),\n\t\t\t\t\t\tMinH: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Number of Issues\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"big_number\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(issue)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(issue)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:transaction\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count_unique(issue)\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(1),\n\t\t\t\t\t\tY:    pulumi.Int(0),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(1),\n\t\t\t\t\t\tMinH: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Events\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"line\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"Events\"),\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:transaction\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(2),\n\t\t\t\t\t\tY:    pulumi.Int(0),\n\t\t\t\t\t\tW:    pulumi.Int(4),\n\t\t\t\t\t\tH:    pulumi.Int(2),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Affected Users\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"line\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"Known Users\"),\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"has:user.email !event.type:transaction\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"Anonymous Users\"),\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!has:user.email !event.type:transaction\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count_unique(user)\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(1),\n\t\t\t\t\t\tY:    pulumi.Int(2),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(2),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Handled vs. Unhandled\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"line\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"Handled\"),\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"error.handled:true\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tName: pulumi.String(\"Unhandled\"),\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"error.handled:false\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(0),\n\t\t\t\t\t\tY:    pulumi.Int(2),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(2),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Errors by Country\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"table\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"geo.country_code\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"geo.region\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:transaction has:geo.country_code\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(4),\n\t\t\t\t\t\tY:    pulumi.Int(6),\n\t\t\t\t\t\tW:    pulumi.Int(2),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"High Throughput Transactions\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"table\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:error\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"-count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(0),\n\t\t\t\t\t\tY:    pulumi.Int(6),\n\t\t\t\t\t\tW:    pulumi.Int(2),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Errors by Browser\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"table\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"browser.name\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"browser.name\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:transaction has:browser.name\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"-count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(5),\n\t\t\t\t\t\tY:    pulumi.Int(2),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Overall User Misery\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"big_number\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"user_misery(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"user_misery(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(0),\n\t\t\t\t\t\tY:    pulumi.Int(1),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(1),\n\t\t\t\t\t\tMinH: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Overall Apdex\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"big_number\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"apdex(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"apdex(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(1),\n\t\t\t\t\t\tY:    pulumi.Int(1),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(1),\n\t\t\t\t\t\tMinH: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"High Throughput Transactions\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"top_n\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"!event.type:error\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"-count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(0),\n\t\t\t\t\t\tY:    pulumi.Int(4),\n\t\t\t\t\t\tW:    pulumi.Int(2),\n\t\t\t\t\t\tH:    pulumi.Int(2),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Issues Assigned to Me or My Teams\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"table\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"issue\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"assignee\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"issue\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"title\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"assignee\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"issue\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"title\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"assigned_or_suggested:me is:unresolved\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"priority\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(2),\n\t\t\t\t\t\tY:    pulumi.Int(2),\n\t\t\t\t\t\tW:    pulumi.Int(2),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Transactions Ordered by Misery\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"table\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"user_misery(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"user_misery(300)\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"transaction\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tOrderBy: pulumi.String(\"-user_misery(300)\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(2),\n\t\t\t\t\t\tY:    pulumi.Int(6),\n\t\t\t\t\t\tW:    pulumi.Int(2),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryDashboardWidgetArgs{\n\t\t\t\t\tTitle:       pulumi.String(\"Errors by Browser Over Time\"),\n\t\t\t\t\tDisplayType: pulumi.String(\"top_n\"),\n\t\t\t\t\tInterval:    pulumi.String(\"5m\"),\n\t\t\t\t\tWidgetType:  pulumi.String(\"discover\"),\n\t\t\t\t\tQueries: sentry.SentryDashboardWidgetQueryArray{\n\t\t\t\t\t\t\u0026sentry.SentryDashboardWidgetQueryArgs{\n\t\t\t\t\t\t\tFields: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"browser.name\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tAggregates: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"count()\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tColumns: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"browser.name\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tConditions: pulumi.String(\"event.type:error has:browser.name\"),\n\t\t\t\t\t\t\tOrderBy:    pulumi.String(\"-count()\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tLayout: \u0026sentry.SentryDashboardWidgetLayoutArgs{\n\t\t\t\t\t\tX:    pulumi.Int(4),\n\t\t\t\t\t\tY:    pulumi.Int(2),\n\t\t\t\t\t\tW:    pulumi.Int(1),\n\t\t\t\t\t\tH:    pulumi.Int(4),\n\t\t\t\t\t\tMinH: pulumi.Int(2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryDashboard;\nimport com.pulumi.sentry.SentryDashboardArgs;\nimport com.pulumi.sentry.inputs.SentryDashboardWidgetArgs;\nimport com.pulumi.sentry.inputs.SentryDashboardWidgetLayoutArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new SentryDashboard(\"main\", SentryDashboardArgs.builder()\n            .organization(data.sentry_organization().main().id())\n            .title(\"Test dashboard\")\n            .widgets(            \n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Number of Errors\")\n                    .displayType(\"big_number\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(\"count()\")\n                        .aggregates(\"count()\")\n                        .conditions(\"!event.type:transaction\")\n                        .orderBy(\"count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(0)\n                        .y(0)\n                        .w(1)\n                        .h(1)\n                        .minH(1)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Number of Issues\")\n                    .displayType(\"big_number\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(\"count_unique(issue)\")\n                        .aggregates(\"count_unique(issue)\")\n                        .conditions(\"!event.type:transaction\")\n                        .orderBy(\"count_unique(issue)\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(1)\n                        .y(0)\n                        .w(1)\n                        .h(1)\n                        .minH(1)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Events\")\n                    .displayType(\"line\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .name(\"Events\")\n                        .fields(\"count()\")\n                        .aggregates(\"count()\")\n                        .conditions(\"!event.type:transaction\")\n                        .orderBy(\"count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(2)\n                        .y(0)\n                        .w(4)\n                        .h(2)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Affected Users\")\n                    .displayType(\"line\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(                    \n                        SentryDashboardWidgetQueryArgs.builder()\n                            .name(\"Known Users\")\n                            .fields(\"count_unique(user)\")\n                            .aggregates(\"count_unique(user)\")\n                            .conditions(\"has:user.email !event.type:transaction\")\n                            .orderBy(\"count_unique(user)\")\n                            .build(),\n                        SentryDashboardWidgetQueryArgs.builder()\n                            .name(\"Anonymous Users\")\n                            .fields(\"count_unique(user)\")\n                            .aggregates(\"count_unique(user)\")\n                            .conditions(\"!has:user.email !event.type:transaction\")\n                            .orderBy(\"count_unique(user)\")\n                            .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(1)\n                        .y(2)\n                        .w(1)\n                        .h(2)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Handled vs. Unhandled\")\n                    .displayType(\"line\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(                    \n                        SentryDashboardWidgetQueryArgs.builder()\n                            .name(\"Handled\")\n                            .fields(\"count()\")\n                            .aggregates(\"count()\")\n                            .conditions(\"error.handled:true\")\n                            .orderBy(\"count()\")\n                            .build(),\n                        SentryDashboardWidgetQueryArgs.builder()\n                            .name(\"Unhandled\")\n                            .fields(\"count()\")\n                            .aggregates(\"count()\")\n                            .conditions(\"error.handled:false\")\n                            .orderBy(\"count()\")\n                            .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(0)\n                        .y(2)\n                        .w(1)\n                        .h(2)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Errors by Country\")\n                    .displayType(\"table\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"geo.country_code\",\n                            \"geo.region\",\n                            \"count()\")\n                        .aggregates(\"count()\")\n                        .conditions(\"!event.type:transaction has:geo.country_code\")\n                        .orderBy(\"count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(4)\n                        .y(6)\n                        .w(2)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"High Throughput Transactions\")\n                    .displayType(\"table\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"count()\",\n                            \"transaction\")\n                        .aggregates(\"count()\")\n                        .columns(\"transaction\")\n                        .conditions(\"!event.type:error\")\n                        .orderBy(\"-count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(0)\n                        .y(6)\n                        .w(2)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Errors by Browser\")\n                    .displayType(\"table\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"browser.name\",\n                            \"count()\")\n                        .aggregates(\"count()\")\n                        .columns(\"browser.name\")\n                        .conditions(\"!event.type:transaction has:browser.name\")\n                        .orderBy(\"-count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(5)\n                        .y(2)\n                        .w(1)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Overall User Misery\")\n                    .displayType(\"big_number\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(\"user_misery(300)\")\n                        .aggregates(\"user_misery(300)\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(0)\n                        .y(1)\n                        .w(1)\n                        .h(1)\n                        .minH(1)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Overall Apdex\")\n                    .displayType(\"big_number\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(\"apdex(300)\")\n                        .aggregates(\"apdex(300)\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(1)\n                        .y(1)\n                        .w(1)\n                        .h(1)\n                        .minH(1)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"High Throughput Transactions\")\n                    .displayType(\"top_n\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"transaction\",\n                            \"count()\")\n                        .aggregates(\"count()\")\n                        .columns(\"transaction\")\n                        .conditions(\"!event.type:error\")\n                        .orderBy(\"-count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(0)\n                        .y(4)\n                        .w(2)\n                        .h(2)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Issues Assigned to Me or My Teams\")\n                    .displayType(\"table\")\n                    .interval(\"5m\")\n                    .widgetType(\"issue\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"assignee\",\n                            \"issue\",\n                            \"title\")\n                        .columns(                        \n                            \"assignee\",\n                            \"issue\",\n                            \"title\")\n                        .conditions(\"assigned_or_suggested:me is:unresolved\")\n                        .orderBy(\"priority\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(2)\n                        .y(2)\n                        .w(2)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Transactions Ordered by Misery\")\n                    .displayType(\"table\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"transaction\",\n                            \"user_misery(300)\")\n                        .aggregates(\"user_misery(300)\")\n                        .columns(\"transaction\")\n                        .orderBy(\"-user_misery(300)\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(2)\n                        .y(6)\n                        .w(2)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build(),\n                SentryDashboardWidgetArgs.builder()\n                    .title(\"Errors by Browser Over Time\")\n                    .displayType(\"top_n\")\n                    .interval(\"5m\")\n                    .widgetType(\"discover\")\n                    .queries(SentryDashboardWidgetQueryArgs.builder()\n                        .fields(                        \n                            \"browser.name\",\n                            \"count()\")\n                        .aggregates(\"count()\")\n                        .columns(\"browser.name\")\n                        .conditions(\"event.type:error has:browser.name\")\n                        .orderBy(\"-count()\")\n                        .build())\n                    .layout(SentryDashboardWidgetLayoutArgs.builder()\n                        .x(4)\n                        .y(2)\n                        .w(1)\n                        .h(4)\n                        .minH(2)\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sentry:SentryDashboard\n    properties:\n      organization: ${data.sentry_organization.main.id}\n      title: Test dashboard\n      widgets:\n        - title: Number of Errors\n          displayType: big_number\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - count()\n              aggregates:\n                - count()\n              conditions: '!event.type:transaction'\n              orderBy: count()\n          layout:\n            x: 0\n            y: 0\n            w: 1\n            h: 1\n            minH: 1\n        - title: Number of Issues\n          displayType: big_number\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - count_unique(issue)\n              aggregates:\n                - count_unique(issue)\n              conditions: '!event.type:transaction'\n              orderBy: count_unique(issue)\n          layout:\n            x: 1\n            y: 0\n            w: 1\n            h: 1\n            minH: 1\n        - title: Events\n          displayType: line\n          interval: 5m\n          widgetType: discover\n          queries:\n            - name: Events\n              fields:\n                - count()\n              aggregates:\n                - count()\n              conditions: '!event.type:transaction'\n              orderBy: count()\n          layout:\n            x: 2\n            y: 0\n            w: 4\n            h: 2\n            minH: 2\n        - title: Affected Users\n          displayType: line\n          interval: 5m\n          widgetType: discover\n          queries:\n            - name: Known Users\n              fields:\n                - count_unique(user)\n              aggregates:\n                - count_unique(user)\n              conditions: has:user.email !event.type:transaction\n              orderBy: count_unique(user)\n            - name: Anonymous Users\n              fields:\n                - count_unique(user)\n              aggregates:\n                - count_unique(user)\n              conditions: '!has:user.email !event.type:transaction'\n              orderBy: count_unique(user)\n          layout:\n            x: 1\n            y: 2\n            w: 1\n            h: 2\n            minH: 2\n        - title: Handled vs. Unhandled\n          displayType: line\n          interval: 5m\n          widgetType: discover\n          queries:\n            - name: Handled\n              fields:\n                - count()\n              aggregates:\n                - count()\n              conditions: error.handled:true\n              orderBy: count()\n            - name: Unhandled\n              fields:\n                - count()\n              aggregates:\n                - count()\n              conditions: error.handled:false\n              orderBy: count()\n          layout:\n            x: 0\n            y: 2\n            w: 1\n            h: 2\n            minH: 2\n        - title: Errors by Country\n          displayType: table\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - geo.country_code\n                - geo.region\n                - count()\n              aggregates:\n                - count()\n              conditions: '!event.type:transaction has:geo.country_code'\n              orderBy: count()\n          layout:\n            x: 4\n            y: 6\n            w: 2\n            h: 4\n            minH: 2\n        - title: High Throughput Transactions\n          displayType: table\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - count()\n                - transaction\n              aggregates:\n                - count()\n              columns:\n                - transaction\n              conditions: '!event.type:error'\n              orderBy: -count()\n          layout:\n            x: 0\n            y: 6\n            w: 2\n            h: 4\n            minH: 2\n        - title: Errors by Browser\n          displayType: table\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - browser.name\n                - count()\n              aggregates:\n                - count()\n              columns:\n                - browser.name\n              conditions: '!event.type:transaction has:browser.name'\n              orderBy: -count()\n          layout:\n            x: 5\n            y: 2\n            w: 1\n            h: 4\n            minH: 2\n        - title: Overall User Misery\n          displayType: big_number\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - user_misery(300)\n              aggregates:\n                - user_misery(300)\n          layout:\n            x: 0\n            y: 1\n            w: 1\n            h: 1\n            minH: 1\n        - title: Overall Apdex\n          displayType: big_number\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - apdex(300)\n              aggregates:\n                - apdex(300)\n          layout:\n            x: 1\n            y: 1\n            w: 1\n            h: 1\n            minH: 1\n        - title: High Throughput Transactions\n          displayType: top_n\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - transaction\n                - count()\n              aggregates:\n                - count()\n              columns:\n                - transaction\n              conditions: '!event.type:error'\n              orderBy: -count()\n          layout:\n            x: 0\n            y: 4\n            w: 2\n            h: 2\n            minH: 2\n        - title: Issues Assigned to Me or My Teams\n          displayType: table\n          interval: 5m\n          widgetType: issue\n          queries:\n            - fields:\n                - assignee\n                - issue\n                - title\n              columns:\n                - assignee\n                - issue\n                - title\n              conditions: assigned_or_suggested:me is:unresolved\n              orderBy: priority\n          layout:\n            x: 2\n            y: 2\n            w: 2\n            h: 4\n            minH: 2\n        - title: Transactions Ordered by Misery\n          displayType: table\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - transaction\n                - user_misery(300)\n              aggregates:\n                - user_misery(300)\n              columns:\n                - transaction\n              orderBy: -user_misery(300)\n          layout:\n            x: 2\n            y: 6\n            w: 2\n            h: 4\n            minH: 2\n        - title: Errors by Browser Over Time\n          displayType: top_n\n          interval: 5m\n          widgetType: discover\n          queries:\n            - fields:\n                - browser.name\n                - count()\n              aggregates:\n                - count()\n              columns:\n                - browser.name\n              conditions: event.type:error has:browser.name\n              orderBy: -count()\n          layout:\n            x: 4\n            y: 2\n            w: 1\n            h: 4\n            minH: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the dashboard id from the URL:\n\nhttps://sentry.io/dashboard/[dashboard-id]\n\n```sh\n$ pulumi import sentry:index/sentryDashboard:SentryDashboard default org-slug/dashboard-id\n```\n\n",
            "properties": {
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this dashboard.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the dashboard belongs to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Dashboard title.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryDashboardWidget:SentryDashboardWidget"
                    },
                    "description": "Dashboard widgets.\n"
                }
            },
            "required": [
                "internalId",
                "organization",
                "title"
            ],
            "inputProperties": {
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the dashboard belongs to.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Dashboard title.\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryDashboardWidget:SentryDashboardWidget"
                    },
                    "description": "Dashboard widgets.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryDashboard resources.\n",
                "properties": {
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this dashboard.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the dashboard belongs to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Dashboard title.\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/SentryDashboardWidget:SentryDashboardWidget"
                        },
                        "description": "Dashboard widgets.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie": {
            "description": "Manage an Opsgenie team integration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst opsgenie = sentry.getSentryOrganizationIntegration({\n    organization: \"my-organization\",\n    providerKey: \"opsgenie\",\n    name: \"my-pagerduty-organization\",\n});\n// Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\nconst test = new sentry.SentryIntegrationOpsgenie(\"test\", {\n    organization: \"my-organization\",\n    integrationId: opsgenie.then(opsgenie =\u003e opsgenie.id),\n    team: \"my-opsgenie-team\",\n    integrationKey: \"c6100908-5c5d-4905-8436-2448fad41bee\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\nopsgenie = sentry.get_sentry_organization_integration(organization=\"my-organization\",\n    provider_key=\"opsgenie\",\n    name=\"my-pagerduty-organization\")\n# Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\ntest = sentry.SentryIntegrationOpsgenie(\"test\",\n    organization=\"my-organization\",\n    integration_id=opsgenie.id,\n    team=\"my-opsgenie-team\",\n    integration_key=\"c6100908-5c5d-4905-8436-2448fad41bee\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var opsgenie = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        ProviderKey = \"opsgenie\",\n        Name = \"my-pagerduty-organization\",\n    });\n\n    // Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\n    var test = new Sentry.SentryIntegrationOpsgenie(\"test\", new()\n    {\n        Organization = \"my-organization\",\n        IntegrationId = opsgenie.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.Id),\n        Team = \"my-opsgenie-team\",\n        IntegrationKey = \"c6100908-5c5d-4905-8436-2448fad41bee\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topsgenie, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"opsgenie\",\n\t\t\tName:         \"my-pagerduty-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\n\t\t_, err = sentry.NewSentryIntegrationOpsgenie(ctx, \"test\", \u0026sentry.SentryIntegrationOpsgenieArgs{\n\t\t\tOrganization:   pulumi.String(\"my-organization\"),\n\t\t\tIntegrationId:  pulumi.String(opsgenie.Id),\n\t\t\tTeam:           pulumi.String(\"my-opsgenie-team\"),\n\t\t\tIntegrationKey: pulumi.String(\"c6100908-5c5d-4905-8436-2448fad41bee\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport com.pulumi.sentry.SentryIntegrationOpsgenie;\nimport com.pulumi.sentry.SentryIntegrationOpsgenieArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var opsgenie = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .organization(\"my-organization\")\n            .providerKey(\"opsgenie\")\n            .name(\"my-pagerduty-organization\")\n            .build());\n\n        // Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\n        var test = new SentryIntegrationOpsgenie(\"test\", SentryIntegrationOpsgenieArgs.builder()\n            .organization(\"my-organization\")\n            .integrationId(opsgenie.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.id()))\n            .team(\"my-opsgenie-team\")\n            .integrationKey(\"c6100908-5c5d-4905-8436-2448fad41bee\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Associate a Opsgenie service and integration key with a Sentry Opsgenie integration\n  test:\n    type: sentry:SentryIntegrationOpsgenie\n    properties:\n      organization: my-organization\n      integrationId: ${opsgenie.id}\n      team: my-opsgenie-team\n      integrationKey: c6100908-5c5d-4905-8436-2448fad41bee\nvariables:\n  opsgenie:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        organization: my-organization\n        providerKey: opsgenie\n        name: my-pagerduty-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization slug from the URL:\n\nhttps://sentry.io/api/0/organizations/[org-slug]/integrations/\n\n[integration-id] is the top-level `id` of the Opsgenie organization integration\n\n[service-id] is the `id` of the service_table record to import under the configData property\n\n```sh\n$ pulumi import sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie default org-slug/integration-id/service-id\n```\n\n",
            "properties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the Opsgenie integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/opsgenie/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The integration key of the Opsgenie service.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The name of the Opsgenie team. In Sentry, this is called Label.\n"
                }
            },
            "required": [
                "integrationId",
                "integrationKey",
                "organization",
                "team"
            ],
            "inputProperties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the Opsgenie integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/opsgenie/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The integration key of the Opsgenie service.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The name of the Opsgenie team. In Sentry, this is called Label.\n"
                }
            },
            "requiredInputs": [
                "integrationId",
                "integrationKey",
                "organization",
                "team"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryIntegrationOpsgenie resources.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the Opsgenie integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/opsgenie/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "The integration key of the Opsgenie service.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "The name of the Opsgenie team. In Sentry, this is called Label.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryIntegrationPagerDuty:SentryIntegrationPagerDuty": {
            "description": "Manage a PagerDuty service integration.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst pagerduty = sentry.getSentryOrganizationIntegration({\n    organization: \"my-organization\",\n    providerKey: \"pagerduty\",\n    name: \"my-pagerduty-organization\",\n});\n// Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\nconst test = new sentry.SentryIntegrationPagerDuty(\"test\", {\n    organization: \"my-organization\",\n    integrationId: pagerduty.then(pagerduty =\u003e pagerduty.id),\n    service: \"my-pagerduty-service\",\n    integrationKey: \"my-pagerduty-integration-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\npagerduty = sentry.get_sentry_organization_integration(organization=\"my-organization\",\n    provider_key=\"pagerduty\",\n    name=\"my-pagerduty-organization\")\n# Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\ntest = sentry.SentryIntegrationPagerDuty(\"test\",\n    organization=\"my-organization\",\n    integration_id=pagerduty.id,\n    service=\"my-pagerduty-service\",\n    integration_key=\"my-pagerduty-integration-key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pagerduty = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        ProviderKey = \"pagerduty\",\n        Name = \"my-pagerduty-organization\",\n    });\n\n    // Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\n    var test = new Sentry.SentryIntegrationPagerDuty(\"test\", new()\n    {\n        Organization = \"my-organization\",\n        IntegrationId = pagerduty.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.Id),\n        Service = \"my-pagerduty-service\",\n        IntegrationKey = \"my-pagerduty-integration-key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpagerduty, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"pagerduty\",\n\t\t\tName:         \"my-pagerduty-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\n\t\t_, err = sentry.NewSentryIntegrationPagerDuty(ctx, \"test\", \u0026sentry.SentryIntegrationPagerDutyArgs{\n\t\t\tOrganization:   pulumi.String(\"my-organization\"),\n\t\t\tIntegrationId:  pulumi.String(pagerduty.Id),\n\t\t\tService:        pulumi.String(\"my-pagerduty-service\"),\n\t\t\tIntegrationKey: pulumi.String(\"my-pagerduty-integration-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport com.pulumi.sentry.SentryIntegrationPagerDuty;\nimport com.pulumi.sentry.SentryIntegrationPagerDutyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pagerduty = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .organization(\"my-organization\")\n            .providerKey(\"pagerduty\")\n            .name(\"my-pagerduty-organization\")\n            .build());\n\n        // Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\n        var test = new SentryIntegrationPagerDuty(\"test\", SentryIntegrationPagerDutyArgs.builder()\n            .organization(\"my-organization\")\n            .integrationId(pagerduty.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.id()))\n            .service(\"my-pagerduty-service\")\n            .integrationKey(\"my-pagerduty-integration-key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Associate a PagerDuty service and integration key with a Sentry PagerDuty integration\n  test:\n    type: sentry:SentryIntegrationPagerDuty\n    properties:\n      organization: my-organization\n      integrationId: ${pagerduty.id}\n      service: my-pagerduty-service\n      integrationKey: my-pagerduty-integration-key\nvariables:\n  pagerduty:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        organization: my-organization\n        providerKey: pagerduty\n        name: my-pagerduty-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization slug from the URL:\n\nhttps://sentry.io/api/0/organizations/[org-slug]/integrations/\n\n[integration-id] is the top-level `id` of the PagerDuty organization integration\n\n[service-id] is the `id` of the service_table record to import under the configData property\n\n```sh\n$ pulumi import sentry:index/sentryIntegrationPagerDuty:SentryIntegrationPagerDuty default org-slug/integration-id/service-id\n```\n\n",
            "properties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the PagerDuty integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/pagerduty/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The integration key of the PagerDuty service.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the PagerDuty service.\n"
                }
            },
            "required": [
                "integrationId",
                "integrationKey",
                "organization",
                "service"
            ],
            "inputProperties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the PagerDuty integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/pagerduty/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The integration key of the PagerDuty service.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the PagerDuty service.\n"
                }
            },
            "requiredInputs": [
                "integrationId",
                "integrationKey",
                "organization",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryIntegrationPagerDuty resources.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the PagerDuty integration. Source from the URL `https://\u003corganization\u003e.sentry.io/settings/integrations/pagerduty/\u003cintegration-id\u003e/` or use the `sentry.getSentryOrganizationIntegration` data source.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "The integration key of the PagerDuty service.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The name of the PagerDuty service.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryIssueAlert:SentryIssueAlert": {
            "description": "## Example Usage\n\n## Import\n\nimport using the organization, project slugs and rule id from the URL:\n\nhttps://sentry.io/organizations/[org-slug]/alerts/rules/[project-slug]/[rule-id]/details/\n\n```sh\n$ pulumi import sentry:index/sentryIssueAlert:SentryIssueAlert default org-slug/project-slug/rule-id\n```\n\n",
            "properties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "string",
                    "description": "List of actions. In JSON string format.\n"
                },
                "conditions": {
                    "type": "string",
                    "description": "List of conditions. In JSON string format.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.\n"
                },
                "filters": {
                    "type": "string",
                    "description": "A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the team or user that owns the rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the resource belongs to.\n"
                }
            },
            "required": [
                "actionMatch",
                "actions",
                "conditions",
                "frequency",
                "name",
                "organization",
                "project"
            ],
            "inputProperties": {
                "actionMatch": {
                    "type": "string",
                    "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                },
                "actions": {
                    "type": "string",
                    "description": "List of actions. In JSON string format.\n"
                },
                "conditions": {
                    "type": "string",
                    "description": "List of conditions. In JSON string format.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform issue alert in a specific environment.\n"
                },
                "filterMatch": {
                    "type": "string",
                    "description": "A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.\n"
                },
                "filters": {
                    "type": "string",
                    "description": "A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "Perform actions at most once every `X` minutes for this issue.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The issue alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the team or user that owns the rule.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the resource belongs to.\n"
                }
            },
            "requiredInputs": [
                "actionMatch",
                "actions",
                "conditions",
                "frequency",
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryIssueAlert resources.\n",
                "properties": {
                    "actionMatch": {
                        "type": "string",
                        "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                    },
                    "actions": {
                        "type": "string",
                        "description": "List of actions. In JSON string format.\n"
                    },
                    "conditions": {
                        "type": "string",
                        "description": "List of conditions. In JSON string format.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform issue alert in a specific environment.\n"
                    },
                    "filterMatch": {
                        "type": "string",
                        "description": "A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.\n"
                    },
                    "filters": {
                        "type": "string",
                        "description": "A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "Perform actions at most once every `X` minutes for this issue.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The issue alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ID of the team or user that owns the rule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryKey:SentryKey": {
            "description": "Return a client key bound to a project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create a key\nconst _default = new sentry.SentryKey(\"default\", {\n    organization: \"my-organization\",\n    project: \"web-app\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create a key\ndefault = sentry.SentryKey(\"default\",\n    organization=\"my-organization\",\n    project=\"web-app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a key\n    var @default = new Sentry.SentryKey(\"default\", new()\n    {\n        Organization = \"my-organization\",\n        Project = \"web-app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a key\n\t\t_, err := sentry.NewSentryKey(ctx, \"default\", \u0026sentry.SentryKeyArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tProject:      pulumi.String(\"web-app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryKey;\nimport com.pulumi.sentry.SentryKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a key\n        var default_ = new SentryKey(\"default\", SentryKeyArgs.builder()\n            .organization(\"my-organization\")\n            .project(\"web-app\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a key\n  default:\n    type: sentry:SentryKey\n    properties:\n      organization: my-organization\n      project: web-app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization, project slugs and key id from the URL:\n\nhttps://sentry.io/settings/[org-slug]/projects/[project-slug]/keys/[key-id]/\n\n```sh\n$ pulumi import sentry:index/sentryKey:SentryKey default org-slug/project-slug/key-id\n```\n\n",
            "properties": {
                "dsnCsp": {
                    "type": "string",
                    "description": "Security header endpoint for features like CSP and Expect-CT reports.\n"
                },
                "dsnPublic": {
                    "type": "string",
                    "description": "The DSN tells the SDK where to send the events to.\n"
                },
                "dsnSecret": {
                    "type": "string",
                    "description": "Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the client key.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the resource belongs to.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project that the key belongs to.\n"
                },
                "public": {
                    "type": "string",
                    "description": "The public key.\n"
                },
                "rateLimitCount": {
                    "type": "integer",
                    "description": "Number of events that can be reported within the rate limit window.\n"
                },
                "rateLimitWindow": {
                    "type": "integer",
                    "description": "Length of time that will be considered when checking the rate limit.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret key.\n",
                    "secret": true
                }
            },
            "required": [
                "dsnCsp",
                "dsnPublic",
                "dsnSecret",
                "name",
                "organization",
                "project",
                "projectId",
                "public",
                "secret"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the client key.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the resource belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project the resource belongs to.\n"
                },
                "rateLimitCount": {
                    "type": "integer",
                    "description": "Number of events that can be reported within the rate limit window.\n"
                },
                "rateLimitWindow": {
                    "type": "integer",
                    "description": "Length of time that will be considered when checking the rate limit.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryKey resources.\n",
                "properties": {
                    "dsnCsp": {
                        "type": "string",
                        "description": "Security header endpoint for features like CSP and Expect-CT reports.\n"
                    },
                    "dsnPublic": {
                        "type": "string",
                        "description": "The DSN tells the SDK where to send the events to.\n"
                    },
                    "dsnSecret": {
                        "type": "string",
                        "description": "Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client key.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project that the key belongs to.\n"
                    },
                    "public": {
                        "type": "string",
                        "description": "The public key.\n"
                    },
                    "rateLimitCount": {
                        "type": "integer",
                        "description": "Number of events that can be reported within the rate limit window.\n"
                    },
                    "rateLimitWindow": {
                        "type": "integer",
                        "description": "Length of time that will be considered when checking the rate limit.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryMetricAlert:SentryMetricAlert": {
            "description": "Sentry Metric Alert resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst slack = sentry.getSentryOrganizationIntegration({\n    organization: sentry_project.main.organization,\n    providerKey: \"slack\",\n    name: \"Slack Workspace\",\n});\nconst main = new sentry.SentryMetricAlert(\"main\", {\n    organization: sentry_project.main.organization,\n    project: sentry_project.main.id,\n    dataset: \"events\",\n    query: \"\",\n    aggregate: \"count()\",\n    timeWindow: 60,\n    thresholdType: 0,\n    resolveThreshold: 0,\n    triggers: [\n        {\n            actions: [{\n                type: \"email\",\n                targetType: \"team\",\n                targetIdentifier: sentry_team.main.team_id,\n            }],\n            alertThreshold: 300,\n            label: \"critical\",\n            thresholdType: 0,\n        },\n        {\n            actions: [{\n                type: \"slack\",\n                targetType: \"specific\",\n                targetIdentifier: \"#slack-channel\",\n                inputChannelId: \"C0XXXXXXXXX\",\n                integrationId: slack.then(slack =\u003e slack.id),\n            }],\n            alertThreshold: 300,\n            label: \"critical\",\n            thresholdType: 0,\n        },\n        {\n            alertThreshold: 100,\n            label: \"warning\",\n            thresholdType: 0,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\nslack = sentry.get_sentry_organization_integration(organization=sentry_project[\"main\"][\"organization\"],\n    provider_key=\"slack\",\n    name=\"Slack Workspace\")\nmain = sentry.SentryMetricAlert(\"main\",\n    organization=sentry_project[\"main\"][\"organization\"],\n    project=sentry_project[\"main\"][\"id\"],\n    dataset=\"events\",\n    query=\"\",\n    aggregate=\"count()\",\n    time_window=60,\n    threshold_type=0,\n    resolve_threshold=0,\n    triggers=[\n        sentry.SentryMetricAlertTriggerArgs(\n            actions=[sentry.SentryMetricAlertTriggerActionArgs(\n                type=\"email\",\n                target_type=\"team\",\n                target_identifier=sentry_team[\"main\"][\"team_id\"],\n            )],\n            alert_threshold=300,\n            label=\"critical\",\n            threshold_type=0,\n        ),\n        sentry.SentryMetricAlertTriggerArgs(\n            actions=[sentry.SentryMetricAlertTriggerActionArgs(\n                type=\"slack\",\n                target_type=\"specific\",\n                target_identifier=\"#slack-channel\",\n                input_channel_id=\"C0XXXXXXXXX\",\n                integration_id=slack.id,\n            )],\n            alert_threshold=300,\n            label=\"critical\",\n            threshold_type=0,\n        ),\n        sentry.SentryMetricAlertTriggerArgs(\n            alert_threshold=100,\n            label=\"warning\",\n            threshold_type=0,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var slack = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Organization = sentry_project.Main.Organization,\n        ProviderKey = \"slack\",\n        Name = \"Slack Workspace\",\n    });\n\n    var main = new Sentry.SentryMetricAlert(\"main\", new()\n    {\n        Organization = sentry_project.Main.Organization,\n        Project = sentry_project.Main.Id,\n        Dataset = \"events\",\n        Query = \"\",\n        Aggregate = \"count()\",\n        TimeWindow = 60,\n        ThresholdType = 0,\n        ResolveThreshold = 0,\n        Triggers = new[]\n        {\n            new Sentry.Inputs.SentryMetricAlertTriggerArgs\n            {\n                Actions = new[]\n                {\n                    new Sentry.Inputs.SentryMetricAlertTriggerActionArgs\n                    {\n                        Type = \"email\",\n                        TargetType = \"team\",\n                        TargetIdentifier = sentry_team.Main.Team_id,\n                    },\n                },\n                AlertThreshold = 300,\n                Label = \"critical\",\n                ThresholdType = 0,\n            },\n            new Sentry.Inputs.SentryMetricAlertTriggerArgs\n            {\n                Actions = new[]\n                {\n                    new Sentry.Inputs.SentryMetricAlertTriggerActionArgs\n                    {\n                        Type = \"slack\",\n                        TargetType = \"specific\",\n                        TargetIdentifier = \"#slack-channel\",\n                        InputChannelId = \"C0XXXXXXXXX\",\n                        IntegrationId = slack.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.Id),\n                    },\n                },\n                AlertThreshold = 300,\n                Label = \"critical\",\n                ThresholdType = 0,\n            },\n            new Sentry.Inputs.SentryMetricAlertTriggerArgs\n            {\n                AlertThreshold = 100,\n                Label = \"warning\",\n                ThresholdType = 0,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tslack, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tOrganization: sentry_project.Main.Organization,\n\t\t\tProviderKey:  \"slack\",\n\t\t\tName:         \"Slack Workspace\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryMetricAlert(ctx, \"main\", \u0026sentry.SentryMetricAlertArgs{\n\t\t\tOrganization:     pulumi.Any(sentry_project.Main.Organization),\n\t\t\tProject:          pulumi.Any(sentry_project.Main.Id),\n\t\t\tDataset:          pulumi.String(\"events\"),\n\t\t\tQuery:            pulumi.String(\"\"),\n\t\t\tAggregate:        pulumi.String(\"count()\"),\n\t\t\tTimeWindow:       pulumi.Float64(60),\n\t\t\tThresholdType:    pulumi.Int(0),\n\t\t\tResolveThreshold: pulumi.Float64(0),\n\t\t\tTriggers: sentry.SentryMetricAlertTriggerArray{\n\t\t\t\t\u0026sentry.SentryMetricAlertTriggerArgs{\n\t\t\t\t\tActions: sentry.SentryMetricAlertTriggerActionArray{\n\t\t\t\t\t\t\u0026sentry.SentryMetricAlertTriggerActionArgs{\n\t\t\t\t\t\t\tType:             pulumi.String(\"email\"),\n\t\t\t\t\t\t\tTargetType:       pulumi.String(\"team\"),\n\t\t\t\t\t\t\tTargetIdentifier: pulumi.Any(sentry_team.Main.Team_id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAlertThreshold: pulumi.Float64(300),\n\t\t\t\t\tLabel:          pulumi.String(\"critical\"),\n\t\t\t\t\tThresholdType:  pulumi.Int(0),\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryMetricAlertTriggerArgs{\n\t\t\t\t\tActions: sentry.SentryMetricAlertTriggerActionArray{\n\t\t\t\t\t\t\u0026sentry.SentryMetricAlertTriggerActionArgs{\n\t\t\t\t\t\t\tType:             pulumi.String(\"slack\"),\n\t\t\t\t\t\t\tTargetType:       pulumi.String(\"specific\"),\n\t\t\t\t\t\t\tTargetIdentifier: pulumi.String(\"#slack-channel\"),\n\t\t\t\t\t\t\tInputChannelId:   pulumi.String(\"C0XXXXXXXXX\"),\n\t\t\t\t\t\t\tIntegrationId:    pulumi.String(slack.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAlertThreshold: pulumi.Float64(300),\n\t\t\t\t\tLabel:          pulumi.String(\"critical\"),\n\t\t\t\t\tThresholdType:  pulumi.Int(0),\n\t\t\t\t},\n\t\t\t\t\u0026sentry.SentryMetricAlertTriggerArgs{\n\t\t\t\t\tAlertThreshold: pulumi.Float64(100),\n\t\t\t\t\tLabel:          pulumi.String(\"warning\"),\n\t\t\t\t\tThresholdType:  pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport com.pulumi.sentry.SentryMetricAlert;\nimport com.pulumi.sentry.SentryMetricAlertArgs;\nimport com.pulumi.sentry.inputs.SentryMetricAlertTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var slack = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .organization(sentry_project.main().organization())\n            .providerKey(\"slack\")\n            .name(\"Slack Workspace\")\n            .build());\n\n        var main = new SentryMetricAlert(\"main\", SentryMetricAlertArgs.builder()\n            .organization(sentry_project.main().organization())\n            .project(sentry_project.main().id())\n            .dataset(\"events\")\n            .query(\"\")\n            .aggregate(\"count()\")\n            .timeWindow(60)\n            .thresholdType(0)\n            .resolveThreshold(0)\n            .triggers(            \n                SentryMetricAlertTriggerArgs.builder()\n                    .actions(SentryMetricAlertTriggerActionArgs.builder()\n                        .type(\"email\")\n                        .targetType(\"team\")\n                        .targetIdentifier(sentry_team.main().team_id())\n                        .build())\n                    .alertThreshold(300)\n                    .label(\"critical\")\n                    .thresholdType(0)\n                    .build(),\n                SentryMetricAlertTriggerArgs.builder()\n                    .actions(SentryMetricAlertTriggerActionArgs.builder()\n                        .type(\"slack\")\n                        .targetType(\"specific\")\n                        .targetIdentifier(\"#slack-channel\")\n                        .inputChannelId(\"C0XXXXXXXXX\")\n                        .integrationId(slack.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.id()))\n                        .build())\n                    .alertThreshold(300)\n                    .label(\"critical\")\n                    .thresholdType(0)\n                    .build(),\n                SentryMetricAlertTriggerArgs.builder()\n                    .alertThreshold(100)\n                    .label(\"warning\")\n                    .thresholdType(0)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: sentry:SentryMetricAlert\n    properties:\n      organization: ${sentry_project.main.organization}\n      project: ${sentry_project.main.id}\n      dataset: events\n      query:\n      aggregate: count()\n      timeWindow: 60\n      thresholdType: 0\n      resolveThreshold: 0\n      triggers:\n        - actions:\n            - type: email\n              targetType: team\n              targetIdentifier: ${sentry_team.main.team_id}\n          alertThreshold: 300\n          label: critical\n          thresholdType: 0\n        - actions:\n            - type: slack\n              targetType: specific\n              targetIdentifier: '#slack-channel'\n              inputChannelId: C0XXXXXXXXX\n              integrationId: ${slack.id}\n          alertThreshold: 300\n          label: critical\n          thresholdType: 0\n        - alertThreshold: 100\n          label: warning\n          thresholdType: 0\nvariables:\n  slack:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        organization: ${sentry_project.main.organization}\n        providerKey: slack\n        name: Slack Workspace\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization, project slugs and rule id from the URL:\n\nhttps://sentry.io/organizations/[org-slug]/projects/[project-slug]/\n\nhttps://sentry.io/organizations/[org-slug]/alerts/rules/details/[rule-id]/\n\nor\n\nhttps://sentry.io/organizations/[org-slug]/alerts/metric-rules/[project-slug]/[rule-id]/\n\n```sh\n$ pulumi import sentry:index/sentryMetricAlert:SentryMetricAlert default org-slug/project-slug/rule-id\n```\n\n",
            "properties": {
                "aggregate": {
                    "type": "string",
                    "description": "The aggregation criteria to apply\n"
                },
                "comparisonDelta": {
                    "type": "number",
                    "description": "An optional int representing the time delta to use as the comparison period, in minutes. Required when using a percentage change threshold\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The Sentry Alert category\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform Alert rule in a specific environment\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events type of dataset.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this metric alert.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The metric alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the metric alert belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Specifies the owner id of this Alert rule\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the metric alert for.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The query filter to apply\n"
                },
                "resolveThreshold": {
                    "type": "number",
                    "description": "The value at which the Alert rule resolves\n"
                },
                "thresholdType": {
                    "type": "integer",
                    "description": "The type of threshold\n"
                },
                "timeWindow": {
                    "type": "number",
                    "description": "The period to evaluate the Alert rule in minutes\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryMetricAlertTrigger:SentryMetricAlertTrigger"
                    }
                }
            },
            "required": [
                "aggregate",
                "environment",
                "internalId",
                "name",
                "organization",
                "owner",
                "project",
                "query",
                "thresholdType",
                "timeWindow",
                "triggers"
            ],
            "inputProperties": {
                "aggregate": {
                    "type": "string",
                    "description": "The aggregation criteria to apply\n"
                },
                "comparisonDelta": {
                    "type": "number",
                    "description": "An optional int representing the time delta to use as the comparison period, in minutes. Required when using a percentage change threshold\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The Sentry Alert category\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Perform Alert rule in a specific environment\n"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events type of dataset.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The metric alert name.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the metric alert belongs to.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Specifies the owner id of this Alert rule\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the metric alert for.\n"
                },
                "query": {
                    "type": "string",
                    "description": "The query filter to apply\n"
                },
                "resolveThreshold": {
                    "type": "number",
                    "description": "The value at which the Alert rule resolves\n"
                },
                "thresholdType": {
                    "type": "integer",
                    "description": "The type of threshold\n"
                },
                "timeWindow": {
                    "type": "number",
                    "description": "The period to evaluate the Alert rule in minutes\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/sentry:index/SentryMetricAlertTrigger:SentryMetricAlertTrigger"
                    }
                }
            },
            "requiredInputs": [
                "aggregate",
                "organization",
                "project",
                "query",
                "thresholdType",
                "timeWindow",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryMetricAlert resources.\n",
                "properties": {
                    "aggregate": {
                        "type": "string",
                        "description": "The aggregation criteria to apply\n"
                    },
                    "comparisonDelta": {
                        "type": "number",
                        "description": "An optional int representing the time delta to use as the comparison period, in minutes. Required when using a percentage change threshold\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The Sentry Alert category\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform Alert rule in a specific environment\n"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The events type of dataset.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this metric alert.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The metric alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the metric alert belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Specifies the owner id of this Alert rule\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the metric alert for.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query filter to apply\n"
                    },
                    "resolveThreshold": {
                        "type": "number",
                        "description": "The value at which the Alert rule resolves\n"
                    },
                    "thresholdType": {
                        "type": "integer",
                        "description": "The type of threshold\n"
                    },
                    "timeWindow": {
                        "type": "number",
                        "description": "The period to evaluate the Alert rule in minutes\n"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/SentryMetricAlertTrigger:SentryMetricAlertTrigger"
                        }
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryNotificationAction:SentryNotificationAction": {
            "description": "Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst defaultSentryProject = new sentry.SentryProject(\"defaultSentryProject\", {\n    organization: \"my-organization\",\n    teams: [\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform: \"javascript\",\n});\n// Create a notification action for the project\nconst defaultSentryNotificationAction = new sentry.SentryNotificationAction(\"defaultSentryNotificationAction\", {\n    organization: defaultSentryProject.organization,\n    triggerType: \"spike-protection\",\n    serviceType: \"sentry_notification\",\n    targetIdentifier: \"default\",\n    targetDisplay: \"default\",\n    projects: [defaultSentryProject.id],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\ndefault_sentry_project = sentry.SentryProject(\"defaultSentryProject\",\n    organization=\"my-organization\",\n    teams=[\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform=\"javascript\")\n# Create a notification action for the project\ndefault_sentry_notification_action = sentry.SentryNotificationAction(\"defaultSentryNotificationAction\",\n    organization=default_sentry_project.organization,\n    trigger_type=\"spike-protection\",\n    service_type=\"sentry_notification\",\n    target_identifier=\"default\",\n    target_display=\"default\",\n    projects=[default_sentry_project.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var defaultSentryProject = new Sentry.SentryProject(\"defaultSentryProject\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n            \"my-second-team\",\n        },\n        Platform = \"javascript\",\n    });\n\n    // Create a notification action for the project\n    var defaultSentryNotificationAction = new Sentry.SentryNotificationAction(\"defaultSentryNotificationAction\", new()\n    {\n        Organization = defaultSentryProject.Organization,\n        TriggerType = \"spike-protection\",\n        ServiceType = \"sentry_notification\",\n        TargetIdentifier = \"default\",\n        TargetDisplay = \"default\",\n        Projects = new[]\n        {\n            defaultSentryProject.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultSentryProject, err := sentry.NewSentryProject(ctx, \"defaultSentryProject\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t\tPlatform: pulumi.String(\"javascript\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a notification action for the project\n\t\t_, err = sentry.NewSentryNotificationAction(ctx, \"defaultSentryNotificationAction\", \u0026sentry.SentryNotificationActionArgs{\n\t\t\tOrganization:     defaultSentryProject.Organization,\n\t\t\tTriggerType:      pulumi.String(\"spike-protection\"),\n\t\t\tServiceType:      pulumi.String(\"sentry_notification\"),\n\t\t\tTargetIdentifier: pulumi.String(\"default\"),\n\t\t\tTargetDisplay:    pulumi.String(\"default\"),\n\t\t\tProjects: pulumi.StringArray{\n\t\t\t\tdefaultSentryProject.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryNotificationAction;\nimport com.pulumi.sentry.SentryNotificationActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var defaultSentryProject = new SentryProject(\"defaultSentryProject\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(            \n                \"my-first-team\",\n                \"my-second-team\")\n            .platform(\"javascript\")\n            .build());\n\n        // Create a notification action for the project\n        var defaultSentryNotificationAction = new SentryNotificationAction(\"defaultSentryNotificationAction\", SentryNotificationActionArgs.builder()\n            .organization(defaultSentryProject.organization())\n            .triggerType(\"spike-protection\")\n            .serviceType(\"sentry_notification\")\n            .targetIdentifier(\"default\")\n            .targetDisplay(\"default\")\n            .projects(defaultSentryProject.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  defaultSentryProject:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-first-team\n        - my-second-team\n      platform: javascript\n  # Create a notification action for the project\n  defaultSentryNotificationAction:\n    type: sentry:SentryNotificationAction\n    properties:\n      organization: ${defaultSentryProject.organization}\n      triggerType: spike-protection\n      serviceType: sentry_notification\n      targetIdentifier: default\n      targetDisplay: default\n      projects:\n        - ${defaultSentryProject.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id\n```\n\n",
            "properties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of project slugs that the Notification Action is created for.\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "The service that is used for sending the notification.\n"
                },
                "targetDisplay": {
                    "type": "string",
                    "description": "The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.\n"
                },
                "targetIdentifier": {
                    "type": "string",
                    "description": "The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.\n"
                },
                "triggerType": {
                    "type": "string",
                    "description": "The type of trigger that will activate this action. Valid values are `spike-protection`.\n"
                }
            },
            "required": [
                "organization",
                "projects",
                "serviceType",
                "triggerType"
            ],
            "inputProperties": {
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of project slugs that the Notification Action is created for.\n"
                },
                "serviceType": {
                    "type": "string",
                    "description": "The service that is used for sending the notification.\n"
                },
                "targetDisplay": {
                    "type": "string",
                    "description": "The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.\n"
                },
                "targetIdentifier": {
                    "type": "string",
                    "description": "The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.\n"
                },
                "triggerType": {
                    "type": "string",
                    "description": "The type of trigger that will activate this action. Valid values are `spike-protection`.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "projects",
                "serviceType",
                "triggerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryNotificationAction resources.\n",
                "properties": {
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of project slugs that the Notification Action is created for.\n"
                    },
                    "serviceType": {
                        "type": "string",
                        "description": "The service that is used for sending the notification.\n"
                    },
                    "targetDisplay": {
                        "type": "string",
                        "description": "The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.\n"
                    },
                    "targetIdentifier": {
                        "type": "string",
                        "description": "The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.\n"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "The type of trigger that will activate this action. Valid values are `spike-protection`.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryOrganization:SentryOrganization": {
            "description": "Sentry Organization resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create an organization\nconst _default = new sentry.SentryOrganization(\"default\", {\n    agreeTerms: true,\n    slug: \"my-organization\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create an organization\ndefault = sentry.SentryOrganization(\"default\",\n    agree_terms=True,\n    slug=\"my-organization\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an organization\n    var @default = new Sentry.SentryOrganization(\"default\", new()\n    {\n        AgreeTerms = true,\n        Slug = \"my-organization\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create an organization\n\t\t_, err := sentry.NewSentryOrganization(ctx, \"default\", \u0026sentry.SentryOrganizationArgs{\n\t\t\tAgreeTerms: pulumi.Bool(true),\n\t\t\tSlug:       pulumi.String(\"my-organization\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryOrganization;\nimport com.pulumi.sentry.SentryOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create an organization\n        var default_ = new SentryOrganization(\"default\", SentryOrganizationArgs.builder()\n            .agreeTerms(true)\n            .slug(\"my-organization\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create an organization\n  default:\n    type: sentry:SentryOrganization\n    properties:\n      agreeTerms: true\n      slug: my-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization slug from the URL:\n\nhttps://sentry.io/organizations/[org-slug]/issues/\n\n```sh\n$ pulumi import sentry:index/sentryOrganization:SentryOrganization default org-slug\n```\n\n",
            "properties": {
                "agreeTerms": {
                    "type": "boolean",
                    "description": "You agree to the applicable terms of service and privacy policy.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this organization.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name for the organization.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The unique URL slug for this organization.\n"
                }
            },
            "required": [
                "agreeTerms",
                "internalId",
                "name",
                "slug"
            ],
            "inputProperties": {
                "agreeTerms": {
                    "type": "boolean",
                    "description": "You agree to the applicable terms of service and privacy policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human readable name for the organization.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The unique URL slug for this organization.\n"
                }
            },
            "requiredInputs": [
                "agreeTerms"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryOrganization resources.\n",
                "properties": {
                    "agreeTerms": {
                        "type": "boolean",
                        "description": "You agree to the applicable terms of service and privacy policy.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human readable name for the organization.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping": {
            "description": "Sentry Organization Code Mapping resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst github = sentry.getSentryOrganizationIntegration({\n    organization: \"my-organization\",\n    providerKey: \"github\",\n    name: \"my-github-organization\",\n});\nconst thisSentryProject = new sentry.SentryProject(\"thisSentryProject\", {\n    organization: \"my-organization\",\n    team: \"my-team\",\n    slug: \"web-app\",\n    platform: \"javascript\",\n    resolveAge: 720,\n});\nconst thisSentryOrganizationRepositoryGithub = new sentry.SentryOrganizationRepositoryGithub(\"thisSentryOrganizationRepositoryGithub\", {\n    organization: \"my-organization\",\n    integrationId: github.then(github =\u003e github.internalId),\n    identifier: \"my-github-organization/my-github-repo\",\n});\nconst thisSentryOrganizationCodeMapping = new sentry.SentryOrganizationCodeMapping(\"thisSentryOrganizationCodeMapping\", {\n    organization: \"my-organization\",\n    integrationId: github.then(github =\u003e github.internalId),\n    repositoryId: thisSentryOrganizationRepositoryGithub.internalId,\n    projectId: thisSentryProject.internalId,\n    defaultBranch: \"main\",\n    stackRoot: \"/\",\n    sourceRoot: \"src/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\ngithub = sentry.get_sentry_organization_integration(organization=\"my-organization\",\n    provider_key=\"github\",\n    name=\"my-github-organization\")\nthis_sentry_project = sentry.SentryProject(\"thisSentryProject\",\n    organization=\"my-organization\",\n    team=\"my-team\",\n    slug=\"web-app\",\n    platform=\"javascript\",\n    resolve_age=720)\nthis_sentry_organization_repository_github = sentry.SentryOrganizationRepositoryGithub(\"thisSentryOrganizationRepositoryGithub\",\n    organization=\"my-organization\",\n    integration_id=github.internal_id,\n    identifier=\"my-github-organization/my-github-repo\")\nthis_sentry_organization_code_mapping = sentry.SentryOrganizationCodeMapping(\"thisSentryOrganizationCodeMapping\",\n    organization=\"my-organization\",\n    integration_id=github.internal_id,\n    repository_id=this_sentry_organization_repository_github.internal_id,\n    project_id=this_sentry_project.internal_id,\n    default_branch=\"main\",\n    stack_root=\"/\",\n    source_root=\"src/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        ProviderKey = \"github\",\n        Name = \"my-github-organization\",\n    });\n\n    var thisSentryProject = new Sentry.SentryProject(\"thisSentryProject\", new()\n    {\n        Organization = \"my-organization\",\n        Team = \"my-team\",\n        Slug = \"web-app\",\n        Platform = \"javascript\",\n        ResolveAge = 720,\n    });\n\n    var thisSentryOrganizationRepositoryGithub = new Sentry.SentryOrganizationRepositoryGithub(\"thisSentryOrganizationRepositoryGithub\", new()\n    {\n        Organization = \"my-organization\",\n        IntegrationId = github.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.InternalId),\n        Identifier = \"my-github-organization/my-github-repo\",\n    });\n\n    var thisSentryOrganizationCodeMapping = new Sentry.SentryOrganizationCodeMapping(\"thisSentryOrganizationCodeMapping\", new()\n    {\n        Organization = \"my-organization\",\n        IntegrationId = github.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.InternalId),\n        RepositoryId = thisSentryOrganizationRepositoryGithub.InternalId,\n        ProjectId = thisSentryProject.InternalId,\n        DefaultBranch = \"main\",\n        StackRoot = \"/\",\n        SourceRoot = \"src/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgithub, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"github\",\n\t\t\tName:         \"my-github-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisSentryProject, err := sentry.NewSentryProject(ctx, \"thisSentryProject\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeam:         pulumi.String(\"my-team\"),\n\t\t\tSlug:         pulumi.String(\"web-app\"),\n\t\t\tPlatform:     pulumi.String(\"javascript\"),\n\t\t\tResolveAge:   pulumi.Int(720),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisSentryOrganizationRepositoryGithub, err := sentry.NewSentryOrganizationRepositoryGithub(ctx, \"thisSentryOrganizationRepositoryGithub\", \u0026sentry.SentryOrganizationRepositoryGithubArgs{\n\t\t\tOrganization:  pulumi.String(\"my-organization\"),\n\t\t\tIntegrationId: pulumi.String(github.InternalId),\n\t\t\tIdentifier:    pulumi.String(\"my-github-organization/my-github-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryOrganizationCodeMapping(ctx, \"thisSentryOrganizationCodeMapping\", \u0026sentry.SentryOrganizationCodeMappingArgs{\n\t\t\tOrganization:  pulumi.String(\"my-organization\"),\n\t\t\tIntegrationId: pulumi.String(github.InternalId),\n\t\t\tRepositoryId:  thisSentryOrganizationRepositoryGithub.InternalId,\n\t\t\tProjectId:     thisSentryProject.InternalId,\n\t\t\tDefaultBranch: pulumi.String(\"main\"),\n\t\t\tStackRoot:     pulumi.String(\"/\"),\n\t\t\tSourceRoot:    pulumi.String(\"src/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryOrganizationRepositoryGithub;\nimport com.pulumi.sentry.SentryOrganizationRepositoryGithubArgs;\nimport com.pulumi.sentry.SentryOrganizationCodeMapping;\nimport com.pulumi.sentry.SentryOrganizationCodeMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var github = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .organization(\"my-organization\")\n            .providerKey(\"github\")\n            .name(\"my-github-organization\")\n            .build());\n\n        var thisSentryProject = new SentryProject(\"thisSentryProject\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .team(\"my-team\")\n            .slug(\"web-app\")\n            .platform(\"javascript\")\n            .resolveAge(720)\n            .build());\n\n        var thisSentryOrganizationRepositoryGithub = new SentryOrganizationRepositoryGithub(\"thisSentryOrganizationRepositoryGithub\", SentryOrganizationRepositoryGithubArgs.builder()\n            .organization(\"my-organization\")\n            .integrationId(github.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.internalId()))\n            .identifier(\"my-github-organization/my-github-repo\")\n            .build());\n\n        var thisSentryOrganizationCodeMapping = new SentryOrganizationCodeMapping(\"thisSentryOrganizationCodeMapping\", SentryOrganizationCodeMappingArgs.builder()\n            .organization(\"my-organization\")\n            .integrationId(github.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.internalId()))\n            .repositoryId(thisSentryOrganizationRepositoryGithub.internalId())\n            .projectId(thisSentryProject.internalId())\n            .defaultBranch(\"main\")\n            .stackRoot(\"/\")\n            .sourceRoot(\"src/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisSentryProject:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      team: my-team\n      slug: web-app\n      platform: javascript\n      resolveAge: 720\n  thisSentryOrganizationRepositoryGithub:\n    type: sentry:SentryOrganizationRepositoryGithub\n    properties:\n      organization: my-organization\n      integrationId: ${github.internalId}\n      identifier: my-github-organization/my-github-repo\n  thisSentryOrganizationCodeMapping:\n    type: sentry:SentryOrganizationCodeMapping\n    properties:\n      organization: my-organization\n      integrationId: ${github.internalId}\n      repositoryId: ${thisSentryOrganizationRepositoryGithub.internalId}\n      projectId: ${thisSentryProject.internalId}\n      defaultBranch: main\n      stackRoot: /\n      sourceRoot: src/\nvariables:\n  github:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        organization: my-organization\n        providerKey: github\n        name: my-github-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization slug from the URL:\n\nhttps://sentry.io/settings/[org-slug]/integrations/github/[org-integration-id]/\n\nand inspect network tab for request to https://sentry.io/api/0/organizations/[org-slug]/code-mappings/\n\nfind the corresponding list element and reference [code-mapping-id] from the key \"id\"\n\n```sh\n$ pulumi import sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping this org-slug/31347\n```\n\n",
            "properties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "Default branch of your code we fall back to if you do not have commit tracking set up.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "Sentry Organization Integration ID.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this resource.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the code mapping is under.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Sentry Project ID.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "Sentry Organization Repository ID.\n"
                },
                "sourceRoot": {
                    "type": "string",
                    "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                },
                "stackRoot": {
                    "type": "string",
                    "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                }
            },
            "required": [
                "defaultBranch",
                "integrationId",
                "internalId",
                "organization",
                "projectId",
                "repositoryId"
            ],
            "inputProperties": {
                "defaultBranch": {
                    "type": "string",
                    "description": "Default branch of your code we fall back to if you do not have commit tracking set up.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "Sentry Organization Integration ID.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the code mapping is under.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Sentry Project ID.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "Sentry Organization Repository ID.\n"
                },
                "sourceRoot": {
                    "type": "string",
                    "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                },
                "stackRoot": {
                    "type": "string",
                    "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                }
            },
            "requiredInputs": [
                "defaultBranch",
                "integrationId",
                "organization",
                "projectId",
                "repositoryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryOrganizationCodeMapping resources.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "Default branch of your code we fall back to if you do not have commit tracking set up.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "Sentry Organization Integration ID.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this resource.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the code mapping is under.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Sentry Project ID.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "Sentry Organization Repository ID.\n"
                    },
                    "sourceRoot": {
                        "type": "string",
                        "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                    },
                    "stackRoot": {
                        "type": "string",
                        "description": "https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryOrganizationMember:SentryOrganizationMember": {
            "description": "Resource for managing Sentry organization members. To add a member to a team, use the `sentry.SentryTeamMember` resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create an organization member\nconst johnDoe = new sentry.SentryOrganizationMember(\"johnDoe\", {\n    email: \"test@example.com\",\n    organization: \"my-organization\",\n    role: \"member\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create an organization member\njohn_doe = sentry.SentryOrganizationMember(\"johnDoe\",\n    email=\"test@example.com\",\n    organization=\"my-organization\",\n    role=\"member\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create an organization member\n    var johnDoe = new Sentry.SentryOrganizationMember(\"johnDoe\", new()\n    {\n        Email = \"test@example.com\",\n        Organization = \"my-organization\",\n        Role = \"member\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create an organization member\n\t\t_, err := sentry.NewSentryOrganizationMember(ctx, \"johnDoe\", \u0026sentry.SentryOrganizationMemberArgs{\n\t\t\tEmail:        pulumi.String(\"test@example.com\"),\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tRole:         pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryOrganizationMember;\nimport com.pulumi.sentry.SentryOrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create an organization member\n        var johnDoe = new SentryOrganizationMember(\"johnDoe\", SentryOrganizationMemberArgs.builder()\n            .email(\"test@example.com\")\n            .organization(\"my-organization\")\n            .role(\"member\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create an organization member\n  johnDoe:\n    type: sentry:SentryOrganizationMember\n    properties:\n      email: test@example.com\n      organization: my-organization\n      role: member\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization, membership id from the URL:\n\nhttps://sentry.io/settings/[org-slug]/members/[member-id]/\n\n```sh\n$ pulumi import sentry:index/sentryOrganizationMember:SentryOrganizationMember john_doe org-slug/member-id\n```\n\n",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email of the organization member.\n"
                },
                "expired": {
                    "type": "boolean",
                    "description": "The invite has expired.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this organization membership.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the user should be invited to.\n"
                },
                "pending": {
                    "type": "boolean",
                    "description": "The invite is pending.\n"
                },
                "role": {
                    "type": "string",
                    "description": "This is the role of the organization member.\n"
                }
            },
            "required": [
                "email",
                "expired",
                "internalId",
                "organization",
                "pending",
                "role"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email of the organization member.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the user should be invited to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "This is the role of the organization member.\n"
                }
            },
            "requiredInputs": [
                "email",
                "organization",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryOrganizationMember resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the organization member.\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "The invite has expired.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization membership.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the user should be invited to.\n"
                    },
                    "pending": {
                        "type": "boolean",
                        "description": "The invite is pending.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "This is the role of the organization member.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub": {
            "description": "Sentry Github Organization Repository resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst github = sentry.getSentryOrganizationIntegration({\n    organization: \"my-organization\",\n    providerKey: \"github\",\n    name: \"my-github-organization\",\n});\nconst _this = new sentry.SentryOrganizationRepositoryGithub(\"this\", {\n    organization: \"my-organization\",\n    integrationId: github.then(github =\u003e github.internalId),\n    identifier: \"my-github-organization/my-github-repo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\nimport pulumiverse_sentry as sentry\n\ngithub = sentry.get_sentry_organization_integration(organization=\"my-organization\",\n    provider_key=\"github\",\n    name=\"my-github-organization\")\nthis = sentry.SentryOrganizationRepositoryGithub(\"this\",\n    organization=\"my-organization\",\n    integration_id=github.internal_id,\n    identifier=\"my-github-organization/my-github-repo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        ProviderKey = \"github\",\n        Name = \"my-github-organization\",\n    });\n\n    var @this = new Sentry.SentryOrganizationRepositoryGithub(\"this\", new()\n    {\n        Organization = \"my-organization\",\n        IntegrationId = github.Apply(getSentryOrganizationIntegrationResult =\u003e getSentryOrganizationIntegrationResult.InternalId),\n        Identifier = \"my-github-organization/my-github-repo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgithub, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"github\",\n\t\t\tName:         \"my-github-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryOrganizationRepositoryGithub(ctx, \"this\", \u0026sentry.SentryOrganizationRepositoryGithubArgs{\n\t\t\tOrganization:  pulumi.String(\"my-organization\"),\n\t\t\tIntegrationId: pulumi.String(github.InternalId),\n\t\t\tIdentifier:    pulumi.String(\"my-github-organization/my-github-repo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport com.pulumi.sentry.SentryOrganizationRepositoryGithub;\nimport com.pulumi.sentry.SentryOrganizationRepositoryGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var github = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .organization(\"my-organization\")\n            .providerKey(\"github\")\n            .name(\"my-github-organization\")\n            .build());\n\n        var this_ = new SentryOrganizationRepositoryGithub(\"this\", SentryOrganizationRepositoryGithubArgs.builder()\n            .organization(\"my-organization\")\n            .integrationId(github.applyValue(getSentryOrganizationIntegrationResult -\u003e getSentryOrganizationIntegrationResult.internalId()))\n            .identifier(\"my-github-organization/my-github-repo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: sentry:SentryOrganizationRepositoryGithub\n    properties:\n      organization: my-organization\n      integrationId: ${github.internalId}\n      identifier: my-github-organization/my-github-repo\nvariables:\n  github:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        organization: my-organization\n        providerKey: github\n        name: my-github-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization slug from the URL:\n\nhttps://sentry.io/organizations/[org-slug]/\n\n[github-org] and [github-repo] are the slugs to your repo\n\n```sh\n$ pulumi import sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub this org-slug/github-org/github-repo\n```\n\n",
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "The repo identifier. For Github it is {github*org}/{github*repo}.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The organization integration ID for Github.\n"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this organization repository.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the Sentry organization this resource belongs to.\n"
                }
            },
            "required": [
                "identifier",
                "integrationId",
                "internalId",
                "organization"
            ],
            "inputProperties": {
                "identifier": {
                    "type": "string",
                    "description": "The repo identifier. For Github it is {github*org}/{github*repo}.\n",
                    "willReplaceOnChanges": true
                },
                "integrationId": {
                    "type": "string",
                    "description": "The organization integration ID for Github.\n",
                    "willReplaceOnChanges": true
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the Sentry organization this resource belongs to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "identifier",
                "integrationId",
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryOrganizationRepositoryGithub resources.\n",
                "properties": {
                    "identifier": {
                        "type": "string",
                        "description": "The repo identifier. For Github it is {github*org}/{github*repo}.\n",
                        "willReplaceOnChanges": true
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The organization integration ID for Github.\n",
                        "willReplaceOnChanges": true
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization repository.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the Sentry organization this resource belongs to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryPlugin:SentryPlugin": {
            "description": "Sentry Plugin resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create a plugin\nconst _default = new sentry.SentryPlugin(\"default\", {\n    config: {\n        webhook: \"slack://webhook\",\n    },\n    organization: \"my-organization\",\n    plugin: \"slack\",\n    project: \"web-app\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create a plugin\ndefault = sentry.SentryPlugin(\"default\",\n    config={\n        \"webhook\": \"slack://webhook\",\n    },\n    organization=\"my-organization\",\n    plugin=\"slack\",\n    project=\"web-app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a plugin\n    var @default = new Sentry.SentryPlugin(\"default\", new()\n    {\n        Config = \n        {\n            { \"webhook\", \"slack://webhook\" },\n        },\n        Organization = \"my-organization\",\n        Plugin = \"slack\",\n        Project = \"web-app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a plugin\n\t\t_, err := sentry.NewSentryPlugin(ctx, \"default\", \u0026sentry.SentryPluginArgs{\n\t\t\tConfig: pulumi.Map{\n\t\t\t\t\"webhook\": pulumi.Any(\"slack://webhook\"),\n\t\t\t},\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tPlugin:       pulumi.String(\"slack\"),\n\t\t\tProject:      pulumi.String(\"web-app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryPlugin;\nimport com.pulumi.sentry.SentryPluginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a plugin\n        var default_ = new SentryPlugin(\"default\", SentryPluginArgs.builder()\n            .config(Map.of(\"webhook\", \"slack://webhook\"))\n            .organization(\"my-organization\")\n            .plugin(\"slack\")\n            .project(\"web-app\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a plugin\n  default:\n    type: sentry:SentryPlugin\n    properties:\n      config:\n        webhook: slack://webhook\n      organization: my-organization\n      plugin: slack\n      project: web-app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Plugin config.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin ID.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the plugin for.\n"
                }
            },
            "required": [
                "organization",
                "plugin",
                "project"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Plugin config.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "plugin": {
                    "type": "string",
                    "description": "Plugin ID.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the plugin for.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "plugin",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryPlugin resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Plugin config.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "plugin": {
                        "type": "string",
                        "description": "Plugin ID.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the plugin for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryProject:SentryProject": {
            "description": "Sentry Project resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create a project\nconst _default = new sentry.SentryProject(\"default\", {\n    defaultRules: false,\n    organization: \"my-organization\",\n    platform: \"javascript\",\n    resolveAge: 720,\n    slug: \"web-app\",\n    teams: [\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create a project\ndefault = sentry.SentryProject(\"default\",\n    default_rules=False,\n    organization=\"my-organization\",\n    platform=\"javascript\",\n    resolve_age=720,\n    slug=\"web-app\",\n    teams=[\n        \"my-first-team\",\n        \"my-second-team\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a project\n    var @default = new Sentry.SentryProject(\"default\", new()\n    {\n        DefaultRules = false,\n        Organization = \"my-organization\",\n        Platform = \"javascript\",\n        ResolveAge = 720,\n        Slug = \"web-app\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n            \"my-second-team\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a project\n\t\t_, err := sentry.NewSentryProject(ctx, \"default\", \u0026sentry.SentryProjectArgs{\n\t\t\tDefaultRules: pulumi.Bool(false),\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tPlatform:     pulumi.String(\"javascript\"),\n\t\t\tResolveAge:   pulumi.Int(720),\n\t\t\tSlug:         pulumi.String(\"web-app\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a project\n        var default_ = new SentryProject(\"default\", SentryProjectArgs.builder()\n            .defaultRules(false)\n            .organization(\"my-organization\")\n            .platform(\"javascript\")\n            .resolveAge(720)\n            .slug(\"web-app\")\n            .teams(            \n                \"my-first-team\",\n                \"my-second-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a project\n  default:\n    type: sentry:SentryProject\n    properties:\n      defaultRules: false\n      organization: my-organization\n      platform: javascript\n      resolveAge: 720\n      slug: web-app\n      teams:\n        - my-first-team\n        - my-second-team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization and team slugs from the URL:\n\nhttps://sentry.io/settings/[org-slug]/projects/[project-slug]/\n\n```sh\n$ pulumi import sentry:index/sentryProject:SentryProject default org-slug/project-slug\n```\n\n",
            "properties": {
                "color": {
                    "type": "string"
                },
                "defaultKey": {
                    "type": "boolean",
                    "description": "Whether to create a default key. By default, Sentry will create a key for you. If you wish to manage keys manually, set this to false and create keys using the `sentry.SentryKey` resource.\n"
                },
                "defaultRules": {
                    "type": "boolean",
                    "description": "Whether to create a default issue alert. Defaults to true where the behavior is to alert the user on every new issue.\n"
                },
                "digestsMaxDelay": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                },
                "digestsMinDelay": {
                    "type": "integer",
                    "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this project.\n"
                },
                "isBookmarked": {
                    "type": "boolean",
                    "deprecationMessage": "is_bookmarked is no longer used"
                },
                "isPublic": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The platform for this project. For a list of valid values, see this page. Use `other` for platforms not listed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Use `internal_id` instead.\n",
                    "deprecationMessage": "Use `internal_id` instead."
                },
                "resolveAge": {
                    "type": "integer",
                    "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this project.\n"
                },
                "status": {
                    "type": "string"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to create the project for. **Deprecated** Use `teams` instead.\n",
                    "deprecationMessage": "Use `teams` instead."
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The slugs of the teams to create the project for.\n"
                }
            },
            "required": [
                "color",
                "digestsMaxDelay",
                "digestsMinDelay",
                "features",
                "internalId",
                "isBookmarked",
                "isPublic",
                "name",
                "organization",
                "platform",
                "projectId",
                "resolveAge",
                "slug",
                "status"
            ],
            "inputProperties": {
                "defaultKey": {
                    "type": "boolean",
                    "description": "Whether to create a default key. By default, Sentry will create a key for you. If you wish to manage keys manually, set this to false and create keys using the `sentry.SentryKey` resource.\n"
                },
                "defaultRules": {
                    "type": "boolean",
                    "description": "Whether to create a default issue alert. Defaults to true where the behavior is to alert the user on every new issue.\n"
                },
                "digestsMaxDelay": {
                    "type": "integer",
                    "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                },
                "digestsMinDelay": {
                    "type": "integer",
                    "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the project.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "platform": {
                    "type": "string",
                    "description": "The platform for this project. For a list of valid values, see this page. Use `other` for platforms not listed.\n"
                },
                "resolveAge": {
                    "type": "integer",
                    "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this project.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to create the project for. **Deprecated** Use `teams` instead.\n",
                    "deprecationMessage": "Use `teams` instead."
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The slugs of the teams to create the project for.\n"
                }
            },
            "requiredInputs": [
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryProject resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "defaultKey": {
                        "type": "boolean",
                        "description": "Whether to create a default key. By default, Sentry will create a key for you. If you wish to manage keys manually, set this to false and create keys using the `sentry.SentryKey` resource.\n"
                    },
                    "defaultRules": {
                        "type": "boolean",
                        "description": "Whether to create a default issue alert. Defaults to true where the behavior is to alert the user on every new issue.\n"
                    },
                    "digestsMaxDelay": {
                        "type": "integer",
                        "description": "The maximum amount of time (in seconds) to wait between scheduling digests for delivery.\n"
                    },
                    "digestsMinDelay": {
                        "type": "integer",
                        "description": "The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this project.\n"
                    },
                    "isBookmarked": {
                        "type": "boolean",
                        "deprecationMessage": "is_bookmarked is no longer used"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for the project.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The platform for this project. For a list of valid values, see this page. Use `other` for platforms not listed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Use `internal_id` instead.\n",
                        "deprecationMessage": "Use `internal_id` instead."
                    },
                    "resolveAge": {
                        "type": "integer",
                        "description": "Hours in which an issue is automatically resolve if not seen after this amount of time.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The optional slug for this project.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "team": {
                        "type": "string",
                        "description": "The slug of the team to create the project for. **Deprecated** Use `teams` instead.\n",
                        "deprecationMessage": "Use `teams` instead."
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The slugs of the teams to create the project for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter": {
            "description": "Sentry Project Inbound Data Filter resource. This resource is used to create and manage inbound data filters for a project. For more information on what filters are available, see the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst _default = new sentry.SentryProject(\"default\", {\n    organization: \"my-organization\",\n    teams: [\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform: \"javascript\",\n});\n// Create an inbound data filter for a project\nconst testSentryProjectInboundDataFilter = new sentry.SentryProjectInboundDataFilter(\"testSentryProjectInboundDataFilter\", {\n    organization: _default.organization,\n    project: _default.id,\n    filterId: \"browser-extensions\",\n    active: true,\n});\n// Create an inbound data filter with subfilters. Only applicable to the\n// `legacy-browser` filter.\nconst testIndex_sentryProjectInboundDataFilterSentryProjectInboundDataFilter = new sentry.SentryProjectInboundDataFilter(\"testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter\", {\n    organization: _default.organization,\n    project: _default.id,\n    filterId: \"legacy-browser\",\n    subfilters: [\n        \"ie_pre_9\",\n        \"ie9\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\ndefault = sentry.SentryProject(\"default\",\n    organization=\"my-organization\",\n    teams=[\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform=\"javascript\")\n# Create an inbound data filter for a project\ntest_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter(\"testSentryProjectInboundDataFilter\",\n    organization=default.organization,\n    project=default.id,\n    filter_id=\"browser-extensions\",\n    active=True)\n# Create an inbound data filter with subfilters. Only applicable to the\n# `legacy-browser` filter.\ntest_index_sentry_project_inbound_data_filter_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter(\"testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter\",\n    organization=default.organization,\n    project=default.id,\n    filter_id=\"legacy-browser\",\n    subfilters=[\n        \"ie_pre_9\",\n        \"ie9\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Sentry.SentryProject(\"default\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n            \"my-second-team\",\n        },\n        Platform = \"javascript\",\n    });\n\n    // Create an inbound data filter for a project\n    var testSentryProjectInboundDataFilter = new Sentry.SentryProjectInboundDataFilter(\"testSentryProjectInboundDataFilter\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        FilterId = \"browser-extensions\",\n        Active = true,\n    });\n\n    // Create an inbound data filter with subfilters. Only applicable to the\n    // `legacy-browser` filter.\n    var testIndex_sentryProjectInboundDataFilterSentryProjectInboundDataFilter = new Sentry.SentryProjectInboundDataFilter(\"testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        FilterId = \"legacy-browser\",\n        Subfilters = new[]\n        {\n            \"ie_pre_9\",\n            \"ie9\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.NewSentryProject(ctx, \"default\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t\tPlatform: pulumi.String(\"javascript\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an inbound data filter for a project\n\t\t_, err = sentry.NewSentryProjectInboundDataFilter(ctx, \"testSentryProjectInboundDataFilter\", \u0026sentry.SentryProjectInboundDataFilterArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tFilterId:     pulumi.String(\"browser-extensions\"),\n\t\t\tActive:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create an inbound data filter with subfilters. Only applicable to the\n\t\t// `legacy-browser` filter.\n\t\t_, err = sentry.NewSentryProjectInboundDataFilter(ctx, \"testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter\", \u0026sentry.SentryProjectInboundDataFilterArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tFilterId:     pulumi.String(\"legacy-browser\"),\n\t\t\tSubfilters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ie_pre_9\"),\n\t\t\t\tpulumi.String(\"ie9\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryProjectInboundDataFilter;\nimport com.pulumi.sentry.SentryProjectInboundDataFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new SentryProject(\"default\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(            \n                \"my-first-team\",\n                \"my-second-team\")\n            .platform(\"javascript\")\n            .build());\n\n        // Create an inbound data filter for a project\n        var testSentryProjectInboundDataFilter = new SentryProjectInboundDataFilter(\"testSentryProjectInboundDataFilter\", SentryProjectInboundDataFilterArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .filterId(\"browser-extensions\")\n            .active(true)\n            .build());\n\n        // Create an inbound data filter with subfilters. Only applicable to the\n        // `legacy-browser` filter.\n        var testIndex_sentryProjectInboundDataFilterSentryProjectInboundDataFilter = new SentryProjectInboundDataFilter(\"testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter\", SentryProjectInboundDataFilterArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .filterId(\"legacy-browser\")\n            .subfilters(            \n                \"ie_pre_9\",\n                \"ie9\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-first-team\n        - my-second-team\n      platform: javascript\n  # Create an inbound data filter for a project\n  testSentryProjectInboundDataFilter:\n    type: sentry:SentryProjectInboundDataFilter\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      filterId: browser-extensions\n      active: true\n  # Create an inbound data filter with subfilters. Only applicable to the\n  # `legacy-browser` filter.\n  testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter:\n    type: sentry:SentryProjectInboundDataFilter\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      filterId: legacy-browser\n      subfilters:\n        - ie_pre_9\n        - ie9\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                },
                "filterId": {
                    "type": "string",
                    "description": "The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the filter for.\n"
                },
                "subfilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.\n"
                }
            },
            "required": [
                "filterId",
                "organization",
                "project"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                },
                "filterId": {
                    "type": "string",
                    "description": "The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the filter for.\n"
                },
                "subfilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.\n"
                }
            },
            "requiredInputs": [
                "filterId",
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryProjectInboundDataFilter resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                    },
                    "filterId": {
                        "type": "string",
                        "description": "The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the filter for.\n"
                    },
                    "subfilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection": {
            "description": "Sentry Project Spike Protection resource. This resource is used to create and manage spike protection for a project.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst defaultSentryProject = new sentry.SentryProject(\"defaultSentryProject\", {\n    organization: \"my-organization\",\n    teams: [\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform: \"javascript\",\n});\n// Enable spike protection for the project\nconst defaultSentryProjectSpikeProtection = new sentry.SentryProjectSpikeProtection(\"defaultSentryProjectSpikeProtection\", {\n    organization: defaultSentryProject.organization,\n    project: defaultSentryProject.id,\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\ndefault_sentry_project = sentry.SentryProject(\"defaultSentryProject\",\n    organization=\"my-organization\",\n    teams=[\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform=\"javascript\")\n# Enable spike protection for the project\ndefault_sentry_project_spike_protection = sentry.SentryProjectSpikeProtection(\"defaultSentryProjectSpikeProtection\",\n    organization=default_sentry_project.organization,\n    project=default_sentry_project.id,\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var defaultSentryProject = new Sentry.SentryProject(\"defaultSentryProject\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n            \"my-second-team\",\n        },\n        Platform = \"javascript\",\n    });\n\n    // Enable spike protection for the project\n    var defaultSentryProjectSpikeProtection = new Sentry.SentryProjectSpikeProtection(\"defaultSentryProjectSpikeProtection\", new()\n    {\n        Organization = defaultSentryProject.Organization,\n        Project = defaultSentryProject.Id,\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultSentryProject, err := sentry.NewSentryProject(ctx, \"defaultSentryProject\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t\tPlatform: pulumi.String(\"javascript\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Enable spike protection for the project\n\t\t_, err = sentry.NewSentryProjectSpikeProtection(ctx, \"defaultSentryProjectSpikeProtection\", \u0026sentry.SentryProjectSpikeProtectionArgs{\n\t\t\tOrganization: defaultSentryProject.Organization,\n\t\t\tProject:      defaultSentryProject.ID(),\n\t\t\tEnabled:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryProjectSpikeProtection;\nimport com.pulumi.sentry.SentryProjectSpikeProtectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var defaultSentryProject = new SentryProject(\"defaultSentryProject\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(            \n                \"my-first-team\",\n                \"my-second-team\")\n            .platform(\"javascript\")\n            .build());\n\n        // Enable spike protection for the project\n        var defaultSentryProjectSpikeProtection = new SentryProjectSpikeProtection(\"defaultSentryProjectSpikeProtection\", SentryProjectSpikeProtectionArgs.builder()\n            .organization(defaultSentryProject.organization())\n            .project(defaultSentryProject.id())\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  defaultSentryProject:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-first-team\n        - my-second-team\n      platform: javascript\n  # Enable spike protection for the project\n  defaultSentryProjectSpikeProtection:\n    type: sentry:SentryProjectSpikeProtection\n    properties:\n      organization: ${defaultSentryProject.organization}\n      project: ${defaultSentryProject.id}\n      enabled: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to enable or disable spike protection for.\n"
                }
            },
            "required": [
                "enabled",
                "organization",
                "project"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to enable or disable spike protection for.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "organization",
                "project"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryProjectSpikeProtection resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to enable or disable spike protection for.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource": {
            "description": "Sentry Project Symbol Source. See the [Sentry documentation](https://docs.sentry.io/api/projects/add-a-symbol-source-to-a-project/) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\nconst _default = new sentry.SentryProject(\"default\", {\n    organization: \"my-organization\",\n    teams: [\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform: \"javascript\",\n});\n// Add an App Store Connect source to the project\nconst httpSentryProjectSymbolSource = new sentry.SentryProjectSymbolSource(\"httpSentryProjectSymbolSource\", {\n    organization: _default.organization,\n    project: _default.id,\n    type: \"appStoreConnect\",\n    layout: {\n        type: \"native\",\n        casing: \"default\",\n    },\n    appConnectIssuer: \"app_connect_issuer\",\n    appConnectPrivateKey: `-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n`,\n    appId: \"app_id\",\n});\n// Add a SymbolServer (HTTP) symbol source to the project\nconst httpIndex_sentryProjectSymbolSourceSentryProjectSymbolSource = new sentry.SentryProjectSymbolSource(\"httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource\", {\n    organization: _default.organization,\n    project: _default.id,\n    type: \"http\",\n    layout: {\n        type: \"native\",\n        casing: \"default\",\n    },\n    url: \"https://example.com\",\n});\n// Add a Google Cloud Storage symbol source to the project\nconst gcs = new sentry.SentryProjectSymbolSource(\"gcs\", {\n    organization: _default.organization,\n    project: _default.id,\n    type: \"s3\",\n    layout: {\n        type: \"native\",\n        casing: \"default\",\n    },\n    bucket: \"gcs-bucket-name\",\n    clientEmail: \"user@project.iam.gserviceaccount.com\",\n    privateKey: `-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n`,\n});\n// Add an Amazon S3 symbol source to the project\nconst s3 = new sentry.SentryProjectSymbolSource(\"s3\", {\n    organization: _default.organization,\n    project: _default.id,\n    type: \"s3\",\n    layout: {\n        type: \"native\",\n        casing: \"default\",\n    },\n    bucket: \"s3-bucket-name\",\n    region: \"us-east-1\",\n    accessKey: \"access_key\",\n    secretKey: \"secret_key\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\ndefault = sentry.SentryProject(\"default\",\n    organization=\"my-organization\",\n    teams=[\n        \"my-first-team\",\n        \"my-second-team\",\n    ],\n    platform=\"javascript\")\n# Add an App Store Connect source to the project\nhttp_sentry_project_symbol_source = sentry.SentryProjectSymbolSource(\"httpSentryProjectSymbolSource\",\n    organization=default.organization,\n    project=default.id,\n    type=\"appStoreConnect\",\n    layout=sentry.SentryProjectSymbolSourceLayoutArgs(\n        type=\"native\",\n        casing=\"default\",\n    ),\n    app_connect_issuer=\"app_connect_issuer\",\n    app_connect_private_key=\"\"\"-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n\"\"\",\n    app_id=\"app_id\")\n# Add a SymbolServer (HTTP) symbol source to the project\nhttp_index_sentry_project_symbol_source_sentry_project_symbol_source = sentry.SentryProjectSymbolSource(\"httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource\",\n    organization=default.organization,\n    project=default.id,\n    type=\"http\",\n    layout=sentry.SentryProjectSymbolSourceLayoutArgs(\n        type=\"native\",\n        casing=\"default\",\n    ),\n    url=\"https://example.com\")\n# Add a Google Cloud Storage symbol source to the project\ngcs = sentry.SentryProjectSymbolSource(\"gcs\",\n    organization=default.organization,\n    project=default.id,\n    type=\"s3\",\n    layout=sentry.SentryProjectSymbolSourceLayoutArgs(\n        type=\"native\",\n        casing=\"default\",\n    ),\n    bucket=\"gcs-bucket-name\",\n    client_email=\"user@project.iam.gserviceaccount.com\",\n    private_key=\"\"\"-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n\"\"\")\n# Add an Amazon S3 symbol source to the project\ns3 = sentry.SentryProjectSymbolSource(\"s3\",\n    organization=default.organization,\n    project=default.id,\n    type=\"s3\",\n    layout=sentry.SentryProjectSymbolSourceLayoutArgs(\n        type=\"native\",\n        casing=\"default\",\n    ),\n    bucket=\"s3-bucket-name\",\n    region=\"us-east-1\",\n    access_key=\"access_key\",\n    secret_key=\"secret_key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Sentry.SentryProject(\"default\", new()\n    {\n        Organization = \"my-organization\",\n        Teams = new[]\n        {\n            \"my-first-team\",\n            \"my-second-team\",\n        },\n        Platform = \"javascript\",\n    });\n\n    // Add an App Store Connect source to the project\n    var httpSentryProjectSymbolSource = new Sentry.SentryProjectSymbolSource(\"httpSentryProjectSymbolSource\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        Type = \"appStoreConnect\",\n        Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs\n        {\n            Type = \"native\",\n            Casing = \"default\",\n        },\n        AppConnectIssuer = \"app_connect_issuer\",\n        AppConnectPrivateKey = @\"-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n\",\n        AppId = \"app_id\",\n    });\n\n    // Add a SymbolServer (HTTP) symbol source to the project\n    var httpIndex_sentryProjectSymbolSourceSentryProjectSymbolSource = new Sentry.SentryProjectSymbolSource(\"httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        Type = \"http\",\n        Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs\n        {\n            Type = \"native\",\n            Casing = \"default\",\n        },\n        Url = \"https://example.com\",\n    });\n\n    // Add a Google Cloud Storage symbol source to the project\n    var gcs = new Sentry.SentryProjectSymbolSource(\"gcs\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        Type = \"s3\",\n        Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs\n        {\n            Type = \"native\",\n            Casing = \"default\",\n        },\n        Bucket = \"gcs-bucket-name\",\n        ClientEmail = \"user@project.iam.gserviceaccount.com\",\n        PrivateKey = @\"-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n\",\n    });\n\n    // Add an Amazon S3 symbol source to the project\n    var s3 = new Sentry.SentryProjectSymbolSource(\"s3\", new()\n    {\n        Organization = @default.Organization,\n        Project = @default.Id,\n        Type = \"s3\",\n        Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs\n        {\n            Type = \"native\",\n            Casing = \"default\",\n        },\n        Bucket = \"s3-bucket-name\",\n        Region = \"us-east-1\",\n        AccessKey = \"access_key\",\n        SecretKey = \"secret_key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.NewSentryProject(ctx, \"default\", \u0026sentry.SentryProjectArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeams: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-first-team\"),\n\t\t\t\tpulumi.String(\"my-second-team\"),\n\t\t\t},\n\t\t\tPlatform: pulumi.String(\"javascript\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Add an App Store Connect source to the project\n\t\t_, err = sentry.NewSentryProjectSymbolSource(ctx, \"httpSentryProjectSymbolSource\", \u0026sentry.SentryProjectSymbolSourceArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tType:         pulumi.String(\"appStoreConnect\"),\n\t\t\tLayout: \u0026sentry.SentryProjectSymbolSourceLayoutArgs{\n\t\t\t\tType:   pulumi.String(\"native\"),\n\t\t\t\tCasing: pulumi.String(\"default\"),\n\t\t\t},\n\t\t\tAppConnectIssuer:     pulumi.String(\"app_connect_issuer\"),\n\t\t\tAppConnectPrivateKey: pulumi.String(\"-----BEGIN PRIVATE KEY-----\\n[PRIVATE-KEY]\\n-----END PRIVATE KEY-----\\n\"),\n\t\t\tAppId:                pulumi.String(\"app_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Add a SymbolServer (HTTP) symbol source to the project\n\t\t_, err = sentry.NewSentryProjectSymbolSource(ctx, \"httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource\", \u0026sentry.SentryProjectSymbolSourceArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tType:         pulumi.String(\"http\"),\n\t\t\tLayout: \u0026sentry.SentryProjectSymbolSourceLayoutArgs{\n\t\t\t\tType:   pulumi.String(\"native\"),\n\t\t\t\tCasing: pulumi.String(\"default\"),\n\t\t\t},\n\t\t\tUrl: pulumi.String(\"https://example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Add a Google Cloud Storage symbol source to the project\n\t\t_, err = sentry.NewSentryProjectSymbolSource(ctx, \"gcs\", \u0026sentry.SentryProjectSymbolSourceArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tType:         pulumi.String(\"s3\"),\n\t\t\tLayout: \u0026sentry.SentryProjectSymbolSourceLayoutArgs{\n\t\t\t\tType:   pulumi.String(\"native\"),\n\t\t\t\tCasing: pulumi.String(\"default\"),\n\t\t\t},\n\t\t\tBucket:      pulumi.String(\"gcs-bucket-name\"),\n\t\t\tClientEmail: pulumi.String(\"user@project.iam.gserviceaccount.com\"),\n\t\t\tPrivateKey:  pulumi.String(\"-----BEGIN PRIVATE KEY-----\\n[PRIVATE-KEY]\\n-----END PRIVATE KEY-----\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Add an Amazon S3 symbol source to the project\n\t\t_, err = sentry.NewSentryProjectSymbolSource(ctx, \"s3\", \u0026sentry.SentryProjectSymbolSourceArgs{\n\t\t\tOrganization: _default.Organization,\n\t\t\tProject:      _default.ID(),\n\t\t\tType:         pulumi.String(\"s3\"),\n\t\t\tLayout: \u0026sentry.SentryProjectSymbolSourceLayoutArgs{\n\t\t\t\tType:   pulumi.String(\"native\"),\n\t\t\t\tCasing: pulumi.String(\"default\"),\n\t\t\t},\n\t\t\tBucket:    pulumi.String(\"s3-bucket-name\"),\n\t\t\tRegion:    pulumi.String(\"us-east-1\"),\n\t\t\tAccessKey: pulumi.String(\"access_key\"),\n\t\t\tSecretKey: pulumi.String(\"secret_key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryProject;\nimport com.pulumi.sentry.SentryProjectArgs;\nimport com.pulumi.sentry.SentryProjectSymbolSource;\nimport com.pulumi.sentry.SentryProjectSymbolSourceArgs;\nimport com.pulumi.sentry.inputs.SentryProjectSymbolSourceLayoutArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new SentryProject(\"default\", SentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .teams(            \n                \"my-first-team\",\n                \"my-second-team\")\n            .platform(\"javascript\")\n            .build());\n\n        // Add an App Store Connect source to the project\n        var httpSentryProjectSymbolSource = new SentryProjectSymbolSource(\"httpSentryProjectSymbolSource\", SentryProjectSymbolSourceArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .type(\"appStoreConnect\")\n            .layout(SentryProjectSymbolSourceLayoutArgs.builder()\n                .type(\"native\")\n                .casing(\"default\")\n                .build())\n            .appConnectIssuer(\"app_connect_issuer\")\n            .appConnectPrivateKey(\"\"\"\n-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n            \"\"\")\n            .appId(\"app_id\")\n            .build());\n\n        // Add a SymbolServer (HTTP) symbol source to the project\n        var httpIndex_sentryProjectSymbolSourceSentryProjectSymbolSource = new SentryProjectSymbolSource(\"httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource\", SentryProjectSymbolSourceArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .type(\"http\")\n            .layout(SentryProjectSymbolSourceLayoutArgs.builder()\n                .type(\"native\")\n                .casing(\"default\")\n                .build())\n            .url(\"https://example.com\")\n            .build());\n\n        // Add a Google Cloud Storage symbol source to the project\n        var gcs = new SentryProjectSymbolSource(\"gcs\", SentryProjectSymbolSourceArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .type(\"s3\")\n            .layout(SentryProjectSymbolSourceLayoutArgs.builder()\n                .type(\"native\")\n                .casing(\"default\")\n                .build())\n            .bucket(\"gcs-bucket-name\")\n            .clientEmail(\"user@project.iam.gserviceaccount.com\")\n            .privateKey(\"\"\"\n-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n            \"\"\")\n            .build());\n\n        // Add an Amazon S3 symbol source to the project\n        var s3 = new SentryProjectSymbolSource(\"s3\", SentryProjectSymbolSourceArgs.builder()\n            .organization(default_.organization())\n            .project(default_.id())\n            .type(\"s3\")\n            .layout(SentryProjectSymbolSourceLayoutArgs.builder()\n                .type(\"native\")\n                .casing(\"default\")\n                .build())\n            .bucket(\"s3-bucket-name\")\n            .region(\"us-east-1\")\n            .accessKey(\"access_key\")\n            .secretKey(\"secret_key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: sentry:SentryProject\n    properties:\n      organization: my-organization\n      teams:\n        - my-first-team\n        - my-second-team\n      platform: javascript\n  # Add an App Store Connect source to the project\n  httpSentryProjectSymbolSource:\n    type: sentry:SentryProjectSymbolSource\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      type: appStoreConnect\n      layout:\n        type: native\n        casing: default\n      appConnectIssuer: app_connect_issuer\n      appConnectPrivateKey: |\n        -----BEGIN PRIVATE KEY-----\n        [PRIVATE-KEY]\n        -----END PRIVATE KEY-----\n      appId: app_id\n  # Add a SymbolServer (HTTP) symbol source to the project\n  httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource:\n    type: sentry:SentryProjectSymbolSource\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      type: http\n      layout:\n        type: native\n        casing: default\n      url: https://example.com\n  # Add a Google Cloud Storage symbol source to the project\n  gcs:\n    type: sentry:SentryProjectSymbolSource\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      type: s3\n      layout:\n        type: native\n        casing: default\n      bucket: gcs-bucket-name\n      clientEmail: user@project.iam.gserviceaccount.com\n      privateKey: |\n        -----BEGIN PRIVATE KEY-----\n        [PRIVATE-KEY]\n        -----END PRIVATE KEY-----\n  # Add an Amazon S3 symbol source to the project\n  s3:\n    type: sentry:SentryProjectSymbolSource\n    properties:\n      organization: ${default.organization}\n      project: ${default.id}\n      type: s3\n      layout:\n        type: native\n        casing: default\n      bucket: s3-bucket-name\n      region: us-east-1\n      accessKey: access_key\n      secretKey: secret_key\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n```sh\n$ pulumi import sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource default org-slug/project-slug/symbol-source-id\n```\n\n",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS Access Key.Required for S3 sources, invalid for all others.\n"
                },
                "appConnectIssuer": {
                    "type": "string",
                    "description": "The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.\n"
                },
                "appConnectPrivateKey": {
                    "type": "string",
                    "description": "The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.\n",
                    "secret": true
                },
                "appId": {
                    "type": "string",
                    "description": "The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The GCS email address for authentication. Required for GCS sources, invalid for all others.\n"
                },
                "layout": {
                    "$ref": "#/types/sentry:index/SentryProjectSymbolSourceLayout:SentryProjectSymbolSourceLayout",
                    "description": "Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of the source.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for accessing the source. Optional for HTTP sources, invalid for all others.\n",
                    "secret": true
                },
                "prefix": {
                    "type": "string",
                    "description": "The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The GCS private key. Required for GCS sources, invalid for all others.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the filter for.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The source's S3 region. Required for S3 sources, invalid for all others.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS Secret Access Key.Required for S3 sources, invalid for all others.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The source's URL. Optional for HTTP sources, invalid for all others.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user name for accessing the source. Optional for HTTP sources, invalid for all others.\n"
                }
            },
            "required": [
                "name",
                "organization",
                "project",
                "type"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS Access Key.Required for S3 sources, invalid for all others.\n"
                },
                "appConnectIssuer": {
                    "type": "string",
                    "description": "The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.\n"
                },
                "appConnectPrivateKey": {
                    "type": "string",
                    "description": "The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.\n",
                    "secret": true
                },
                "appId": {
                    "type": "string",
                    "description": "The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                },
                "clientEmail": {
                    "type": "string",
                    "description": "The GCS email address for authentication. Required for GCS sources, invalid for all others.\n"
                },
                "layout": {
                    "$ref": "#/types/sentry:index/SentryProjectSymbolSourceLayout:SentryProjectSymbolSourceLayout",
                    "description": "Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The human-readable name of the source.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the project belongs to.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for accessing the source. Optional for HTTP sources, invalid for all others.\n",
                    "secret": true
                },
                "prefix": {
                    "type": "string",
                    "description": "The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The GCS private key. Required for GCS sources, invalid for all others.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The slug of the project to create the filter for.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The source's S3 region. Required for S3 sources, invalid for all others.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS Secret Access Key.Required for S3 sources, invalid for all others.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).\n"
                },
                "url": {
                    "type": "string",
                    "description": "The source's URL. Optional for HTTP sources, invalid for all others.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user name for accessing the source. Optional for HTTP sources, invalid for all others.\n"
                }
            },
            "requiredInputs": [
                "organization",
                "project",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryProjectSymbolSource resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The AWS Access Key.Required for S3 sources, invalid for all others.\n"
                    },
                    "appConnectIssuer": {
                        "type": "string",
                        "description": "The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.\n"
                    },
                    "appConnectPrivateKey": {
                        "type": "string",
                        "description": "The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.\n",
                        "secret": true
                    },
                    "appId": {
                        "type": "string",
                        "description": "The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                    },
                    "clientEmail": {
                        "type": "string",
                        "description": "The GCS email address for authentication. Required for GCS sources, invalid for all others.\n"
                    },
                    "layout": {
                        "$ref": "#/types/sentry:index/SentryProjectSymbolSourceLayout:SentryProjectSymbolSourceLayout",
                        "description": "Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name of the source.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the project belongs to.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for accessing the source. Optional for HTTP sources, invalid for all others.\n",
                        "secret": true
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The GCS private key. Required for GCS sources, invalid for all others.\n",
                        "secret": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project to create the filter for.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The source's S3 region. Required for S3 sources, invalid for all others.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The AWS Secret Access Key.Required for S3 sources, invalid for all others.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The source's URL. Optional for HTTP sources, invalid for all others.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The user name for accessing the source. Optional for HTTP sources, invalid for all others.\n"
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryTeam:SentryTeam": {
            "description": "Sentry Team resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Create a team\nconst _default = new sentry.SentryTeam(\"default\", {\n    organization: \"my-organization\",\n    slug: \"my-team\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Create a team\ndefault = sentry.SentryTeam(\"default\",\n    organization=\"my-organization\",\n    slug=\"my-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Create a team\n    var @default = new Sentry.SentryTeam(\"default\", new()\n    {\n        Organization = \"my-organization\",\n        Slug = \"my-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Create a team\n\t\t_, err := sentry.NewSentryTeam(ctx, \"default\", \u0026sentry.SentryTeamArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tSlug:         pulumi.String(\"my-team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryTeam;\nimport com.pulumi.sentry.SentryTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Create a team\n        var default_ = new SentryTeam(\"default\", SentryTeamArgs.builder()\n            .organization(\"my-organization\")\n            .slug(\"my-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a team\n  default:\n    type: sentry:SentryTeam\n    properties:\n      organization: my-organization\n      slug: my-team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the organization and team slugs from the URL:\n\nhttps://sentry.io/settings/[org-slug]/teams/[team-slug]/members/\n\n```sh\n$ pulumi import sentry:index/sentryTeam:SentryTeam default org-slug/team-slug\n```\n\n",
            "properties": {
                "hasAccess": {
                    "type": "boolean"
                },
                "internalId": {
                    "type": "string",
                    "description": "The internal ID for this team.\n"
                },
                "isMember": {
                    "type": "boolean"
                },
                "isPending": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this team.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Use `internal_id` instead.\n",
                    "deprecationMessage": "Use `internal_id` instead."
                }
            },
            "required": [
                "hasAccess",
                "internalId",
                "isMember",
                "isPending",
                "name",
                "organization",
                "slug",
                "teamId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The optional slug for this team.\n"
                }
            },
            "requiredInputs": [
                "organization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryTeam resources.\n",
                "properties": {
                    "hasAccess": {
                        "type": "boolean"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this team.\n"
                    },
                    "isMember": {
                        "type": "boolean"
                    },
                    "isPending": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the team should be created for.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The optional slug for this team.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Use `internal_id` instead.\n",
                        "deprecationMessage": "Use `internal_id` instead."
                    }
                },
                "type": "object"
            }
        },
        "sentry:index/sentryTeamMember:SentryTeamMember": {
            "description": "Sentry Team Member resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumiverse/sentry\";\n\n// Add a member to a team\nconst defaultSentryOrganizationMember = new sentry.SentryOrganizationMember(\"defaultSentryOrganizationMember\", {\n    organization: \"my-organization\",\n    email: \"test@example.com\",\n    role: \"member\",\n});\nconst defaultSentryTeam = new sentry.SentryTeam(\"defaultSentryTeam\", {\n    organization: \"my-organization\",\n    slug: \"my-team\",\n});\nconst defaultSentryTeamMember = new sentry.SentryTeamMember(\"defaultSentryTeamMember\", {\n    organization: \"my-organization\",\n    team: defaultSentryTeam.id,\n    memberId: defaultSentryOrganizationMember.internalId,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_sentry as sentry\n\n# Add a member to a team\ndefault_sentry_organization_member = sentry.SentryOrganizationMember(\"defaultSentryOrganizationMember\",\n    organization=\"my-organization\",\n    email=\"test@example.com\",\n    role=\"member\")\ndefault_sentry_team = sentry.SentryTeam(\"defaultSentryTeam\",\n    organization=\"my-organization\",\n    slug=\"my-team\")\ndefault_sentry_team_member = sentry.SentryTeamMember(\"defaultSentryTeamMember\",\n    organization=\"my-organization\",\n    team=default_sentry_team.id,\n    member_id=default_sentry_organization_member.internal_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumiverse.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add a member to a team\n    var defaultSentryOrganizationMember = new Sentry.SentryOrganizationMember(\"defaultSentryOrganizationMember\", new()\n    {\n        Organization = \"my-organization\",\n        Email = \"test@example.com\",\n        Role = \"member\",\n    });\n\n    var defaultSentryTeam = new Sentry.SentryTeam(\"defaultSentryTeam\", new()\n    {\n        Organization = \"my-organization\",\n        Slug = \"my-team\",\n    });\n\n    var defaultSentryTeamMember = new Sentry.SentryTeamMember(\"defaultSentryTeamMember\", new()\n    {\n        Organization = \"my-organization\",\n        Team = defaultSentryTeam.Id,\n        MemberId = defaultSentryOrganizationMember.InternalId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add a member to a team\n\t\tdefaultSentryOrganizationMember, err := sentry.NewSentryOrganizationMember(ctx, \"defaultSentryOrganizationMember\", \u0026sentry.SentryOrganizationMemberArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tEmail:        pulumi.String(\"test@example.com\"),\n\t\t\tRole:         pulumi.String(\"member\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultSentryTeam, err := sentry.NewSentryTeam(ctx, \"defaultSentryTeam\", \u0026sentry.SentryTeamArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tSlug:         pulumi.String(\"my-team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.NewSentryTeamMember(ctx, \"defaultSentryTeamMember\", \u0026sentry.SentryTeamMemberArgs{\n\t\t\tOrganization: pulumi.String(\"my-organization\"),\n\t\t\tTeam:         defaultSentryTeam.ID(),\n\t\t\tMemberId:     defaultSentryOrganizationMember.InternalId,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryOrganizationMember;\nimport com.pulumi.sentry.SentryOrganizationMemberArgs;\nimport com.pulumi.sentry.SentryTeam;\nimport com.pulumi.sentry.SentryTeamArgs;\nimport com.pulumi.sentry.SentryTeamMember;\nimport com.pulumi.sentry.SentryTeamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Add a member to a team\n        var defaultSentryOrganizationMember = new SentryOrganizationMember(\"defaultSentryOrganizationMember\", SentryOrganizationMemberArgs.builder()\n            .organization(\"my-organization\")\n            .email(\"test@example.com\")\n            .role(\"member\")\n            .build());\n\n        var defaultSentryTeam = new SentryTeam(\"defaultSentryTeam\", SentryTeamArgs.builder()\n            .organization(\"my-organization\")\n            .slug(\"my-team\")\n            .build());\n\n        var defaultSentryTeamMember = new SentryTeamMember(\"defaultSentryTeamMember\", SentryTeamMemberArgs.builder()\n            .organization(\"my-organization\")\n            .team(defaultSentryTeam.id())\n            .memberId(defaultSentryOrganizationMember.internalId())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add a member to a team\n  defaultSentryOrganizationMember:\n    type: sentry:SentryOrganizationMember\n    properties:\n      organization: my-organization\n      email: test@example.com\n      role: member\n  defaultSentryTeam:\n    type: sentry:SentryTeam\n    properties:\n      organization: my-organization\n      slug: my-team\n  defaultSentryTeamMember:\n    type: sentry:SentryTeamMember\n    properties:\n      organization: my-organization\n      team: ${defaultSentryTeam.id}\n      memberId: ${defaultSentryOrganizationMember.internalId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nimport using the member ID and team slug from the URL:\n\nhttps://[org-slug].sentry.io/settings/teams/[team-slug]/members/\n\nhttps://[org-slug].sentry.io/settings/members/[member-id]/\n\n```sh\n$ pulumi import sentry:index/sentryTeamMember:SentryTeamMember default org-slug/team-slug/member-id\n```\n\n",
            "properties": {
                "effectiveRole": {
                    "type": "string",
                    "description": "The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.\n"
                },
                "memberId": {
                    "type": "string",
                    "description": "The ID of the member to add to the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to add the member to.\n"
                }
            },
            "required": [
                "effectiveRole",
                "memberId",
                "organization",
                "team"
            ],
            "inputProperties": {
                "memberId": {
                    "type": "string",
                    "description": "The ID of the member to add to the team.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "The slug of the organization the team should be created for.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.\n"
                },
                "team": {
                    "type": "string",
                    "description": "The slug of the team to add the member to.\n"
                }
            },
            "requiredInputs": [
                "memberId",
                "organization",
                "team"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SentryTeamMember resources.\n",
                "properties": {
                    "effectiveRole": {
                        "type": "string",
                        "description": "The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.\n"
                    },
                    "memberId": {
                        "type": "string",
                        "description": "The ID of the member to add to the team.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the team should be created for.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.\n"
                    },
                    "team": {
                        "type": "string",
                        "description": "The slug of the team to add the member to.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "sentry:index/getSentryAllKeys:getSentryAllKeys": {
            "description": "List a Project's Client Keys.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst all = sentry.getSentryAllKeys({\n    organization: \"my-organization\",\n    project: \"web-app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\nall = sentry.get_sentry_all_keys(organization=\"my-organization\",\n    project=\"web-app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Sentry.GetSentryAllKeys.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        Project = \"web-app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.GetSentryAllKeys(ctx, \u0026sentry.GetSentryAllKeysArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProject:      \"web-app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryAllKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = SentryFunctions.getSentryAllKeys(GetSentryAllKeysArgs.builder()\n            .organization(\"my-organization\")\n            .project(\"web-app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: sentry:getSentryAllKeys\n      Arguments:\n        organization: my-organization\n        project: web-app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryAllKeys.\n",
                "properties": {
                    "filterStatus": {
                        "type": "string",
                        "description": "Filter client keys by `active` or `inactive`. Defaults to returning all keys if not specified.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryAllKeys.\n",
                "properties": {
                    "filterStatus": {
                        "type": "string",
                        "description": "Filter client keys by `active` or `inactive`. Defaults to returning all keys if not specified.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getSentryAllKeysKey:getSentryAllKeysKey"
                        },
                        "description": "The list of client keys.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "keys",
                    "organization",
                    "project",
                    "id"
                ]
            }
        },
        "sentry:index/getSentryAllProjects:getSentryAllProjects": {
            "description": "Return a list of projects available to the authenticated session.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst default = sentry.getSentryAllProjects({\n    organization: \"my-organization\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ndefault = sentry.get_sentry_all_projects(organization=\"my-organization\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sentry.GetSentryAllProjects.Invoke(new()\n    {\n        Organization = \"my-organization\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.GetSentryAllProjects(ctx, \u0026sentry.GetSentryAllProjectsArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryAllProjectsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SentryFunctions.getSentryAllProjects(GetSentryAllProjectsArgs.builder()\n            .organization(\"my-organization\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sentry:getSentryAllProjects\n      Arguments:\n        organization: my-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryAllProjects.\n",
                "properties": {
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryAllProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "projectSlugs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The slugs of the projects.\n"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getSentryAllProjectsProject:getSentryAllProjectsProject"
                        },
                        "description": "The list of projects.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "projectSlugs",
                    "projects",
                    "id"
                ]
            }
        },
        "sentry:index/getSentryDashboard:getSentryDashboard": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Create a copy of a Dashboard\n  copy:\n    type: sentry:SentryDashboard\n    properties:\n      organization: ${original.organization} # Copy and modify attributes as necessary.\n      title: ${original.title}-copy\n      dynamic:\n        - forEach: ${original.widgets}\n          content:\n            - title: ${widget.value.title}\n              displayType: ${widget.value.display_type}\n              interval: ${widget.value.interval}\n              widgetType: ${widget.value.widget_type}\n              limit: ${widget.value.limit}\n              dynamic:\n                - forEach: ${widget.value.query}\n                  content:\n                    - name: ${query.value.name}\n                      fields: ${query.value.fields}\n                      aggregates: ${query.value.aggregates}\n                      columns: ${query.value.columns}\n                      fieldAliases: ${query.value.field_aliases}\n                      conditions: ${query.value.conditions}\n                      orderBy: ${query.value.order_by}\n              layout:\n                - x: ${widget.value.layout[0].x}\n                  y: ${widget.value.layout[0].y}\n                  w: ${widget.value.layout[0].w}\n                  h: ${widget.value.layout[0].h}\n                  minH: ${widget.value.layout[0].min_h}\nvariables:\n  original:\n    fn::invoke:\n      Function: sentry:getSentryDashboard\n      Arguments:\n        organization: my-organization\n        internalId: '42'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryDashboard.\n",
                "properties": {
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this dashboard.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the dashboard belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryDashboard.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this dashboard.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the dashboard belongs to.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Dashboard title.\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getSentryDashboardWidget:getSentryDashboardWidget"
                        },
                        "description": "Dashboard widgets.\n"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization",
                    "title",
                    "widgets",
                    "id"
                ]
            }
        },
        "sentry:index/getSentryIssueAlert:getSentryIssueAlert": {
            "description": "Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryIssueAlertArgs;\nimport com.pulumi.sentry.SentryIssueAlert;\nimport com.pulumi.sentry.SentryIssueAlertArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var original = SentryFunctions.getSentryIssueAlert(GetSentryIssueAlertArgs.builder()\n            .organization(\"my-organization\")\n            .project(\"my-project\")\n            .internalId(\"42\")\n            .build());\n\n        // Create a copy of an Issue Alert\n        var copy = new SentryIssueAlert(\"copy\", SentryIssueAlertArgs.builder()\n            .organization(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.organization()))\n            .project(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.project()))\n            .actionMatch(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.actionMatch()))\n            .filterMatch(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.filterMatch()))\n            .frequency(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.frequency()))\n            .conditions(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.conditions()))\n            .filters(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.filters()))\n            .actions(original.applyValue(getSentryIssueAlertResult -\u003e getSentryIssueAlertResult.actions()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a copy of an Issue Alert\n  copy:\n    type: sentry:SentryIssueAlert\n    properties:\n      organization: ${original.organization}\n      project: ${original.project} # Copy and modify attributes as necessary.\n      actionMatch: ${original.actionMatch}\n      filterMatch: ${original.filterMatch}\n      frequency: ${original.frequency}\n      conditions: ${original.conditions}\n      filters: ${original.filters}\n      actions: ${original.actions}\nvariables:\n  original:\n    fn::invoke:\n      Function: sentry:getSentryIssueAlert\n      Arguments:\n        organization: my-organization\n        project: my-project\n        internalId: '42'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryIssueAlert.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryIssueAlert.\n",
                "properties": {
                    "actionMatch": {
                        "type": "string",
                        "description": "Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.\n"
                    },
                    "actions": {
                        "type": "string",
                        "description": "List of actions. In JSON string format.\n"
                    },
                    "conditions": {
                        "type": "string",
                        "description": "List of conditions. In JSON string format.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Perform issue alert in a specific environment.\n"
                    },
                    "filterMatch": {
                        "type": "string",
                        "description": "A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.\n"
                    },
                    "filters": {
                        "type": "string",
                        "description": "A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "Perform actions at most once every `X` minutes for this issue.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The issue alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ID of the team or user that owns the rule.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "actionMatch",
                    "actions",
                    "conditions",
                    "environment",
                    "filterMatch",
                    "filters",
                    "frequency",
                    "id",
                    "name",
                    "organization",
                    "owner",
                    "project"
                ]
            }
        },
        "sentry:index/getSentryKey:getSentryKey": {
            "description": "Retrieve a Project's Client Key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst default = sentry.getSentryKey({\n    name: \"Default\",\n    organization: \"my-organization\",\n    project: \"web-app\",\n});\nconst first = sentry.getSentryKey({\n    first: true,\n    organization: \"my-organization\",\n    project: \"web-app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ndefault = sentry.get_sentry_key(name=\"Default\",\n    organization=\"my-organization\",\n    project=\"web-app\")\nfirst = sentry.get_sentry_key(first=True,\n    organization=\"my-organization\",\n    project=\"web-app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sentry.GetSentryKey.Invoke(new()\n    {\n        Name = \"Default\",\n        Organization = \"my-organization\",\n        Project = \"web-app\",\n    });\n\n    var first = Sentry.GetSentryKey.Invoke(new()\n    {\n        First = true,\n        Organization = \"my-organization\",\n        Project = \"web-app\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.LookupSentryKey(ctx, \u0026sentry.LookupSentryKeyArgs{\n\t\t\tName:         pulumi.StringRef(\"Default\"),\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProject:      \"web-app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.LookupSentryKey(ctx, \u0026sentry.LookupSentryKeyArgs{\n\t\t\tFirst:        pulumi.BoolRef(true),\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProject:      \"web-app\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SentryFunctions.getSentryKey(GetSentryKeyArgs.builder()\n            .name(\"Default\")\n            .organization(\"my-organization\")\n            .project(\"web-app\")\n            .build());\n\n        final var first = SentryFunctions.getSentryKey(GetSentryKeyArgs.builder()\n            .first(true)\n            .organization(\"my-organization\")\n            .project(\"web-app\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sentry:getSentryKey\n      Arguments:\n        name: Default\n        organization: my-organization\n        project: web-app\n  first:\n    fn::invoke:\n      Function: sentry:getSentryKey\n      Arguments:\n        first: true\n        organization: my-organization\n        project: web-app\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryKey.\n",
                "properties": {
                    "first": {
                        "type": "boolean",
                        "description": "Boolean flag indicating that we want the first key of the returned keys.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client key.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryKey.\n",
                "properties": {
                    "dsnCsp": {
                        "type": "string",
                        "description": "Security header endpoint for features like CSP and Expect-CT reports.\n"
                    },
                    "dsnPublic": {
                        "type": "string",
                        "description": "The DSN tells the SDK where to send the events to.\n"
                    },
                    "dsnSecret": {
                        "type": "string",
                        "description": "Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.\n",
                        "secret": true
                    },
                    "first": {
                        "type": "boolean",
                        "description": "Boolean flag indicating that we want the first key of the returned keys.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the client key.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the resource belongs to.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project that the key belongs to.\n"
                    },
                    "public": {
                        "type": "string",
                        "description": "The public key.\n"
                    },
                    "rateLimitCount": {
                        "type": "integer",
                        "description": "Number of events that can be reported within the rate limit window.\n"
                    },
                    "rateLimitWindow": {
                        "type": "integer",
                        "description": "Length of time that will be considered when checking the rate limit.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret key.\n",
                        "secret": true
                    }
                },
                "type": "object",
                "required": [
                    "dsnCsp",
                    "dsnPublic",
                    "dsnSecret",
                    "organization",
                    "project",
                    "projectId",
                    "public",
                    "rateLimitCount",
                    "rateLimitWindow",
                    "secret"
                ]
            }
        },
        "sentry:index/getSentryMetricAlert:getSentryMetricAlert": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  # Create a copy of a Metric Alert\n  copy:\n    type: sentry:SentryMetricAlert\n    properties:\n      organization: ${original.organization}\n      project: ${original.project}\n      dataset: ${original.dataset}\n      query: ${original.query}\n      aggregate: ${original.aggregate}\n      timeWindow: ${original.timeWindow}\n      thresholdType: ${original.thresholdType}\n      resolveThreshold: ${original.resolveThreshold}\n      dynamic:\n        - forEach: ${original.triggers}\n          content:\n            - dynamic:\n                - forEach: ${trigger.value.action}\n                  content:\n                    - type: ${action.value.type}\n                      targetType: ${action.value.target_type}\n                      targetIdentifier: ${action.value.target_identifier}\n                      inputChannelId: ${action.value.input_channel_id}\n                      integrationId: ${action.value.integration_id}\n              alertThreshold: ${trigger.value.alert_threshold}\n              label: ${trigger.value.label}\n              resolveThreshold: ${trigger.value.resolve_threshold}\n              thresholdType: ${trigger.value.threshold_type}\nvariables:\n  original:\n    fn::invoke:\n      Function: sentry:getSentryMetricAlert\n      Arguments:\n        organization: my-organization\n        project: my-project\n        internalId: '42'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryMetricAlert.\n",
                "properties": {
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this metric alert.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the metric alert belongs to.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the metric alert belongs to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "organization",
                    "project"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryMetricAlert.\n",
                "properties": {
                    "aggregate": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The events type of dataset.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this metric alert.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The metric alert name.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the metric alert belongs to.\n"
                    },
                    "owner": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string",
                        "description": "The slug of the project the metric alert belongs to.\n"
                    },
                    "query": {
                        "type": "string"
                    },
                    "resolveThreshold": {
                        "type": "number"
                    },
                    "thresholdType": {
                        "type": "integer"
                    },
                    "timeWindow": {
                        "type": "number"
                    },
                    "triggers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/sentry:index/getSentryMetricAlertTrigger:getSentryMetricAlertTrigger"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "aggregate",
                    "dataset",
                    "environment",
                    "eventTypes",
                    "internalId",
                    "name",
                    "organization",
                    "owner",
                    "project",
                    "query",
                    "resolveThreshold",
                    "thresholdType",
                    "timeWindow",
                    "triggers",
                    "id"
                ]
            }
        },
        "sentry:index/getSentryOrganization:getSentryOrganization": {
            "description": "Sentry Organization data source.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst org = sentry.getSentryOrganization({\n    slug: \"my-organization\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\norg = sentry.get_sentry_organization(slug=\"my-organization\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var org = Sentry.GetSentryOrganization.Invoke(new()\n    {\n        Slug = \"my-organization\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.LookupSentryOrganization(ctx, \u0026sentry.LookupSentryOrganizationArgs{\n\t\t\tSlug: \"my-organization\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var org = SentryFunctions.getSentryOrganization(GetSentryOrganizationArgs.builder()\n            .slug(\"my-organization\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  org:\n    fn::invoke:\n      Function: sentry:getSentryOrganization\n      Arguments:\n        slug: my-organization\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryOrganization.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human readable name for this organization.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "internalId",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "sentry:index/getSentryOrganizationIntegration:getSentryOrganizationIntegration": {
            "description": "Sentry Organization Integration data source. See the [Sentry documentation](https://docs.sentry.io/api/integrations/list-an-organizations-available-integrations/) for more information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst github = sentry.getSentryOrganizationIntegration({\n    name: \"my-github-organization\",\n    organization: \"my-organization\",\n    providerKey: \"github\",\n});\nconst slack = sentry.getSentryOrganizationIntegration({\n    name: \"Slack Workspace\",\n    organization: \"my-organization\",\n    providerKey: \"slack\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ngithub = sentry.get_sentry_organization_integration(name=\"my-github-organization\",\n    organization=\"my-organization\",\n    provider_key=\"github\")\nslack = sentry.get_sentry_organization_integration(name=\"Slack Workspace\",\n    organization=\"my-organization\",\n    provider_key=\"slack\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var github = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Name = \"my-github-organization\",\n        Organization = \"my-organization\",\n        ProviderKey = \"github\",\n    });\n\n    var slack = Sentry.GetSentryOrganizationIntegration.Invoke(new()\n    {\n        Name = \"Slack Workspace\",\n        Organization = \"my-organization\",\n        ProviderKey = \"slack\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tName:         \"my-github-organization\",\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"github\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = sentry.GetSentryOrganizationIntegration(ctx, \u0026sentry.GetSentryOrganizationIntegrationArgs{\n\t\t\tName:         \"Slack Workspace\",\n\t\t\tOrganization: \"my-organization\",\n\t\t\tProviderKey:  \"slack\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationIntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var github = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .name(\"my-github-organization\")\n            .organization(\"my-organization\")\n            .providerKey(\"github\")\n            .build());\n\n        final var slack = SentryFunctions.getSentryOrganizationIntegration(GetSentryOrganizationIntegrationArgs.builder()\n            .name(\"Slack Workspace\")\n            .organization(\"my-organization\")\n            .providerKey(\"slack\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  github:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        name: my-github-organization\n        organization: my-organization\n        providerKey: github\n  slack:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationIntegration\n      Arguments:\n        name: Slack Workspace\n        organization: my-organization\n        providerKey: slack\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryOrganizationIntegration.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the integration.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization.\n"
                    },
                    "providerKey": {
                        "type": "string",
                        "description": "Specific integration provider to filter by such as `slack`. See [the list of supported providers](https://docs.sentry.io/product/integrations/).\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "organization",
                    "providerKey"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryOrganizationIntegration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this organization integration. **Deprecated** Use `id` instead.\n",
                        "deprecationMessage": "This field is deprecated and will be removed in a future version. Use `id` instead."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the integration.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization.\n"
                    },
                    "providerKey": {
                        "type": "string",
                        "description": "Specific integration provider to filter by such as `slack`. See [the list of supported providers](https://docs.sentry.io/product/integrations/).\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "internalId",
                    "name",
                    "organization",
                    "providerKey"
                ]
            }
        },
        "sentry:index/getSentryOrganizationMember:getSentryOrganizationMember": {
            "description": "Retrieve an organization member by email.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst default = sentry.getSentryOrganizationMember({\n    email: \"test@example.com\",\n    organization: \"terraform-provider-sentry\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ndefault = sentry.get_sentry_organization_member(email=\"test@example.com\",\n    organization=\"terraform-provider-sentry\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sentry.GetSentryOrganizationMember.Invoke(new()\n    {\n        Email = \"test@example.com\",\n        Organization = \"terraform-provider-sentry\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.LookupSentryOrganizationMember(ctx, \u0026sentry.LookupSentryOrganizationMemberArgs{\n\t\t\tEmail:        \"test@example.com\",\n\t\t\tOrganization: \"terraform-provider-sentry\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryOrganizationMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SentryFunctions.getSentryOrganizationMember(GetSentryOrganizationMemberArgs.builder()\n            .email(\"test@example.com\")\n            .organization(\"terraform-provider-sentry\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sentry:getSentryOrganizationMember\n      Arguments:\n        email: test@example.com\n        organization: terraform-provider-sentry\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryOrganizationMember.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the organization member.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "organization"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryOrganizationMember.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email of the organization member.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "This is the role of the organization member.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id",
                    "organization",
                    "role"
                ]
            }
        },
        "sentry:index/getSentryProject:getSentryProject": {
            "description": "Return a list of projects available to the authenticated session.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst default = sentry.getSentryProject({\n    organization: \"my-organization\",\n    slug: \"my-project\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ndefault = sentry.get_sentry_project(organization=\"my-organization\",\n    slug=\"my-project\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sentry.GetSentryProject.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        Slug = \"my-project\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.LookupSentryProject(ctx, \u0026sentry.LookupSentryProjectArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tSlug:         \"my-project\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SentryFunctions.getSentryProject(GetSentryProjectArgs.builder()\n            .organization(\"my-organization\")\n            .slug(\"my-project\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sentry:getSentryProject\n      Arguments:\n        organization: my-organization\n        slug: my-project\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryProject.\n",
                "properties": {
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryProject.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of this project.\n"
                    },
                    "dateCreated": {
                        "type": "string",
                        "description": "The date this project was created.\n"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The features of this project.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The slug of this project.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID of this project.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether this project is public.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of this project.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the resource belongs to.\n"
                    },
                    "platform": {
                        "type": "string",
                        "description": "The platform of this project.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of this project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "dateCreated",
                    "features",
                    "id",
                    "internalId",
                    "isPublic",
                    "name",
                    "organization",
                    "platform",
                    "slug"
                ]
            }
        },
        "sentry:index/getSentryTeam:getSentryTeam": {
            "description": "Sentry Team data source.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as sentry from \"@pulumi/sentry\";\n\nconst default = sentry.getSentryTeam({\n    organization: \"my-organization\",\n    slug: \"my-team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_sentry as sentry\n\ndefault = sentry.get_sentry_team(organization=\"my-organization\",\n    slug=\"my-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Sentry = Pulumi.Sentry;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Sentry.GetSentryTeam.Invoke(new()\n    {\n        Organization = \"my-organization\",\n        Slug = \"my-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := sentry.LookupSentryTeam(ctx, \u0026sentry.LookupSentryTeamArgs{\n\t\t\tOrganization: \"my-organization\",\n\t\t\tSlug:         \"my-team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.sentry.SentryFunctions;\nimport com.pulumi.sentry.inputs.GetSentryTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = SentryFunctions.getSentryTeam(GetSentryTeamArgs.builder()\n            .organization(\"my-organization\")\n            .slug(\"my-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: sentry:getSentryTeam\n      Arguments:\n        organization: my-organization\n        slug: my-team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSentryTeam.\n",
                "properties": {
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the team should be created for.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "organization",
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSentryTeam.\n",
                "properties": {
                    "hasAccess": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "internalId": {
                        "type": "string",
                        "description": "The internal ID for this team.\n"
                    },
                    "isMember": {
                        "type": "boolean"
                    },
                    "isPending": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human readable name for this organization.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The slug of the organization the team should be created for.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The unique URL slug for this team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hasAccess",
                    "internalId",
                    "isMember",
                    "isPending",
                    "name",
                    "organization",
                    "slug",
                    "id"
                ]
            }
        }
    }
}
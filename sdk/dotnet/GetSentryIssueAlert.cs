// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    public static class GetSentryIssueAlert
    {
        /// <summary>
        /// Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.
        /// </summary>
        public static Task<GetSentryIssueAlertResult> InvokeAsync(GetSentryIssueAlertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSentryIssueAlertResult>("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args ?? new GetSentryIssueAlertArgs(), options.WithDefaults());

        /// <summary>
        /// Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.
        /// </summary>
        public static Output<GetSentryIssueAlertResult> Invoke(GetSentryIssueAlertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSentryIssueAlertResult>("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args ?? new GetSentryIssueAlertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSentryIssueAlertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetSentryIssueAlertArgs()
        {
        }
        public static new GetSentryIssueAlertArgs Empty => new GetSentryIssueAlertArgs();
    }

    public sealed class GetSentryIssueAlertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetSentryIssueAlertInvokeArgs()
        {
        }
        public static new GetSentryIssueAlertInvokeArgs Empty => new GetSentryIssueAlertInvokeArgs();
    }


    [OutputType]
    public sealed class GetSentryIssueAlertResult
    {
        /// <summary>
        /// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        /// </summary>
        public readonly string ActionMatch;
        /// <summary>
        /// List of actions. In JSON string format.
        /// </summary>
        public readonly string Actions;
        /// <summary>
        /// List of conditions. In JSON string format.
        /// </summary>
        public readonly string Conditions;
        /// <summary>
        /// Perform issue alert in a specific environment.
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
        /// </summary>
        public readonly string FilterMatch;
        /// <summary>
        /// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
        /// </summary>
        public readonly string Filters;
        /// <summary>
        /// Perform actions at most once every `X` minutes for this issue.
        /// </summary>
        public readonly int Frequency;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The issue alert name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The ID of the team or user that owns the rule.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        public readonly string Project;

        [OutputConstructor]
        private GetSentryIssueAlertResult(
            string actionMatch,

            string actions,

            string conditions,

            string environment,

            string filterMatch,

            string filters,

            int frequency,

            string id,

            string name,

            string organization,

            string owner,

            string project)
        {
            ActionMatch = actionMatch;
            Actions = actions;
            Conditions = conditions;
            Environment = environment;
            FilterMatch = filterMatch;
            Filters = filters;
            Frequency = frequency;
            Id = id;
            Name = name;
            Organization = organization;
            Owner = owner;
            Project = project;
        }
    }
}

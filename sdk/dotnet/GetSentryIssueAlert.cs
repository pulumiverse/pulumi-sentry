// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    public static class GetSentryIssueAlert
    {
        /// <summary>
        /// Sentry Issue Alert data source. As the object structure of `conditions`, `filters`, and `actions` are undocumented, a tip is to set up an Issue Alert via the Web UI, and use this data source to copy its object structure to your resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sentry = Pulumi.Sentry;
        /// using Sentry = Pulumiverse.Sentry;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Retrieve an Issue Alert
        ///     // URL format: https://sentry.io/organizations/[organization]/alerts/rules/[project]/[internal_id]/details/
        ///     var original = Sentry.GetSentryIssueAlert.Invoke(new()
        ///     {
        ///         Organization = "my-organization",
        ///         Project = "my-project",
        ///         InternalId = "42",
        ///     });
        /// 
        ///     // Create a copy of an Issue Alert
        ///     var copy = new Sentry.SentryIssueAlert("copy", new()
        ///     {
        ///         Organization = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Organization),
        ///         Project = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Project),
        ///         Name = $"{original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Name)}-copy",
        ///         ActionMatch = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.ActionMatch),
        ///         FilterMatch = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.FilterMatch),
        ///         Frequency = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Frequency),
        ///         Conditions = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Conditions),
        ///         Filters = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Filters),
        ///         Actions = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Actions),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSentryIssueAlertResult> InvokeAsync(GetSentryIssueAlertArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSentryIssueAlertResult>("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args ?? new GetSentryIssueAlertArgs(), options.WithDefaults());

        /// <summary>
        /// Sentry Issue Alert data source. As the object structure of `conditions`, `filters`, and `actions` are undocumented, a tip is to set up an Issue Alert via the Web UI, and use this data source to copy its object structure to your resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sentry = Pulumi.Sentry;
        /// using Sentry = Pulumiverse.Sentry;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Retrieve an Issue Alert
        ///     // URL format: https://sentry.io/organizations/[organization]/alerts/rules/[project]/[internal_id]/details/
        ///     var original = Sentry.GetSentryIssueAlert.Invoke(new()
        ///     {
        ///         Organization = "my-organization",
        ///         Project = "my-project",
        ///         InternalId = "42",
        ///     });
        /// 
        ///     // Create a copy of an Issue Alert
        ///     var copy = new Sentry.SentryIssueAlert("copy", new()
        ///     {
        ///         Organization = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Organization),
        ///         Project = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Project),
        ///         Name = $"{original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Name)}-copy",
        ///         ActionMatch = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.ActionMatch),
        ///         FilterMatch = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.FilterMatch),
        ///         Frequency = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Frequency),
        ///         Conditions = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Conditions),
        ///         Filters = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Filters),
        ///         Actions = original.Apply(getSentryIssueAlertResult =&gt; getSentryIssueAlertResult.Actions),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSentryIssueAlertResult> Invoke(GetSentryIssueAlertInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSentryIssueAlertResult>("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args ?? new GetSentryIssueAlertInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSentryIssueAlertArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal ID for this issue alert.
        /// </summary>
        [Input("internalId", required: true)]
        public string InternalId { get; set; } = null!;

        /// <summary>
        /// The slug of the organization the issue alert belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        /// <summary>
        /// The slug of the project the issue alert belongs to.
        /// </summary>
        [Input("project", required: true)]
        public string Project { get; set; } = null!;

        public GetSentryIssueAlertArgs()
        {
        }
        public static new GetSentryIssueAlertArgs Empty => new GetSentryIssueAlertArgs();
    }

    public sealed class GetSentryIssueAlertInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The internal ID for this issue alert.
        /// </summary>
        [Input("internalId", required: true)]
        public Input<string> InternalId { get; set; } = null!;

        /// <summary>
        /// The slug of the organization the issue alert belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The slug of the project the issue alert belongs to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public GetSentryIssueAlertInvokeArgs()
        {
        }
        public static new GetSentryIssueAlertInvokeArgs Empty => new GetSentryIssueAlertInvokeArgs();
    }


    [OutputType]
    public sealed class GetSentryIssueAlertResult
    {
        /// <summary>
        /// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        /// </summary>
        public readonly string ActionMatch;
        /// <summary>
        /// List of actions.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Actions;
        /// <summary>
        /// List of conditions.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Conditions;
        /// <summary>
        /// Perform issue alert in a specific environment.
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// Trigger actions if `all`, `any`, or `none` of the specified filters match.
        /// </summary>
        public readonly string FilterMatch;
        /// <summary>
        /// List of filters.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Filters;
        /// <summary>
        /// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
        /// </summary>
        public readonly int Frequency;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The internal ID for this issue alert.
        /// </summary>
        public readonly string InternalId;
        /// <summary>
        /// The issue alert name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The slug of the organization the issue alert belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The slug of the project the issue alert belongs to.
        /// </summary>
        public readonly string Project;

        [OutputConstructor]
        private GetSentryIssueAlertResult(
            string actionMatch,

            ImmutableArray<ImmutableDictionary<string, string>> actions,

            ImmutableArray<ImmutableDictionary<string, string>> conditions,

            string environment,

            string filterMatch,

            ImmutableArray<ImmutableDictionary<string, string>> filters,

            int frequency,

            string id,

            string internalId,

            string name,

            string organization,

            string project)
        {
            ActionMatch = actionMatch;
            Actions = actions;
            Conditions = conditions;
            Environment = environment;
            FilterMatch = filterMatch;
            Filters = filters;
            Frequency = frequency;
            Id = id;
            InternalId = internalId;
            Name = name;
            Organization = organization;
            Project = project;
        }
    }
}

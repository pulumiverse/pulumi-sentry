// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    /// <summary>
    /// Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sentry = Pulumiverse.Sentry;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var defaultSentryProject = new Sentry.SentryProject("defaultSentryProject", new()
    ///     {
    ///         Organization = "my-organization",
    ///         Teams = new[]
    ///         {
    ///             "my-first-team",
    ///             "my-second-team",
    ///         },
    ///         Platform = "javascript",
    ///     });
    /// 
    ///     // Create a notification action for the project
    ///     var defaultSentryNotificationAction = new Sentry.SentryNotificationAction("defaultSentryNotificationAction", new()
    ///     {
    ///         Organization = defaultSentryProject.Organization,
    ///         TriggerType = "spike-protection",
    ///         ServiceType = "sentry_notification",
    ///         TargetIdentifier = "default",
    ///         TargetDisplay = "default",
    ///         Projects = new[]
    ///         {
    ///             defaultSentryProject.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id
    /// ```
    /// </summary>
    [SentryResourceType("sentry:index/sentryNotificationAction:SentryNotificationAction")]
    public partial class SentryNotificationAction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        /// </summary>
        [Output("integrationId")]
        public Output<string?> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The list of project slugs that the Notification Action is created for.
        /// </summary>
        [Output("projects")]
        public Output<ImmutableArray<string>> Projects { get; private set; } = null!;

        /// <summary>
        /// The service that is used for sending the notification.
        /// </summary>
        [Output("serviceType")]
        public Output<string> ServiceType { get; private set; } = null!;

        /// <summary>
        /// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Output("targetDisplay")]
        public Output<string?> TargetDisplay { get; private set; } = null!;

        /// <summary>
        /// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Output("targetIdentifier")]
        public Output<string?> TargetIdentifier { get; private set; } = null!;

        /// <summary>
        /// The type of trigger that will activate this action. Valid values are `spike-protection`.
        /// </summary>
        [Output("triggerType")]
        public Output<string> TriggerType { get; private set; } = null!;


        /// <summary>
        /// Create a SentryNotificationAction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SentryNotificationAction(string name, SentryNotificationActionArgs args, CustomResourceOptions? options = null)
            : base("sentry:index/sentryNotificationAction:SentryNotificationAction", name, args ?? new SentryNotificationActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SentryNotificationAction(string name, Input<string> id, SentryNotificationActionState? state = null, CustomResourceOptions? options = null)
            : base("sentry:index/sentryNotificationAction:SentryNotificationAction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SentryNotificationAction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SentryNotificationAction Get(string name, Input<string> id, SentryNotificationActionState? state = null, CustomResourceOptions? options = null)
        {
            return new SentryNotificationAction(name, id, state, options);
        }
    }

    public sealed class SentryNotificationActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        [Input("projects", required: true)]
        private InputList<string>? _projects;

        /// <summary>
        /// The list of project slugs that the Notification Action is created for.
        /// </summary>
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        /// <summary>
        /// The service that is used for sending the notification.
        /// </summary>
        [Input("serviceType", required: true)]
        public Input<string> ServiceType { get; set; } = null!;

        /// <summary>
        /// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Input("targetDisplay")]
        public Input<string>? TargetDisplay { get; set; }

        /// <summary>
        /// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Input("targetIdentifier")]
        public Input<string>? TargetIdentifier { get; set; }

        /// <summary>
        /// The type of trigger that will activate this action. Valid values are `spike-protection`.
        /// </summary>
        [Input("triggerType", required: true)]
        public Input<string> TriggerType { get; set; } = null!;

        public SentryNotificationActionArgs()
        {
        }
        public static new SentryNotificationActionArgs Empty => new SentryNotificationActionArgs();
    }

    public sealed class SentryNotificationActionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the integration that is used for sending the notification. Use the `sentry.getSentryOrganizationIntegration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("projects")]
        private InputList<string>? _projects;

        /// <summary>
        /// The list of project slugs that the Notification Action is created for.
        /// </summary>
        public InputList<string> Projects
        {
            get => _projects ?? (_projects = new InputList<string>());
            set => _projects = value;
        }

        /// <summary>
        /// The service that is used for sending the notification.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Input("targetDisplay")]
        public Input<string>? TargetDisplay { get; set; }

        /// <summary>
        /// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        /// </summary>
        [Input("targetIdentifier")]
        public Input<string>? TargetIdentifier { get; set; }

        /// <summary>
        /// The type of trigger that will activate this action. Valid values are `spike-protection`.
        /// </summary>
        [Input("triggerType")]
        public Input<string>? TriggerType { get; set; }

        public SentryNotificationActionState()
        {
        }
        public static new SentryNotificationActionState Empty => new SentryNotificationActionState();
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    /// <summary>
    /// Sentry Project Symbol Source. See the [Sentry documentation](https://docs.sentry.io/api/projects/add-a-symbol-source-to-a-project/) for more information.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sentry = Pulumiverse.Sentry;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Sentry.SentryProject("default", new()
    ///     {
    ///         Organization = "my-organization",
    ///         Teams = new[]
    ///         {
    ///             "my-first-team",
    ///             "my-second-team",
    ///         },
    ///         Platform = "javascript",
    ///     });
    /// 
    ///     // Add an App Store Connect source to the project
    ///     var httpSentryProjectSymbolSource = new Sentry.SentryProjectSymbolSource("httpSentryProjectSymbolSource", new()
    ///     {
    ///         Organization = @default.Organization,
    ///         Project = @default.Id,
    ///         Type = "appStoreConnect",
    ///         Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs
    ///         {
    ///             Type = "native",
    ///             Casing = "default",
    ///         },
    ///         AppConnectIssuer = "app_connect_issuer",
    ///         AppConnectPrivateKey = @"-----BEGIN PRIVATE KEY-----
    /// [PRIVATE-KEY]
    /// -----END PRIVATE KEY-----
    /// ",
    ///         AppId = "app_id",
    ///     });
    /// 
    ///     // Add a SymbolServer (HTTP) symbol source to the project
    ///     var httpIndex_sentryProjectSymbolSourceSentryProjectSymbolSource = new Sentry.SentryProjectSymbolSource("httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource", new()
    ///     {
    ///         Organization = @default.Organization,
    ///         Project = @default.Id,
    ///         Type = "http",
    ///         Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs
    ///         {
    ///             Type = "native",
    ///             Casing = "default",
    ///         },
    ///         Url = "https://example.com",
    ///     });
    /// 
    ///     // Add a Google Cloud Storage symbol source to the project
    ///     var gcs = new Sentry.SentryProjectSymbolSource("gcs", new()
    ///     {
    ///         Organization = @default.Organization,
    ///         Project = @default.Id,
    ///         Type = "s3",
    ///         Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs
    ///         {
    ///             Type = "native",
    ///             Casing = "default",
    ///         },
    ///         Bucket = "gcs-bucket-name",
    ///         ClientEmail = "user@project.iam.gserviceaccount.com",
    ///         PrivateKey = @"-----BEGIN PRIVATE KEY-----
    /// [PRIVATE-KEY]
    /// -----END PRIVATE KEY-----
    /// ",
    ///     });
    /// 
    ///     // Add an Amazon S3 symbol source to the project
    ///     var s3 = new Sentry.SentryProjectSymbolSource("s3", new()
    ///     {
    ///         Organization = @default.Organization,
    ///         Project = @default.Id,
    ///         Type = "s3",
    ///         Layout = new Sentry.Inputs.SentryProjectSymbolSourceLayoutArgs
    ///         {
    ///             Type = "native",
    ///             Casing = "default",
    ///         },
    ///         Bucket = "s3-bucket-name",
    ///         Region = "us-east-1",
    ///         AccessKey = "access_key",
    ///         SecretKey = "secret_key",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource default org-slug/project-slug/symbol-source-id
    /// ```
    /// </summary>
    [SentryResourceType("sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource")]
    public partial class SentryProjectSymbolSource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The AWS Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        [Output("accessKey")]
        public Output<string?> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Output("appConnectIssuer")]
        public Output<string?> AppConnectIssuer { get; private set; } = null!;

        /// <summary>
        /// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Output("appConnectPrivateKey")]
        public Output<string?> AppConnectPrivateKey { get; private set; } = null!;

        /// <summary>
        /// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Output("appId")]
        public Output<string?> AppId { get; private set; } = null!;

        /// <summary>
        /// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Output("bucket")]
        public Output<string?> Bucket { get; private set; } = null!;

        /// <summary>
        /// The GCS email address for authentication. Required for GCS sources, invalid for all others.
        /// </summary>
        [Output("clientEmail")]
        public Output<string?> ClientEmail { get; private set; } = null!;

        /// <summary>
        /// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        /// </summary>
        [Output("layout")]
        public Output<Outputs.SentryProjectSymbolSourceLayout?> Layout { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the source.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The password for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Output("prefix")]
        public Output<string?> Prefix { get; private set; } = null!;

        /// <summary>
        /// The GCS private key. Required for GCS sources, invalid for all others.
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The slug of the project to create the filter for.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The source's S3 region. Required for S3 sources, invalid for all others.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        [Output("secretKey")]
        public Output<string?> SecretKey { get; private set; } = null!;

        /// <summary>
        /// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The source's URL. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a SentryProjectSymbolSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SentryProjectSymbolSource(string name, SentryProjectSymbolSourceArgs args, CustomResourceOptions? options = null)
            : base("sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource", name, args ?? new SentryProjectSymbolSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SentryProjectSymbolSource(string name, Input<string> id, SentryProjectSymbolSourceState? state = null, CustomResourceOptions? options = null)
            : base("sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "appConnectPrivateKey",
                    "password",
                    "privateKey",
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SentryProjectSymbolSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SentryProjectSymbolSource Get(string name, Input<string> id, SentryProjectSymbolSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new SentryProjectSymbolSource(name, id, state, options);
        }
    }

    public sealed class SentryProjectSymbolSourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Input("appConnectIssuer")]
        public Input<string>? AppConnectIssuer { get; set; }

        [Input("appConnectPrivateKey")]
        private Input<string>? _appConnectPrivateKey;

        /// <summary>
        /// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        public Input<string>? AppConnectPrivateKey
        {
            get => _appConnectPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appConnectPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The GCS email address for authentication. Required for GCS sources, invalid for all others.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        /// <summary>
        /// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.SentryProjectSymbolSourceLayoutArgs>? Layout { get; set; }

        /// <summary>
        /// The human-readable name of the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The GCS private key. Required for GCS sources, invalid for all others.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The slug of the project to create the filter for.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The source's S3 region. Required for S3 sources, invalid for all others.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The source's URL. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SentryProjectSymbolSourceArgs()
        {
        }
        public static new SentryProjectSymbolSourceArgs Empty => new SentryProjectSymbolSourceArgs();
    }

    public sealed class SentryProjectSymbolSourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Input("appConnectIssuer")]
        public Input<string>? AppConnectIssuer { get; set; }

        [Input("appConnectPrivateKey")]
        private Input<string>? _appConnectPrivateKey;

        /// <summary>
        /// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        public Input<string>? AppConnectPrivateKey
        {
            get => _appConnectPrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _appConnectPrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The GCS email address for authentication. Required for GCS sources, invalid for all others.
        /// </summary>
        [Input("clientEmail")]
        public Input<string>? ClientEmail { get; set; }

        /// <summary>
        /// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        /// </summary>
        [Input("layout")]
        public Input<Inputs.SentryProjectSymbolSourceLayoutGetArgs>? Layout { get; set; }

        /// <summary>
        /// The human-readable name of the source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the project belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The GCS private key. Required for GCS sources, invalid for all others.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The slug of the project to create the filter for.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The source's S3 region. Required for S3 sources, invalid for all others.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The source's URL. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public SentryProjectSymbolSourceState()
        {
        }
        public static new SentryProjectSymbolSourceState Empty => new SentryProjectSymbolSourceState();
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    /// <summary>
    /// Sentry Organization Code Mapping resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sentry = Pulumi.Sentry;
    /// using Sentry = Pulumiverse.Sentry;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github = Sentry.GetSentryOrganizationIntegration.Invoke(new()
    ///     {
    ///         Organization = "my-organization",
    ///         ProviderKey = "github",
    ///         Name = "my-github-organization",
    ///     });
    /// 
    ///     var thisSentryProject = new Sentry.SentryProject("thisSentryProject", new()
    ///     {
    ///         Organization = "my-organization",
    ///         Team = "my-team",
    ///         Slug = "web-app",
    ///         Platform = "javascript",
    ///         ResolveAge = 720,
    ///     });
    /// 
    ///     var thisSentryOrganizationRepositoryGithub = new Sentry.SentryOrganizationRepositoryGithub("thisSentryOrganizationRepositoryGithub", new()
    ///     {
    ///         Organization = "my-organization",
    ///         IntegrationId = github.Apply(getSentryOrganizationIntegrationResult =&gt; getSentryOrganizationIntegrationResult.InternalId),
    ///         Identifier = "my-github-organization/my-github-repo",
    ///     });
    /// 
    ///     var thisSentryOrganizationCodeMapping = new Sentry.SentryOrganizationCodeMapping("thisSentryOrganizationCodeMapping", new()
    ///     {
    ///         Organization = "my-organization",
    ///         IntegrationId = github.Apply(getSentryOrganizationIntegrationResult =&gt; getSentryOrganizationIntegrationResult.InternalId),
    ///         RepositoryId = thisSentryOrganizationRepositoryGithub.InternalId,
    ///         ProjectId = thisSentryProject.InternalId,
    ///         DefaultBranch = "main",
    ///         StackRoot = "/",
    ///         SourceRoot = "src/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import using the organization slug from the URL:
    /// 
    /// https://sentry.io/settings/[org-slug]/integrations/github/[org-integration-id]/
    /// 
    /// and inspect network tab for request to https://sentry.io/api/0/organizations/[org-slug]/code-mappings/
    /// 
    /// find the corresponding list element and reference [code-mapping-id] from the key "id"
    /// 
    /// ```sh
    /// $ pulumi import sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping this org-slug/31347
    /// ```
    /// </summary>
    [SentryResourceType("sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping")]
    public partial class SentryOrganizationCodeMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Default branch of your code we fall back to if you do not have commit tracking set up.
        /// </summary>
        [Output("defaultBranch")]
        public Output<string> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// Sentry Organization Integration ID.
        /// </summary>
        [Output("integrationId")]
        public Output<string> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// The internal ID for this resource.
        /// </summary>
        [Output("internalId")]
        public Output<string> InternalId { get; private set; } = null!;

        /// <summary>
        /// The slug of the organization the code mapping is under.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// Sentry Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Sentry Organization Repository ID.
        /// </summary>
        [Output("repositoryId")]
        public Output<string> RepositoryId { get; private set; } = null!;

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Output("sourceRoot")]
        public Output<string?> SourceRoot { get; private set; } = null!;

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Output("stackRoot")]
        public Output<string?> StackRoot { get; private set; } = null!;


        /// <summary>
        /// Create a SentryOrganizationCodeMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SentryOrganizationCodeMapping(string name, SentryOrganizationCodeMappingArgs args, CustomResourceOptions? options = null)
            : base("sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping", name, args ?? new SentryOrganizationCodeMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SentryOrganizationCodeMapping(string name, Input<string> id, SentryOrganizationCodeMappingState? state = null, CustomResourceOptions? options = null)
            : base("sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SentryOrganizationCodeMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SentryOrganizationCodeMapping Get(string name, Input<string> id, SentryOrganizationCodeMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new SentryOrganizationCodeMapping(name, id, state, options);
        }
    }

    public sealed class SentryOrganizationCodeMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default branch of your code we fall back to if you do not have commit tracking set up.
        /// </summary>
        [Input("defaultBranch", required: true)]
        public Input<string> DefaultBranch { get; set; } = null!;

        /// <summary>
        /// Sentry Organization Integration ID.
        /// </summary>
        [Input("integrationId", required: true)]
        public Input<string> IntegrationId { get; set; } = null!;

        /// <summary>
        /// The slug of the organization the code mapping is under.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// Sentry Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Sentry Organization Repository ID.
        /// </summary>
        [Input("repositoryId", required: true)]
        public Input<string> RepositoryId { get; set; } = null!;

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Input("sourceRoot")]
        public Input<string>? SourceRoot { get; set; }

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Input("stackRoot")]
        public Input<string>? StackRoot { get; set; }

        public SentryOrganizationCodeMappingArgs()
        {
        }
        public static new SentryOrganizationCodeMappingArgs Empty => new SentryOrganizationCodeMappingArgs();
    }

    public sealed class SentryOrganizationCodeMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default branch of your code we fall back to if you do not have commit tracking set up.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// Sentry Organization Integration ID.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// The internal ID for this resource.
        /// </summary>
        [Input("internalId")]
        public Input<string>? InternalId { get; set; }

        /// <summary>
        /// The slug of the organization the code mapping is under.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// Sentry Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Sentry Organization Repository ID.
        /// </summary>
        [Input("repositoryId")]
        public Input<string>? RepositoryId { get; set; }

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Input("sourceRoot")]
        public Input<string>? SourceRoot { get; set; }

        /// <summary>
        /// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
        /// </summary>
        [Input("stackRoot")]
        public Input<string>? StackRoot { get; set; }

        public SentryOrganizationCodeMappingState()
        {
        }
        public static new SentryOrganizationCodeMappingState Empty => new SentryOrganizationCodeMappingState();
    }
}

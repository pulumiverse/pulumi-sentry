// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    public static class GetSentryAllProjects
    {
        /// <summary>
        /// Return a list of projects available to the authenticated session.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sentry = Pulumi.Sentry;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Sentry.GetSentryAllProjects.Invoke(new()
        ///     {
        ///         Organization = "my-organization",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSentryAllProjectsResult> InvokeAsync(GetSentryAllProjectsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSentryAllProjectsResult>("sentry:index/getSentryAllProjects:getSentryAllProjects", args ?? new GetSentryAllProjectsArgs(), options.WithDefaults());

        /// <summary>
        /// Return a list of projects available to the authenticated session.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sentry = Pulumi.Sentry;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Sentry.GetSentryAllProjects.Invoke(new()
        ///     {
        ///         Organization = "my-organization",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSentryAllProjectsResult> Invoke(GetSentryAllProjectsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSentryAllProjectsResult>("sentry:index/getSentryAllProjects:getSentryAllProjects", args ?? new GetSentryAllProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSentryAllProjectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        public GetSentryAllProjectsArgs()
        {
        }
        public static new GetSentryAllProjectsArgs Empty => new GetSentryAllProjectsArgs();
    }

    public sealed class GetSentryAllProjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        public GetSentryAllProjectsInvokeArgs()
        {
        }
        public static new GetSentryAllProjectsInvokeArgs Empty => new GetSentryAllProjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSentryAllProjectsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The slugs of the projects.
        /// </summary>
        public readonly ImmutableArray<string> ProjectSlugs;
        /// <summary>
        /// The list of projects.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSentryAllProjectsProjectResult> Projects;

        [OutputConstructor]
        private GetSentryAllProjectsResult(
            string id,

            string organization,

            ImmutableArray<string> projectSlugs,

            ImmutableArray<Outputs.GetSentryAllProjectsProjectResult> projects)
        {
            Id = id;
            Organization = organization;
            ProjectSlugs = projectSlugs;
            Projects = projects;
        }
    }
}

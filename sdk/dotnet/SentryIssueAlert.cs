// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Sentry
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// import using the organization, project slugs and rule id from the URL:
    /// 
    /// https://sentry.io/organizations/[org-slug]/alerts/rules/[project-slug]/[rule-id]/details/
    /// 
    /// ```sh
    /// $ pulumi import sentry:index/sentryIssueAlert:SentryIssueAlert default org-slug/project-slug/rule-id
    /// ```
    /// </summary>
    [SentryResourceType("sentry:index/sentryIssueAlert:SentryIssueAlert")]
    public partial class SentryIssueAlert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        /// </summary>
        [Output("actionMatch")]
        public Output<string> ActionMatch { get; private set; } = null!;

        /// <summary>
        /// List of actions. In JSON string format.
        /// </summary>
        [Output("actions")]
        public Output<string> Actions { get; private set; } = null!;

        /// <summary>
        /// List of conditions. In JSON string format.
        /// </summary>
        [Output("conditions")]
        public Output<string> Conditions { get; private set; } = null!;

        /// <summary>
        /// Perform issue alert in a specific environment.
        /// </summary>
        [Output("environment")]
        public Output<string?> Environment { get; private set; } = null!;

        /// <summary>
        /// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
        /// </summary>
        [Output("filterMatch")]
        public Output<string?> FilterMatch { get; private set; } = null!;

        /// <summary>
        /// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
        /// </summary>
        [Output("filters")]
        public Output<string?> Filters { get; private set; } = null!;

        /// <summary>
        /// Perform actions at most once every `X` minutes for this issue.
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        /// <summary>
        /// The issue alert name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The ID of the team or user that owns the rule.
        /// </summary>
        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;


        /// <summary>
        /// Create a SentryIssueAlert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SentryIssueAlert(string name, SentryIssueAlertArgs args, CustomResourceOptions? options = null)
            : base("sentry:index/sentryIssueAlert:SentryIssueAlert", name, args ?? new SentryIssueAlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SentryIssueAlert(string name, Input<string> id, SentryIssueAlertState? state = null, CustomResourceOptions? options = null)
            : base("sentry:index/sentryIssueAlert:SentryIssueAlert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SentryIssueAlert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SentryIssueAlert Get(string name, Input<string> id, SentryIssueAlertState? state = null, CustomResourceOptions? options = null)
        {
            return new SentryIssueAlert(name, id, state, options);
        }
    }

    public sealed class SentryIssueAlertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        /// </summary>
        [Input("actionMatch", required: true)]
        public Input<string> ActionMatch { get; set; } = null!;

        /// <summary>
        /// List of actions. In JSON string format.
        /// </summary>
        [Input("actions", required: true)]
        public Input<string> Actions { get; set; } = null!;

        /// <summary>
        /// List of conditions. In JSON string format.
        /// </summary>
        [Input("conditions", required: true)]
        public Input<string> Conditions { get; set; } = null!;

        /// <summary>
        /// Perform issue alert in a specific environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
        /// </summary>
        [Input("filterMatch")]
        public Input<string>? FilterMatch { get; set; }

        /// <summary>
        /// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
        /// </summary>
        [Input("filters")]
        public Input<string>? Filters { get; set; }

        /// <summary>
        /// Perform actions at most once every `X` minutes for this issue.
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        /// <summary>
        /// The issue alert name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The ID of the team or user that owns the rule.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        public SentryIssueAlertArgs()
        {
        }
        public static new SentryIssueAlertArgs Empty => new SentryIssueAlertArgs();
    }

    public sealed class SentryIssueAlertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        /// </summary>
        [Input("actionMatch")]
        public Input<string>? ActionMatch { get; set; }

        /// <summary>
        /// List of actions. In JSON string format.
        /// </summary>
        [Input("actions")]
        public Input<string>? Actions { get; set; }

        /// <summary>
        /// List of conditions. In JSON string format.
        /// </summary>
        [Input("conditions")]
        public Input<string>? Conditions { get; set; }

        /// <summary>
        /// Perform issue alert in a specific environment.
        /// </summary>
        [Input("environment")]
        public Input<string>? Environment { get; set; }

        /// <summary>
        /// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
        /// </summary>
        [Input("filterMatch")]
        public Input<string>? FilterMatch { get; set; }

        /// <summary>
        /// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
        /// </summary>
        [Input("filters")]
        public Input<string>? Filters { get; set; }

        /// <summary>
        /// Perform actions at most once every `X` minutes for this issue.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        /// <summary>
        /// The issue alert name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the organization the resource belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The ID of the team or user that owns the rule.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The slug of the project the resource belongs to.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        public SentryIssueAlertState()
        {
        }
        public static new SentryIssueAlertState Empty => new SentryIssueAlertState();
    }
}

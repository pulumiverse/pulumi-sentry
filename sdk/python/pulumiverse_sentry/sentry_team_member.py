# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SentryTeamMemberArgs', 'SentryTeamMember']

@pulumi.input_type
class SentryTeamMemberArgs:
    def __init__(__self__, *,
                 member_id: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 team: pulumi.Input[str],
                 role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SentryTeamMember resource.
        :param pulumi.Input[str] member_id: The ID of the member to add to the team.
        :param pulumi.Input[str] organization: The slug of the organization the team should be created for.
        :param pulumi.Input[str] team: The slug of the team to add the member to.
        :param pulumi.Input[str] role: The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        """
        pulumi.set(__self__, "member_id", member_id)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team", team)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Input[str]:
        """
        The ID of the member to add to the team.
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the organization the team should be created for.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[str]:
        """
        The slug of the team to add the member to.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[str]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class _SentryTeamMemberState:
    def __init__(__self__, *,
                 effective_role: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SentryTeamMember resources.
        :param pulumi.Input[str] effective_role: The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.
        :param pulumi.Input[str] member_id: The ID of the member to add to the team.
        :param pulumi.Input[str] organization: The slug of the organization the team should be created for.
        :param pulumi.Input[str] role: The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        :param pulumi.Input[str] team: The slug of the team to add the member to.
        """
        if effective_role is not None:
            pulumi.set(__self__, "effective_role", effective_role)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if team is not None:
            pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter(name="effectiveRole")
    def effective_role(self) -> Optional[pulumi.Input[str]]:
        """
        The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.
        """
        return pulumi.get(self, "effective_role")

    @effective_role.setter
    def effective_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effective_role", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the member to add to the team.
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the organization the team should be created for.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the team to add the member to.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team", value)


class SentryTeamMember(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Sentry Team Member resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        # Add a member to a team
        default_sentry_organization_member = sentry.SentryOrganizationMember("defaultSentryOrganizationMember",
            organization="my-organization",
            email="test@example.com",
            role="member")
        default_sentry_team = sentry.SentryTeam("defaultSentryTeam",
            organization="my-organization",
            slug="my-team")
        default_sentry_team_member = sentry.SentryTeamMember("defaultSentryTeamMember",
            organization="my-organization",
            team=default_sentry_team.id,
            member_id=default_sentry_organization_member.internal_id)
        ```

        ## Import

        import using the member ID and team slug from the URL:

        https://[org-slug].sentry.io/settings/teams/[team-slug]/members/

        https://[org-slug].sentry.io/settings/members/[member-id]/

        ```sh
        $ pulumi import sentry:index/sentryTeamMember:SentryTeamMember default org-slug/team-slug/member-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] member_id: The ID of the member to add to the team.
        :param pulumi.Input[str] organization: The slug of the organization the team should be created for.
        :param pulumi.Input[str] role: The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        :param pulumi.Input[str] team: The slug of the team to add the member to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryTeamMemberArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Sentry Team Member resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        # Add a member to a team
        default_sentry_organization_member = sentry.SentryOrganizationMember("defaultSentryOrganizationMember",
            organization="my-organization",
            email="test@example.com",
            role="member")
        default_sentry_team = sentry.SentryTeam("defaultSentryTeam",
            organization="my-organization",
            slug="my-team")
        default_sentry_team_member = sentry.SentryTeamMember("defaultSentryTeamMember",
            organization="my-organization",
            team=default_sentry_team.id,
            member_id=default_sentry_organization_member.internal_id)
        ```

        ## Import

        import using the member ID and team slug from the URL:

        https://[org-slug].sentry.io/settings/teams/[team-slug]/members/

        https://[org-slug].sentry.io/settings/members/[member-id]/

        ```sh
        $ pulumi import sentry:index/sentryTeamMember:SentryTeamMember default org-slug/team-slug/member-id
        ```

        :param str resource_name: The name of the resource.
        :param SentryTeamMemberArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryTeamMemberArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryTeamMemberArgs.__new__(SentryTeamMemberArgs)

            if member_id is None and not opts.urn:
                raise TypeError("Missing required property 'member_id'")
            __props__.__dict__["member_id"] = member_id
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["role"] = role
            if team is None and not opts.urn:
                raise TypeError("Missing required property 'team'")
            __props__.__dict__["team"] = team
            __props__.__dict__["effective_role"] = None
        super(SentryTeamMember, __self__).__init__(
            'sentry:index/sentryTeamMember:SentryTeamMember',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            effective_role: Optional[pulumi.Input[str]] = None,
            member_id: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            team: Optional[pulumi.Input[str]] = None) -> 'SentryTeamMember':
        """
        Get an existing SentryTeamMember resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] effective_role: The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.
        :param pulumi.Input[str] member_id: The ID of the member to add to the team.
        :param pulumi.Input[str] organization: The slug of the organization the team should be created for.
        :param pulumi.Input[str] role: The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        :param pulumi.Input[str] team: The slug of the team to add the member to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryTeamMemberState.__new__(_SentryTeamMemberState)

        __props__.__dict__["effective_role"] = effective_role
        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["organization"] = organization
        __props__.__dict__["role"] = role
        __props__.__dict__["team"] = team
        return SentryTeamMember(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="effectiveRole")
    def effective_role(self) -> pulumi.Output[str]:
        """
        The effective role of the member in the team. This represents the highest role, determined by comparing the lower role assigned by the member's organizational role with the role assigned by the member's team role.
        """
        return pulumi.get(self, "effective_role")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[str]:
        """
        The ID of the member to add to the team.
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the organization the team should be created for.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        The role of the member in the team. When not set, resolve to the minimum team role given by this member's organization role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def team(self) -> pulumi.Output[str]:
        """
        The slug of the team to add the member to.
        """
        return pulumi.get(self, "team")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSentryAllKeysResult',
    'AwaitableGetSentryAllKeysResult',
    'get_sentry_all_keys',
    'get_sentry_all_keys_output',
]

@pulumi.output_type
class GetSentryAllKeysResult:
    """
    A collection of values returned by getSentryAllKeys.
    """
    def __init__(__self__, filter_status=None, id=None, keys=None, organization=None, project=None):
        if filter_status and not isinstance(filter_status, str):
            raise TypeError("Expected argument 'filter_status' to be a str")
        pulumi.set(__self__, "filter_status", filter_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="filterStatus")
    def filter_status(self) -> Optional[str]:
        """
        Filter client keys by `active` or `inactive`. Defaults to returning all keys if not specified.
        """
        return pulumi.get(self, "filter_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keys(self) -> Sequence['outputs.GetSentryAllKeysKeyResult']:
        """
        The list of client keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The slug of the project the resource belongs to.
        """
        return pulumi.get(self, "project")


class AwaitableGetSentryAllKeysResult(GetSentryAllKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSentryAllKeysResult(
            filter_status=self.filter_status,
            id=self.id,
            keys=self.keys,
            organization=self.organization,
            project=self.project)


def get_sentry_all_keys(filter_status: Optional[str] = None,
                        organization: Optional[str] = None,
                        project: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSentryAllKeysResult:
    """
    List a Project's Client Keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    all = sentry.get_sentry_all_keys(organization="my-organization",
        project="web-app")
    ```


    :param str filter_status: Filter client keys by `active` or `inactive`. Defaults to returning all keys if not specified.
    :param str organization: The slug of the organization the resource belongs to.
    :param str project: The slug of the project the resource belongs to.
    """
    __args__ = dict()
    __args__['filterStatus'] = filter_status
    __args__['organization'] = organization
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sentry:index/getSentryAllKeys:getSentryAllKeys', __args__, opts=opts, typ=GetSentryAllKeysResult).value

    return AwaitableGetSentryAllKeysResult(
        filter_status=pulumi.get(__ret__, 'filter_status'),
        id=pulumi.get(__ret__, 'id'),
        keys=pulumi.get(__ret__, 'keys'),
        organization=pulumi.get(__ret__, 'organization'),
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_sentry_all_keys)
def get_sentry_all_keys_output(filter_status: Optional[pulumi.Input[Optional[str]]] = None,
                               organization: Optional[pulumi.Input[str]] = None,
                               project: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSentryAllKeysResult]:
    """
    List a Project's Client Keys.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    all = sentry.get_sentry_all_keys(organization="my-organization",
        project="web-app")
    ```


    :param str filter_status: Filter client keys by `active` or `inactive`. Defaults to returning all keys if not specified.
    :param str organization: The slug of the organization the resource belongs to.
    :param str project: The slug of the project the resource belongs to.
    """
    ...

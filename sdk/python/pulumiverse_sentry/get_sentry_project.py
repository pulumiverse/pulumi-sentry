# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSentryProjectResult',
    'AwaitableGetSentryProjectResult',
    'get_sentry_project',
    'get_sentry_project_output',
]

@pulumi.output_type
class GetSentryProjectResult:
    """
    A collection of values returned by getSentryProject.
    """
    def __init__(__self__, color=None, date_created=None, features=None, id=None, internal_id=None, is_public=None, name=None, organization=None, platform=None, slug=None):
        if color and not isinstance(color, str):
            raise TypeError("Expected argument 'color' to be a str")
        pulumi.set(__self__, "color", color)
        if date_created and not isinstance(date_created, str):
            raise TypeError("Expected argument 'date_created' to be a str")
        pulumi.set(__self__, "date_created", date_created)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_id and not isinstance(internal_id, str):
            raise TypeError("Expected argument 'internal_id' to be a str")
        pulumi.set(__self__, "internal_id", internal_id)
        if is_public and not isinstance(is_public, bool):
            raise TypeError("Expected argument 'is_public' to be a bool")
        pulumi.set(__self__, "is_public", is_public)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        The color of this project.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="dateCreated")
    def date_created(self) -> str:
        """
        The date this project was created.
        """
        return pulumi.get(self, "date_created")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        The features of this project.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The slug of this project.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> str:
        """
        The internal ID of this project.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        """
        Whether this project is public.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this project.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        The platform of this project.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of this project.
        """
        return pulumi.get(self, "slug")


class AwaitableGetSentryProjectResult(GetSentryProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSentryProjectResult(
            color=self.color,
            date_created=self.date_created,
            features=self.features,
            id=self.id,
            internal_id=self.internal_id,
            is_public=self.is_public,
            name=self.name,
            organization=self.organization,
            platform=self.platform,
            slug=self.slug)


def get_sentry_project(organization: Optional[str] = None,
                       slug: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSentryProjectResult:
    """
    Return a list of projects available to the authenticated session.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    default = sentry.get_sentry_project(organization="my-organization",
        slug="my-project")
    ```


    :param str organization: The slug of the organization the resource belongs to.
    :param str slug: The slug of this project.
    """
    __args__ = dict()
    __args__['organization'] = organization
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sentry:index/getSentryProject:getSentryProject', __args__, opts=opts, typ=GetSentryProjectResult).value

    return AwaitableGetSentryProjectResult(
        color=pulumi.get(__ret__, 'color'),
        date_created=pulumi.get(__ret__, 'date_created'),
        features=pulumi.get(__ret__, 'features'),
        id=pulumi.get(__ret__, 'id'),
        internal_id=pulumi.get(__ret__, 'internal_id'),
        is_public=pulumi.get(__ret__, 'is_public'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        platform=pulumi.get(__ret__, 'platform'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_sentry_project)
def get_sentry_project_output(organization: Optional[pulumi.Input[str]] = None,
                              slug: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSentryProjectResult]:
    """
    Return a list of projects available to the authenticated session.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    default = sentry.get_sentry_project(organization="my-organization",
        slug="my-project")
    ```


    :param str organization: The slug of the organization the resource belongs to.
    :param str slug: The slug of this project.
    """
    ...

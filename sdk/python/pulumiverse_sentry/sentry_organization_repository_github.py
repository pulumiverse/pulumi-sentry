# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SentryOrganizationRepositoryGithubArgs', 'SentryOrganizationRepositoryGithub']

@pulumi.input_type
class SentryOrganizationRepositoryGithubArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 integration_id: pulumi.Input[str],
                 organization: pulumi.Input[str]):
        """
        The set of arguments for constructing a SentryOrganizationRepositoryGithub resource.
        :param pulumi.Input[str] identifier: The repo identifier. For Github it is {github*org}/{github*repo}.
        :param pulumi.Input[str] integration_id: The organization integration ID for Github.
        :param pulumi.Input[str] organization: The slug of the Sentry organization this resource belongs to.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        The repo identifier. For Github it is {github*org}/{github*repo}.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Input[str]:
        """
        The organization integration ID for Github.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the Sentry organization this resource belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)


@pulumi.input_type
class _SentryOrganizationRepositoryGithubState:
    def __init__(__self__, *,
                 identifier: Optional[pulumi.Input[str]] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 internal_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SentryOrganizationRepositoryGithub resources.
        :param pulumi.Input[str] identifier: The repo identifier. For Github it is {github*org}/{github*repo}.
        :param pulumi.Input[str] integration_id: The organization integration ID for Github.
        :param pulumi.Input[str] internal_id: The internal ID for this organization repository.
        :param pulumi.Input[str] organization: The slug of the Sentry organization this resource belongs to.
        """
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if internal_id is not None:
            pulumi.set(__self__, "internal_id", internal_id)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The repo identifier. For Github it is {github*org}/{github*repo}.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        The organization integration ID for Github.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> Optional[pulumi.Input[str]]:
        """
        The internal ID for this organization repository.
        """
        return pulumi.get(self, "internal_id")

    @internal_id.setter
    def internal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_id", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the Sentry organization this resource belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)


class SentryOrganizationRepositoryGithub(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Sentry Github Organization Repository resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sentry as sentry
        import pulumiverse_sentry as sentry

        github = sentry.get_sentry_organization_integration(organization="my-organization",
            provider_key="github",
            name="my-github-organization")
        this = sentry.SentryOrganizationRepositoryGithub("this",
            organization="my-organization",
            integration_id=github.internal_id,
            identifier="my-github-organization/my-github-repo")
        ```

        ## Import

        import using the organization slug from the URL:

        https://sentry.io/organizations/[org-slug]/

        [github-org] and [github-repo] are the slugs to your repo

        ```sh
        $ pulumi import sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub this org-slug/github-org/github-repo
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] identifier: The repo identifier. For Github it is {github*org}/{github*repo}.
        :param pulumi.Input[str] integration_id: The organization integration ID for Github.
        :param pulumi.Input[str] organization: The slug of the Sentry organization this resource belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryOrganizationRepositoryGithubArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Sentry Github Organization Repository resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sentry as sentry
        import pulumiverse_sentry as sentry

        github = sentry.get_sentry_organization_integration(organization="my-organization",
            provider_key="github",
            name="my-github-organization")
        this = sentry.SentryOrganizationRepositoryGithub("this",
            organization="my-organization",
            integration_id=github.internal_id,
            identifier="my-github-organization/my-github-repo")
        ```

        ## Import

        import using the organization slug from the URL:

        https://sentry.io/organizations/[org-slug]/

        [github-org] and [github-repo] are the slugs to your repo

        ```sh
        $ pulumi import sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub this org-slug/github-org/github-repo
        ```

        :param str resource_name: The name of the resource.
        :param SentryOrganizationRepositoryGithubArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryOrganizationRepositoryGithubArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryOrganizationRepositoryGithubArgs.__new__(SentryOrganizationRepositoryGithubArgs)

            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            if integration_id is None and not opts.urn:
                raise TypeError("Missing required property 'integration_id'")
            __props__.__dict__["integration_id"] = integration_id
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["internal_id"] = None
        super(SentryOrganizationRepositoryGithub, __self__).__init__(
            'sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            integration_id: Optional[pulumi.Input[str]] = None,
            internal_id: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None) -> 'SentryOrganizationRepositoryGithub':
        """
        Get an existing SentryOrganizationRepositoryGithub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] identifier: The repo identifier. For Github it is {github*org}/{github*repo}.
        :param pulumi.Input[str] integration_id: The organization integration ID for Github.
        :param pulumi.Input[str] internal_id: The internal ID for this organization repository.
        :param pulumi.Input[str] organization: The slug of the Sentry organization this resource belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryOrganizationRepositoryGithubState.__new__(_SentryOrganizationRepositoryGithubState)

        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["integration_id"] = integration_id
        __props__.__dict__["internal_id"] = internal_id
        __props__.__dict__["organization"] = organization
        return SentryOrganizationRepositoryGithub(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        The repo identifier. For Github it is {github*org}/{github*repo}.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Output[str]:
        """
        The organization integration ID for Github.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> pulumi.Output[str]:
        """
        The internal ID for this organization repository.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the Sentry organization this resource belongs to.
        """
        return pulumi.get(self, "organization")


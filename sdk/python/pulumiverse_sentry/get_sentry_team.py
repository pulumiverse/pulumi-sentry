# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSentryTeamResult',
    'AwaitableGetSentryTeamResult',
    'get_sentry_team',
    'get_sentry_team_output',
]

@pulumi.output_type
class GetSentryTeamResult:
    """
    A collection of values returned by getSentryTeam.
    """
    def __init__(__self__, has_access=None, id=None, internal_id=None, is_member=None, is_pending=None, name=None, organization=None, slug=None):
        if has_access and not isinstance(has_access, bool):
            raise TypeError("Expected argument 'has_access' to be a bool")
        pulumi.set(__self__, "has_access", has_access)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if internal_id and not isinstance(internal_id, str):
            raise TypeError("Expected argument 'internal_id' to be a str")
        pulumi.set(__self__, "internal_id", internal_id)
        if is_member and not isinstance(is_member, bool):
            raise TypeError("Expected argument 'is_member' to be a bool")
        pulumi.set(__self__, "is_member", is_member)
        if is_pending and not isinstance(is_pending, bool):
            raise TypeError("Expected argument 'is_pending' to be a bool")
        pulumi.set(__self__, "is_pending", is_pending)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="hasAccess")
    def has_access(self) -> bool:
        return pulumi.get(self, "has_access")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalId")
    def internal_id(self) -> str:
        """
        The internal ID for this team.
        """
        return pulumi.get(self, "internal_id")

    @property
    @pulumi.getter(name="isMember")
    def is_member(self) -> bool:
        return pulumi.get(self, "is_member")

    @property
    @pulumi.getter(name="isPending")
    def is_pending(self) -> bool:
        return pulumi.get(self, "is_pending")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The human readable name for this organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The slug of the organization the team should be created for.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The unique URL slug for this team.
        """
        return pulumi.get(self, "slug")


class AwaitableGetSentryTeamResult(GetSentryTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSentryTeamResult(
            has_access=self.has_access,
            id=self.id,
            internal_id=self.internal_id,
            is_member=self.is_member,
            is_pending=self.is_pending,
            name=self.name,
            organization=self.organization,
            slug=self.slug)


def get_sentry_team(organization: Optional[str] = None,
                    slug: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSentryTeamResult:
    """
    Sentry Team data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    # Retrieve a team
    default = sentry.get_sentry_team(organization="my-organization",
        slug="my-team")
    ```


    :param str organization: The slug of the organization the team should be created for.
    :param str slug: The unique URL slug for this team.
    """
    __args__ = dict()
    __args__['organization'] = organization
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sentry:index/getSentryTeam:getSentryTeam', __args__, opts=opts, typ=GetSentryTeamResult).value

    return AwaitableGetSentryTeamResult(
        has_access=pulumi.get(__ret__, 'has_access'),
        id=pulumi.get(__ret__, 'id'),
        internal_id=pulumi.get(__ret__, 'internal_id'),
        is_member=pulumi.get(__ret__, 'is_member'),
        is_pending=pulumi.get(__ret__, 'is_pending'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        slug=pulumi.get(__ret__, 'slug'))
def get_sentry_team_output(organization: Optional[pulumi.Input[str]] = None,
                           slug: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSentryTeamResult]:
    """
    Sentry Team data source.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sentry as sentry

    # Retrieve a team
    default = sentry.get_sentry_team(organization="my-organization",
        slug="my-team")
    ```


    :param str organization: The slug of the organization the team should be created for.
    :param str slug: The unique URL slug for this team.
    """
    __args__ = dict()
    __args__['organization'] = organization
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sentry:index/getSentryTeam:getSentryTeam', __args__, opts=opts, typ=GetSentryTeamResult)
    return __ret__.apply(lambda __response__: GetSentryTeamResult(
        has_access=pulumi.get(__response__, 'has_access'),
        id=pulumi.get(__response__, 'id'),
        internal_id=pulumi.get(__response__, 'internal_id'),
        is_member=pulumi.get(__response__, 'is_member'),
        is_pending=pulumi.get(__response__, 'is_pending'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        slug=pulumi.get(__response__, 'slug')))

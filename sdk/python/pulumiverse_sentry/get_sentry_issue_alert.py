# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSentryIssueAlertResult',
    'AwaitableGetSentryIssueAlertResult',
    'get_sentry_issue_alert',
    'get_sentry_issue_alert_output',
]

@pulumi.output_type
class GetSentryIssueAlertResult:
    """
    A collection of values returned by getSentryIssueAlert.
    """
    def __init__(__self__, action_match=None, actions=None, conditions=None, environment=None, filter_match=None, filters=None, frequency=None, id=None, name=None, organization=None, owner=None, project=None):
        if action_match and not isinstance(action_match, str):
            raise TypeError("Expected argument 'action_match' to be a str")
        pulumi.set(__self__, "action_match", action_match)
        if actions and not isinstance(actions, str):
            raise TypeError("Expected argument 'actions' to be a str")
        pulumi.set(__self__, "actions", actions)
        if conditions and not isinstance(conditions, str):
            raise TypeError("Expected argument 'conditions' to be a str")
        pulumi.set(__self__, "conditions", conditions)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if filter_match and not isinstance(filter_match, str):
            raise TypeError("Expected argument 'filter_match' to be a str")
        pulumi.set(__self__, "filter_match", filter_match)
        if filters and not isinstance(filters, str):
            raise TypeError("Expected argument 'filters' to be a str")
        pulumi.set(__self__, "filters", filters)
        if frequency and not isinstance(frequency, int):
            raise TypeError("Expected argument 'frequency' to be a int")
        pulumi.set(__self__, "frequency", frequency)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="actionMatch")
    def action_match(self) -> str:
        """
        Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
        """
        return pulumi.get(self, "action_match")

    @property
    @pulumi.getter
    def actions(self) -> str:
        """
        List of actions. In JSON string format.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def conditions(self) -> str:
        """
        List of conditions. In JSON string format.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def environment(self) -> str:
        """
        Perform issue alert in a specific environment.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="filterMatch")
    def filter_match(self) -> str:
        """
        A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
        """
        return pulumi.get(self, "filter_match")

    @property
    @pulumi.getter
    def filters(self) -> str:
        """
        A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        """
        Perform actions at most once every `X` minutes for this issue.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The issue alert name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The ID of the team or user that owns the rule.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The slug of the project the resource belongs to.
        """
        return pulumi.get(self, "project")


class AwaitableGetSentryIssueAlertResult(GetSentryIssueAlertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSentryIssueAlertResult(
            action_match=self.action_match,
            actions=self.actions,
            conditions=self.conditions,
            environment=self.environment,
            filter_match=self.filter_match,
            filters=self.filters,
            frequency=self.frequency,
            id=self.id,
            name=self.name,
            organization=self.organization,
            owner=self.owner,
            project=self.project)


def get_sentry_issue_alert(id: Optional[str] = None,
                           organization: Optional[str] = None,
                           project: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSentryIssueAlertResult:
    """
    Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.


    :param str id: The ID of this resource.
    :param str organization: The slug of the organization the resource belongs to.
    :param str project: The slug of the project the resource belongs to.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['organization'] = organization
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sentry:index/getSentryIssueAlert:getSentryIssueAlert', __args__, opts=opts, typ=GetSentryIssueAlertResult).value

    return AwaitableGetSentryIssueAlertResult(
        action_match=pulumi.get(__ret__, 'action_match'),
        actions=pulumi.get(__ret__, 'actions'),
        conditions=pulumi.get(__ret__, 'conditions'),
        environment=pulumi.get(__ret__, 'environment'),
        filter_match=pulumi.get(__ret__, 'filter_match'),
        filters=pulumi.get(__ret__, 'filters'),
        frequency=pulumi.get(__ret__, 'frequency'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        owner=pulumi.get(__ret__, 'owner'),
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_sentry_issue_alert)
def get_sentry_issue_alert_output(id: Optional[pulumi.Input[str]] = None,
                                  organization: Optional[pulumi.Input[str]] = None,
                                  project: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSentryIssueAlertResult]:
    """
    Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.


    :param str id: The ID of this resource.
    :param str organization: The slug of the organization the resource belongs to.
    :param str project: The slug of the project the resource belongs to.
    """
    ...

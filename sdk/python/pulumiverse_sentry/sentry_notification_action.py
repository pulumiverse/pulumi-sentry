# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SentryNotificationActionArgs', 'SentryNotificationAction']

@pulumi.input_type
class SentryNotificationActionArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[str],
                 projects: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service_type: pulumi.Input[str],
                 trigger_type: pulumi.Input[str],
                 integration_id: Optional[pulumi.Input[str]] = None,
                 target_display: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SentryNotificationAction resource.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projects: The list of project slugs that the Notification Action is created for.
        :param pulumi.Input[str] service_type: The service that is used for sending the notification.
        :param pulumi.Input[str] trigger_type: The type of trigger that will activate this action. Valid values are `spike-protection`.
        :param pulumi.Input[str] integration_id: The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        :param pulumi.Input[str] target_display: The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] target_identifier: The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "trigger_type", trigger_type)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if target_display is not None:
            pulumi.set(__self__, "target_display", target_display)
        if target_identifier is not None:
            pulumi.set(__self__, "target_identifier", target_identifier)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The list of project slugs that the Notification Action is created for.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Input[str]:
        """
        The service that is used for sending the notification.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Input[str]:
        """
        The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_display")

    @target_display.setter
    def target_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_display", value)

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_identifier")

    @target_identifier.setter
    def target_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_identifier", value)


@pulumi.input_type
class _SentryNotificationActionState:
    def __init__(__self__, *,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 target_display: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SentryNotificationAction resources.
        :param pulumi.Input[str] integration_id: The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projects: The list of project slugs that the Notification Action is created for.
        :param pulumi.Input[str] service_type: The service that is used for sending the notification.
        :param pulumi.Input[str] target_display: The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] target_identifier: The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] trigger_type: The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if target_display is not None:
            pulumi.set(__self__, "target_display", target_display)
        if target_identifier is not None:
            pulumi.set(__self__, "target_identifier", target_identifier)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of project slugs that the Notification Action is created for.
        """
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        The service that is used for sending the notification.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_display")

    @target_display.setter
    def target_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_display", value)

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_identifier")

    @target_identifier.setter
    def target_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_identifier", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)


class SentryNotificationAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 target_display: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default_sentry_project = sentry.SentryProject("defaultSentryProject",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Create a notification action for the project
        default_sentry_notification_action = sentry.SentryNotificationAction("defaultSentryNotificationAction",
            organization=default_sentry_project.organization,
            trigger_type="spike-protection",
            service_type="sentry_notification",
            target_identifier="default",
            target_display="default",
            projects=[default_sentry_project.id])
        ```

        ## Import

        ```sh
        $ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_id: The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projects: The list of project slugs that the Notification Action is created for.
        :param pulumi.Input[str] service_type: The service that is used for sending the notification.
        :param pulumi.Input[str] target_display: The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] target_identifier: The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] trigger_type: The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryNotificationActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default_sentry_project = sentry.SentryProject("defaultSentryProject",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Create a notification action for the project
        default_sentry_notification_action = sentry.SentryNotificationAction("defaultSentryNotificationAction",
            organization=default_sentry_project.organization,
            trigger_type="spike-protection",
            service_type="sentry_notification",
            target_identifier="default",
            target_display="default",
            projects=[default_sentry_project.id])
        ```

        ## Import

        ```sh
        $ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id
        ```

        :param str resource_name: The name of the resource.
        :param SentryNotificationActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryNotificationActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 target_display: Optional[pulumi.Input[str]] = None,
                 target_identifier: Optional[pulumi.Input[str]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryNotificationActionArgs.__new__(SentryNotificationActionArgs)

            __props__.__dict__["integration_id"] = integration_id
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            if projects is None and not opts.urn:
                raise TypeError("Missing required property 'projects'")
            __props__.__dict__["projects"] = projects
            if service_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_type'")
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["target_display"] = target_display
            __props__.__dict__["target_identifier"] = target_identifier
            if trigger_type is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_type'")
            __props__.__dict__["trigger_type"] = trigger_type
        super(SentryNotificationAction, __self__).__init__(
            'sentry:index/sentryNotificationAction:SentryNotificationAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            integration_id: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            target_display: Optional[pulumi.Input[str]] = None,
            target_identifier: Optional[pulumi.Input[str]] = None,
            trigger_type: Optional[pulumi.Input[str]] = None) -> 'SentryNotificationAction':
        """
        Get an existing SentryNotificationAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_id: The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] projects: The list of project slugs that the Notification Action is created for.
        :param pulumi.Input[str] service_type: The service that is used for sending the notification.
        :param pulumi.Input[str] target_display: The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] target_identifier: The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        :param pulumi.Input[str] trigger_type: The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryNotificationActionState.__new__(_SentryNotificationActionState)

        __props__.__dict__["integration_id"] = integration_id
        __props__.__dict__["organization"] = organization
        __props__.__dict__["projects"] = projects
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["target_display"] = target_display
        __props__.__dict__["target_identifier"] = target_identifier
        __props__.__dict__["trigger_type"] = trigger_type
        return SentryNotificationAction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the integration that is used for sending the notification. Use the `get_sentry_organization_integration` data source to retrieve an integration. Required if `service_type` is `slack`, `pagerduty` or `opsgenie`.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of project slugs that the Notification Action is created for.
        """
        return pulumi.get(self, "projects")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[str]:
        """
        The service that is used for sending the notification.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> pulumi.Output[Optional[str]]:
        """
        The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_display")

    @property
    @pulumi.getter(name="targetIdentifier")
    def target_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `service_type` is `slack` or `opsgenie`.
        """
        return pulumi.get(self, "target_identifier")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[str]:
        """
        The type of trigger that will activate this action. Valid values are `spike-protection`.
        """
        return pulumi.get(self, "trigger_type")


# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SentryProjectSymbolSourceArgs', 'SentryProjectSymbolSource']

@pulumi.input_type
class SentryProjectSymbolSourceArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[str],
                 project: pulumi.Input[str],
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 app_connect_issuer: Optional[pulumi.Input[str]] = None,
                 app_connect_private_key: Optional[pulumi.Input[str]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SentryProjectSymbolSource resource.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[str] type: The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        :param pulumi.Input[str] access_key: The AWS Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] app_connect_issuer: The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_connect_private_key: The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_id: The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] bucket: The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] client_email: The GCS email address for authentication. Required for GCS sources, invalid for all others.
        :param pulumi.Input['SentryProjectSymbolSourceLayoutArgs'] layout: Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        :param pulumi.Input[str] name: The human-readable name of the source.
        :param pulumi.Input[str] password: The password for accessing the source. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] prefix: The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] private_key: The GCS private key. Required for GCS sources, invalid for all others.
        :param pulumi.Input[str] region: The source's S3 region. Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] secret_key: The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] url: The source's URL. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] username: The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_connect_issuer is not None:
            pulumi.set(__self__, "app_connect_issuer", app_connect_issuer)
        if app_connect_private_key is not None:
            pulumi.set(__self__, "app_connect_private_key", app_connect_private_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="appConnectIssuer")
    def app_connect_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_issuer")

    @app_connect_issuer.setter
    def app_connect_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_connect_issuer", value)

    @property
    @pulumi.getter(name="appConnectPrivateKey")
    def app_connect_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_private_key")

    @app_connect_private_key.setter
    def app_connect_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_connect_private_key", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS email address for authentication. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']]:
        """
        Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable name of the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS private key. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The source's S3 region. Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The source's URL. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _SentryProjectSymbolSourceState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 app_connect_issuer: Optional[pulumi.Input[str]] = None,
                 app_connect_private_key: Optional[pulumi.Input[str]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SentryProjectSymbolSource resources.
        :param pulumi.Input[str] access_key: The AWS Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] app_connect_issuer: The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_connect_private_key: The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_id: The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] bucket: The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] client_email: The GCS email address for authentication. Required for GCS sources, invalid for all others.
        :param pulumi.Input['SentryProjectSymbolSourceLayoutArgs'] layout: Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        :param pulumi.Input[str] name: The human-readable name of the source.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] password: The password for accessing the source. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] prefix: The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] private_key: The GCS private key. Required for GCS sources, invalid for all others.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[str] region: The source's S3 region. Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] secret_key: The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] type: The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        :param pulumi.Input[str] url: The source's URL. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] username: The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if app_connect_issuer is not None:
            pulumi.set(__self__, "app_connect_issuer", app_connect_issuer)
        if app_connect_private_key is not None:
            pulumi.set(__self__, "app_connect_private_key", app_connect_private_key)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if layout is not None:
            pulumi.set(__self__, "layout", layout)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="appConnectIssuer")
    def app_connect_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_issuer")

    @app_connect_issuer.setter
    def app_connect_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_connect_issuer", value)

    @property
    @pulumi.getter(name="appConnectPrivateKey")
    def app_connect_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_private_key")

    @app_connect_private_key.setter
    def app_connect_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_connect_private_key", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS email address for authentication. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']]:
        """
        Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        """
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['SentryProjectSymbolSourceLayoutArgs']]):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The human-readable name of the source.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The GCS private key. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The source's S3 region. Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The source's URL. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class SentryProjectSymbolSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 app_connect_issuer: Optional[pulumi.Input[str]] = None,
                 app_connect_private_key: Optional[pulumi.Input[str]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[pulumi.InputType['SentryProjectSymbolSourceLayoutArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Sentry Project Symbol Source. See the [Sentry documentation](https://docs.sentry.io/api/projects/add-a-symbol-source-to-a-project/) for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default = sentry.SentryProject("default",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Add an App Store Connect source to the project
        http_sentry_project_symbol_source = sentry.SentryProjectSymbolSource("httpSentryProjectSymbolSource",
            organization=default.organization,
            project=default.id,
            type="appStoreConnect",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            app_connect_issuer="app_connect_issuer",
            app_connect_private_key=\"\"\"-----BEGIN PRIVATE KEY-----
        [PRIVATE-KEY]
        -----END PRIVATE KEY-----
        \"\"\",
            app_id="app_id")
        # Add a SymbolServer (HTTP) symbol source to the project
        http_index_sentry_project_symbol_source_sentry_project_symbol_source = sentry.SentryProjectSymbolSource("httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource",
            organization=default.organization,
            project=default.id,
            type="http",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            url="https://example.com")
        # Add a Google Cloud Storage symbol source to the project
        gcs = sentry.SentryProjectSymbolSource("gcs",
            organization=default.organization,
            project=default.id,
            type="s3",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            bucket="gcs-bucket-name",
            client_email="user@project.iam.gserviceaccount.com",
            private_key=\"\"\"-----BEGIN PRIVATE KEY-----
        [PRIVATE-KEY]
        -----END PRIVATE KEY-----
        \"\"\")
        # Add an Amazon S3 symbol source to the project
        s3 = sentry.SentryProjectSymbolSource("s3",
            organization=default.organization,
            project=default.id,
            type="s3",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            bucket="s3-bucket-name",
            region="us-east-1",
            access_key="access_key",
            secret_key="secret_key")
        ```

        ## Import

        ```sh
        $ pulumi import sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource default org-slug/project-slug/symbol-source-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: The AWS Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] app_connect_issuer: The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_connect_private_key: The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_id: The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] bucket: The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] client_email: The GCS email address for authentication. Required for GCS sources, invalid for all others.
        :param pulumi.Input[pulumi.InputType['SentryProjectSymbolSourceLayoutArgs']] layout: Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        :param pulumi.Input[str] name: The human-readable name of the source.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] password: The password for accessing the source. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] prefix: The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] private_key: The GCS private key. Required for GCS sources, invalid for all others.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[str] region: The source's S3 region. Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] secret_key: The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] type: The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        :param pulumi.Input[str] url: The source's URL. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] username: The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryProjectSymbolSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Sentry Project Symbol Source. See the [Sentry documentation](https://docs.sentry.io/api/projects/add-a-symbol-source-to-a-project/) for more information.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default = sentry.SentryProject("default",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Add an App Store Connect source to the project
        http_sentry_project_symbol_source = sentry.SentryProjectSymbolSource("httpSentryProjectSymbolSource",
            organization=default.organization,
            project=default.id,
            type="appStoreConnect",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            app_connect_issuer="app_connect_issuer",
            app_connect_private_key=\"\"\"-----BEGIN PRIVATE KEY-----
        [PRIVATE-KEY]
        -----END PRIVATE KEY-----
        \"\"\",
            app_id="app_id")
        # Add a SymbolServer (HTTP) symbol source to the project
        http_index_sentry_project_symbol_source_sentry_project_symbol_source = sentry.SentryProjectSymbolSource("httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource",
            organization=default.organization,
            project=default.id,
            type="http",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            url="https://example.com")
        # Add a Google Cloud Storage symbol source to the project
        gcs = sentry.SentryProjectSymbolSource("gcs",
            organization=default.organization,
            project=default.id,
            type="s3",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            bucket="gcs-bucket-name",
            client_email="user@project.iam.gserviceaccount.com",
            private_key=\"\"\"-----BEGIN PRIVATE KEY-----
        [PRIVATE-KEY]
        -----END PRIVATE KEY-----
        \"\"\")
        # Add an Amazon S3 symbol source to the project
        s3 = sentry.SentryProjectSymbolSource("s3",
            organization=default.organization,
            project=default.id,
            type="s3",
            layout=sentry.SentryProjectSymbolSourceLayoutArgs(
                type="native",
                casing="default",
            ),
            bucket="s3-bucket-name",
            region="us-east-1",
            access_key="access_key",
            secret_key="secret_key")
        ```

        ## Import

        ```sh
        $ pulumi import sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource default org-slug/project-slug/symbol-source-id
        ```

        :param str resource_name: The name of the resource.
        :param SentryProjectSymbolSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryProjectSymbolSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 app_connect_issuer: Optional[pulumi.Input[str]] = None,
                 app_connect_private_key: Optional[pulumi.Input[str]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 layout: Optional[pulumi.Input[pulumi.InputType['SentryProjectSymbolSourceLayoutArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryProjectSymbolSourceArgs.__new__(SentryProjectSymbolSourceArgs)

            __props__.__dict__["access_key"] = access_key
            __props__.__dict__["app_connect_issuer"] = app_connect_issuer
            __props__.__dict__["app_connect_private_key"] = None if app_connect_private_key is None else pulumi.Output.secret(app_connect_private_key)
            __props__.__dict__["app_id"] = app_id
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["client_email"] = client_email
            __props__.__dict__["layout"] = layout
            __props__.__dict__["name"] = name
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["prefix"] = prefix
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["region"] = region
            __props__.__dict__["secret_key"] = None if secret_key is None else pulumi.Output.secret(secret_key)
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["appConnectPrivateKey", "password", "privateKey", "secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SentryProjectSymbolSource, __self__).__init__(
            'sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            app_connect_issuer: Optional[pulumi.Input[str]] = None,
            app_connect_private_key: Optional[pulumi.Input[str]] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            client_email: Optional[pulumi.Input[str]] = None,
            layout: Optional[pulumi.Input[pulumi.InputType['SentryProjectSymbolSourceLayoutArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            secret_key: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'SentryProjectSymbolSource':
        """
        Get an existing SentryProjectSymbolSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: The AWS Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] app_connect_issuer: The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_connect_private_key: The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] app_id: The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        :param pulumi.Input[str] bucket: The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] client_email: The GCS email address for authentication. Required for GCS sources, invalid for all others.
        :param pulumi.Input[pulumi.InputType['SentryProjectSymbolSourceLayoutArgs']] layout: Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        :param pulumi.Input[str] name: The human-readable name of the source.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] password: The password for accessing the source. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] prefix: The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        :param pulumi.Input[str] private_key: The GCS private key. Required for GCS sources, invalid for all others.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[str] region: The source's S3 region. Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] secret_key: The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        :param pulumi.Input[str] type: The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        :param pulumi.Input[str] url: The source's URL. Optional for HTTP sources, invalid for all others.
        :param pulumi.Input[str] username: The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryProjectSymbolSourceState.__new__(_SentryProjectSymbolSourceState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["app_connect_issuer"] = app_connect_issuer
        __props__.__dict__["app_connect_private_key"] = app_connect_private_key
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["client_email"] = client_email
        __props__.__dict__["layout"] = layout
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["password"] = password
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["project"] = project
        __props__.__dict__["region"] = region
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        return SentryProjectSymbolSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[Optional[str]]:
        """
        The AWS Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="appConnectIssuer")
    def app_connect_issuer(self) -> pulumi.Output[Optional[str]]:
        """
        The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_issuer")

    @property
    @pulumi.getter(name="appConnectPrivateKey")
    def app_connect_private_key(self) -> pulumi.Output[Optional[str]]:
        """
        The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_connect_private_key")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[Optional[str]]:
        """
        The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[Optional[str]]:
        """
        The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Output[Optional[str]]:
        """
        The GCS email address for authentication. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter
    def layout(self) -> pulumi.Output[Optional['outputs.SentryProjectSymbolSourceLayout']]:
        """
        Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
        """
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The human-readable name of the source.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        The GCS private key. Required for GCS sources, invalid for all others.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The source's S3 region. Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[Optional[str]]:
        """
        The AWS Secret Access Key.Required for S3 sources, invalid for all others.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        The source's URL. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        The user name for accessing the source. Optional for HTTP sources, invalid for all others.
        """
        return pulumi.get(self, "username")


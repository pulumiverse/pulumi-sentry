# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SentryProjectInboundDataFilterArgs', 'SentryProjectInboundDataFilter']

@pulumi.input_type
class SentryProjectInboundDataFilterArgs:
    def __init__(__self__, *,
                 filter_id: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 project: pulumi.Input[str],
                 active: Optional[pulumi.Input[bool]] = None,
                 subfilters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SentryProjectInboundDataFilter resource.
        :param pulumi.Input[str] filter_id: The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[bool] active: Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subfilters: Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        pulumi.set(__self__, "filter_id", filter_id)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if subfilters is not None:
            pulumi.set(__self__, "subfilters", subfilters)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        """
        The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        """
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def subfilters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        return pulumi.get(self, "subfilters")

    @subfilters.setter
    def subfilters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subfilters", value)


@pulumi.input_type
class _SentryProjectInboundDataFilterState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 filter_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subfilters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SentryProjectInboundDataFilter resources.
        :param pulumi.Input[bool] active: Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        :param pulumi.Input[str] filter_id: The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subfilters: Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if filter_id is not None:
            pulumi.set(__self__, "filter_id", filter_id)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if subfilters is not None:
            pulumi.set(__self__, "subfilters", subfilters)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> Optional[pulumi.Input[str]]:
        """
        The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        """
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def subfilters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        return pulumi.get(self, "subfilters")

    @subfilters.setter
    def subfilters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subfilters", value)


class SentryProjectInboundDataFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 filter_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subfilters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Sentry Project Inbound Data Filter resource. This resource is used to create and manage inbound data filters for a project. For more information on what filters are available, see the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default = sentry.SentryProject("default",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Create an inbound data filter for a project
        test_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter("testSentryProjectInboundDataFilter",
            organization=default.organization,
            project=default.id,
            filter_id="browser-extensions",
            active=True)
        # Create an inbound data filter with subfilters. Only applicable to the
        # `legacy-browser` filter.
        test_index_sentry_project_inbound_data_filter_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter("testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter",
            organization=default.organization,
            project=default.id,
            filter_id="legacy-browser",
            subfilters=[
                "ie_pre_9",
                "ie9",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        :param pulumi.Input[str] filter_id: The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subfilters: Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryProjectInboundDataFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Sentry Project Inbound Data Filter resource. This resource is used to create and manage inbound data filters for a project. For more information on what filters are available, see the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/).

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_sentry as sentry

        default = sentry.SentryProject("default",
            organization="my-organization",
            teams=[
                "my-first-team",
                "my-second-team",
            ],
            platform="javascript")
        # Create an inbound data filter for a project
        test_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter("testSentryProjectInboundDataFilter",
            organization=default.organization,
            project=default.id,
            filter_id="browser-extensions",
            active=True)
        # Create an inbound data filter with subfilters. Only applicable to the
        # `legacy-browser` filter.
        test_index_sentry_project_inbound_data_filter_sentry_project_inbound_data_filter = sentry.SentryProjectInboundDataFilter("testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter",
            organization=default.organization,
            project=default.id,
            filter_id="legacy-browser",
            subfilters=[
                "ie_pre_9",
                "ie9",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param SentryProjectInboundDataFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryProjectInboundDataFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 filter_id: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 subfilters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryProjectInboundDataFilterArgs.__new__(SentryProjectInboundDataFilterArgs)

            __props__.__dict__["active"] = active
            if filter_id is None and not opts.urn:
                raise TypeError("Missing required property 'filter_id'")
            __props__.__dict__["filter_id"] = filter_id
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["subfilters"] = subfilters
        super(SentryProjectInboundDataFilter, __self__).__init__(
            'sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            filter_id: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            subfilters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SentryProjectInboundDataFilter':
        """
        Get an existing SentryProjectInboundDataFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        :param pulumi.Input[str] filter_id: The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        :param pulumi.Input[str] organization: The slug of the organization the project belongs to.
        :param pulumi.Input[str] project: The slug of the project to create the filter for.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subfilters: Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryProjectInboundDataFilterState.__new__(_SentryProjectInboundDataFilterState)

        __props__.__dict__["active"] = active
        __props__.__dict__["filter_id"] = filter_id
        __props__.__dict__["organization"] = organization
        __props__.__dict__["project"] = project
        __props__.__dict__["subfilters"] = subfilters
        return SentryProjectInboundDataFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Output[str]:
        """
        The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
        """
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the organization the project belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The slug of the project to create the filter for.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def subfilters(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
        """
        return pulumi.get(self, "subfilters")


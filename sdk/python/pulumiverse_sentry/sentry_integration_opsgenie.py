# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SentryIntegrationOpsgenieArgs', 'SentryIntegrationOpsgenie']

@pulumi.input_type
class SentryIntegrationOpsgenieArgs:
    def __init__(__self__, *,
                 integration_id: pulumi.Input[str],
                 integration_key: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 team: pulumi.Input[str]):
        """
        The set of arguments for constructing a SentryIntegrationOpsgenie resource.
        :param pulumi.Input[str] integration_id: The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        :param pulumi.Input[str] integration_key: The integration key of the Opsgenie service.
        :param pulumi.Input[str] organization: The slug of the organization the resource belongs to.
        :param pulumi.Input[str] team: The name of the Opsgenie team. In Sentry, this is called Label.
        """
        pulumi.set(__self__, "integration_id", integration_id)
        pulumi.set(__self__, "integration_key", integration_key)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Input[str]:
        """
        The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Input[str]:
        """
        The integration key of the Opsgenie service.
        """
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_key", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[str]:
        """
        The name of the Opsgenie team. In Sentry, this is called Label.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[str]):
        pulumi.set(self, "team", value)


@pulumi.input_type
class _SentryIntegrationOpsgenieState:
    def __init__(__self__, *,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 integration_key: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SentryIntegrationOpsgenie resources.
        :param pulumi.Input[str] integration_id: The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        :param pulumi.Input[str] integration_key: The integration key of the Opsgenie service.
        :param pulumi.Input[str] organization: The slug of the organization the resource belongs to.
        :param pulumi.Input[str] team: The name of the Opsgenie team. In Sentry, this is called Label.
        """
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if integration_key is not None:
            pulumi.set(__self__, "integration_key", integration_key)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if team is not None:
            pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> Optional[pulumi.Input[str]]:
        """
        The integration key of the Opsgenie service.
        """
        return pulumi.get(self, "integration_key")

    @integration_key.setter
    def integration_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_key", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Opsgenie team. In Sentry, this is called Label.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team", value)


class SentryIntegrationOpsgenie(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 integration_key: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage an Opsgenie team integration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sentry as sentry
        import pulumiverse_sentry as sentry

        opsgenie = sentry.get_sentry_organization_integration(organization="my-organization",
            provider_key="opsgenie",
            name="my-pagerduty-organization")
        # Associate a Opsgenie service and integration key with a Sentry Opsgenie integration
        test = sentry.SentryIntegrationOpsgenie("test",
            organization="my-organization",
            integration_id=opsgenie.id,
            team="my-opsgenie-team",
            integration_key="c6100908-5c5d-4905-8436-2448fad41bee")
        ```

        ## Import

        import using the organization slug from the URL:

        https://sentry.io/api/0/organizations/[org-slug]/integrations/

        [integration-id] is the top-level `id` of the Opsgenie organization integration

        [service-id] is the `id` of the service_table record to import under the configData property

        ```sh
        $ pulumi import sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie default org-slug/integration-id/service-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_id: The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        :param pulumi.Input[str] integration_key: The integration key of the Opsgenie service.
        :param pulumi.Input[str] organization: The slug of the organization the resource belongs to.
        :param pulumi.Input[str] team: The name of the Opsgenie team. In Sentry, this is called Label.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SentryIntegrationOpsgenieArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage an Opsgenie team integration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_sentry as sentry
        import pulumiverse_sentry as sentry

        opsgenie = sentry.get_sentry_organization_integration(organization="my-organization",
            provider_key="opsgenie",
            name="my-pagerduty-organization")
        # Associate a Opsgenie service and integration key with a Sentry Opsgenie integration
        test = sentry.SentryIntegrationOpsgenie("test",
            organization="my-organization",
            integration_id=opsgenie.id,
            team="my-opsgenie-team",
            integration_key="c6100908-5c5d-4905-8436-2448fad41bee")
        ```

        ## Import

        import using the organization slug from the URL:

        https://sentry.io/api/0/organizations/[org-slug]/integrations/

        [integration-id] is the top-level `id` of the Opsgenie organization integration

        [service-id] is the `id` of the service_table record to import under the configData property

        ```sh
        $ pulumi import sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie default org-slug/integration-id/service-id
        ```

        :param str resource_name: The name of the resource.
        :param SentryIntegrationOpsgenieArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SentryIntegrationOpsgenieArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 integration_key: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SentryIntegrationOpsgenieArgs.__new__(SentryIntegrationOpsgenieArgs)

            if integration_id is None and not opts.urn:
                raise TypeError("Missing required property 'integration_id'")
            __props__.__dict__["integration_id"] = integration_id
            if integration_key is None and not opts.urn:
                raise TypeError("Missing required property 'integration_key'")
            __props__.__dict__["integration_key"] = integration_key
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            if team is None and not opts.urn:
                raise TypeError("Missing required property 'team'")
            __props__.__dict__["team"] = team
        super(SentryIntegrationOpsgenie, __self__).__init__(
            'sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            integration_id: Optional[pulumi.Input[str]] = None,
            integration_key: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            team: Optional[pulumi.Input[str]] = None) -> 'SentryIntegrationOpsgenie':
        """
        Get an existing SentryIntegrationOpsgenie resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] integration_id: The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        :param pulumi.Input[str] integration_key: The integration key of the Opsgenie service.
        :param pulumi.Input[str] organization: The slug of the organization the resource belongs to.
        :param pulumi.Input[str] team: The name of the Opsgenie team. In Sentry, this is called Label.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SentryIntegrationOpsgenieState.__new__(_SentryIntegrationOpsgenieState)

        __props__.__dict__["integration_id"] = integration_id
        __props__.__dict__["integration_key"] = integration_key
        __props__.__dict__["organization"] = organization
        __props__.__dict__["team"] = team
        return SentryIntegrationOpsgenie(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Output[str]:
        """
        The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `get_sentry_organization_integration` data source.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter(name="integrationKey")
    def integration_key(self) -> pulumi.Output[str]:
        """
        The integration key of the Opsgenie service.
        """
        return pulumi.get(self, "integration_key")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The slug of the organization the resource belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def team(self) -> pulumi.Output[str]:
        """
        The name of the Opsgenie team. In Sentry, this is called Label.
        """
        return pulumi.get(self, "team")


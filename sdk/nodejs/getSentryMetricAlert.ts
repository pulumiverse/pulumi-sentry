// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export function getSentryMetricAlert(args: GetSentryMetricAlertArgs, opts?: pulumi.InvokeOptions): Promise<GetSentryMetricAlertResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sentry:index/getSentryMetricAlert:getSentryMetricAlert", {
        "internalId": args.internalId,
        "organization": args.organization,
        "project": args.project,
    }, opts);
}

/**
 * A collection of arguments for invoking getSentryMetricAlert.
 */
export interface GetSentryMetricAlertArgs {
    /**
     * The internal ID for this metric alert.
     */
    internalId: string;
    /**
     * The slug of the organization the metric alert belongs to.
     */
    organization: string;
    /**
     * The slug of the project the metric alert belongs to.
     */
    project: string;
}

/**
 * A collection of values returned by getSentryMetricAlert.
 */
export interface GetSentryMetricAlertResult {
    readonly aggregate: string;
    readonly dataset: string;
    readonly environment: string;
    /**
     * The events type of dataset.
     */
    readonly eventTypes: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The internal ID for this metric alert.
     */
    readonly internalId: string;
    /**
     * The metric alert name.
     */
    readonly name: string;
    /**
     * The slug of the organization the metric alert belongs to.
     */
    readonly organization: string;
    readonly owner: string;
    /**
     * The slug of the project the metric alert belongs to.
     */
    readonly project: string;
    readonly query: string;
    readonly resolveThreshold: number;
    readonly thresholdType: number;
    readonly timeWindow: number;
    readonly triggers: outputs.GetSentryMetricAlertTrigger[];
}
/**
 * ## Example Usage
 */
export function getSentryMetricAlertOutput(args: GetSentryMetricAlertOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSentryMetricAlertResult> {
    return pulumi.output(args).apply((a: any) => getSentryMetricAlert(a, opts))
}

/**
 * A collection of arguments for invoking getSentryMetricAlert.
 */
export interface GetSentryMetricAlertOutputArgs {
    /**
     * The internal ID for this metric alert.
     */
    internalId: pulumi.Input<string>;
    /**
     * The slug of the organization the metric alert belongs to.
     */
    organization: pulumi.Input<string>;
    /**
     * The slug of the project the metric alert belongs to.
     */
    project: pulumi.Input<string>;
}

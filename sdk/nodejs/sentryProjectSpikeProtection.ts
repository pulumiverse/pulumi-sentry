// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Sentry Project Spike Protection resource. This resource is used to create and manage spike protection for a project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sentry from "@pulumiverse/sentry";
 *
 * const defaultSentryProject = new sentry.SentryProject("defaultSentryProject", {
 *     organization: "my-organization",
 *     teams: [
 *         "my-first-team",
 *         "my-second-team",
 *     ],
 *     platform: "javascript",
 * });
 * // Enable spike protection for the project
 * const defaultSentryProjectSpikeProtection = new sentry.SentryProjectSpikeProtection("defaultSentryProjectSpikeProtection", {
 *     organization: defaultSentryProject.organization,
 *     project: defaultSentryProject.id,
 *     enabled: true,
 * });
 * ```
 */
export class SentryProjectSpikeProtection extends pulumi.CustomResource {
    /**
     * Get an existing SentryProjectSpikeProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SentryProjectSpikeProtectionState, opts?: pulumi.CustomResourceOptions): SentryProjectSpikeProtection {
        return new SentryProjectSpikeProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection';

    /**
     * Returns true if the given object is an instance of SentryProjectSpikeProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SentryProjectSpikeProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SentryProjectSpikeProtection.__pulumiType;
    }

    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The slug of the organization the project belongs to.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The slug of the project to enable or disable spike protection for.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a SentryProjectSpikeProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SentryProjectSpikeProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SentryProjectSpikeProtectionArgs | SentryProjectSpikeProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SentryProjectSpikeProtectionState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as SentryProjectSpikeProtectionArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SentryProjectSpikeProtection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SentryProjectSpikeProtection resources.
 */
export interface SentryProjectSpikeProtectionState {
    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The slug of the organization the project belongs to.
     */
    organization?: pulumi.Input<string>;
    /**
     * The slug of the project to enable or disable spike protection for.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SentryProjectSpikeProtection resource.
 */
export interface SentryProjectSpikeProtectionArgs {
    /**
     * Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The slug of the organization the project belongs to.
     */
    organization: pulumi.Input<string>;
    /**
     * The slug of the project to enable or disable spike protection for.
     */
    project: pulumi.Input<string>;
}

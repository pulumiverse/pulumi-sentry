// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Create a Spike Protection Notification Action. See the [Sentry Documentation](https://docs.sentry.io/api/alerts/create-a-spike-protection-notification-action/) for more information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultSentryProject, err := sentry.NewSentryProject(ctx, "defaultSentryProject", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-first-team"),
//					pulumi.String("my-second-team"),
//				},
//				Platform: pulumi.String("javascript"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a notification action for the project
//			_, err = sentry.NewSentryNotificationAction(ctx, "defaultSentryNotificationAction", &sentry.SentryNotificationActionArgs{
//				Organization:     defaultSentryProject.Organization,
//				TriggerType:      pulumi.String("spike-protection"),
//				ServiceType:      pulumi.String("sentry_notification"),
//				TargetIdentifier: pulumi.String("default"),
//				TargetDisplay:    pulumi.String("default"),
//				Projects: pulumi.StringArray{
//					defaultSentryProject.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sentry:index/sentryNotificationAction:SentryNotificationAction default org-slug/action-id
// ```
type SentryNotificationAction struct {
	pulumi.CustomResourceState

	// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
	IntegrationId pulumi.StringPtrOutput `pulumi:"integrationId"`
	// The slug of the organization the project belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The list of project slugs that the Notification Action is created for.
	Projects pulumi.StringArrayOutput `pulumi:"projects"`
	// The service that is used for sending the notification.
	ServiceType pulumi.StringOutput `pulumi:"serviceType"`
	// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
	TargetDisplay pulumi.StringPtrOutput `pulumi:"targetDisplay"`
	// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
	TargetIdentifier pulumi.StringPtrOutput `pulumi:"targetIdentifier"`
	// The type of trigger that will activate this action. Valid values are `spike-protection`.
	TriggerType pulumi.StringOutput `pulumi:"triggerType"`
}

// NewSentryNotificationAction registers a new resource with the given unique name, arguments, and options.
func NewSentryNotificationAction(ctx *pulumi.Context,
	name string, args *SentryNotificationActionArgs, opts ...pulumi.ResourceOption) (*SentryNotificationAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Projects == nil {
		return nil, errors.New("invalid value for required argument 'Projects'")
	}
	if args.ServiceType == nil {
		return nil, errors.New("invalid value for required argument 'ServiceType'")
	}
	if args.TriggerType == nil {
		return nil, errors.New("invalid value for required argument 'TriggerType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryNotificationAction
	err := ctx.RegisterResource("sentry:index/sentryNotificationAction:SentryNotificationAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryNotificationAction gets an existing SentryNotificationAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryNotificationAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryNotificationActionState, opts ...pulumi.ResourceOption) (*SentryNotificationAction, error) {
	var resource SentryNotificationAction
	err := ctx.ReadResource("sentry:index/sentryNotificationAction:SentryNotificationAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryNotificationAction resources.
type sentryNotificationActionState struct {
	// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
	IntegrationId *string `pulumi:"integrationId"`
	// The slug of the organization the project belongs to.
	Organization *string `pulumi:"organization"`
	// The list of project slugs that the Notification Action is created for.
	Projects []string `pulumi:"projects"`
	// The service that is used for sending the notification.
	ServiceType *string `pulumi:"serviceType"`
	// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
	TargetDisplay *string `pulumi:"targetDisplay"`
	// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
	TargetIdentifier *string `pulumi:"targetIdentifier"`
	// The type of trigger that will activate this action. Valid values are `spike-protection`.
	TriggerType *string `pulumi:"triggerType"`
}

type SentryNotificationActionState struct {
	// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
	IntegrationId pulumi.StringPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringPtrInput
	// The list of project slugs that the Notification Action is created for.
	Projects pulumi.StringArrayInput
	// The service that is used for sending the notification.
	ServiceType pulumi.StringPtrInput
	// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
	TargetDisplay pulumi.StringPtrInput
	// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
	TargetIdentifier pulumi.StringPtrInput
	// The type of trigger that will activate this action. Valid values are `spike-protection`.
	TriggerType pulumi.StringPtrInput
}

func (SentryNotificationActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryNotificationActionState)(nil)).Elem()
}

type sentryNotificationActionArgs struct {
	// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
	IntegrationId *string `pulumi:"integrationId"`
	// The slug of the organization the project belongs to.
	Organization string `pulumi:"organization"`
	// The list of project slugs that the Notification Action is created for.
	Projects []string `pulumi:"projects"`
	// The service that is used for sending the notification.
	ServiceType string `pulumi:"serviceType"`
	// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
	TargetDisplay *string `pulumi:"targetDisplay"`
	// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
	TargetIdentifier *string `pulumi:"targetIdentifier"`
	// The type of trigger that will activate this action. Valid values are `spike-protection`.
	TriggerType string `pulumi:"triggerType"`
}

// The set of arguments for constructing a SentryNotificationAction resource.
type SentryNotificationActionArgs struct {
	// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
	IntegrationId pulumi.StringPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringInput
	// The list of project slugs that the Notification Action is created for.
	Projects pulumi.StringArrayInput
	// The service that is used for sending the notification.
	ServiceType pulumi.StringInput
	// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
	TargetDisplay pulumi.StringPtrInput
	// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
	TargetIdentifier pulumi.StringPtrInput
	// The type of trigger that will activate this action. Valid values are `spike-protection`.
	TriggerType pulumi.StringInput
}

func (SentryNotificationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryNotificationActionArgs)(nil)).Elem()
}

type SentryNotificationActionInput interface {
	pulumi.Input

	ToSentryNotificationActionOutput() SentryNotificationActionOutput
	ToSentryNotificationActionOutputWithContext(ctx context.Context) SentryNotificationActionOutput
}

func (*SentryNotificationAction) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryNotificationAction)(nil)).Elem()
}

func (i *SentryNotificationAction) ToSentryNotificationActionOutput() SentryNotificationActionOutput {
	return i.ToSentryNotificationActionOutputWithContext(context.Background())
}

func (i *SentryNotificationAction) ToSentryNotificationActionOutputWithContext(ctx context.Context) SentryNotificationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryNotificationActionOutput)
}

// SentryNotificationActionArrayInput is an input type that accepts SentryNotificationActionArray and SentryNotificationActionArrayOutput values.
// You can construct a concrete instance of `SentryNotificationActionArrayInput` via:
//
//	SentryNotificationActionArray{ SentryNotificationActionArgs{...} }
type SentryNotificationActionArrayInput interface {
	pulumi.Input

	ToSentryNotificationActionArrayOutput() SentryNotificationActionArrayOutput
	ToSentryNotificationActionArrayOutputWithContext(context.Context) SentryNotificationActionArrayOutput
}

type SentryNotificationActionArray []SentryNotificationActionInput

func (SentryNotificationActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryNotificationAction)(nil)).Elem()
}

func (i SentryNotificationActionArray) ToSentryNotificationActionArrayOutput() SentryNotificationActionArrayOutput {
	return i.ToSentryNotificationActionArrayOutputWithContext(context.Background())
}

func (i SentryNotificationActionArray) ToSentryNotificationActionArrayOutputWithContext(ctx context.Context) SentryNotificationActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryNotificationActionArrayOutput)
}

// SentryNotificationActionMapInput is an input type that accepts SentryNotificationActionMap and SentryNotificationActionMapOutput values.
// You can construct a concrete instance of `SentryNotificationActionMapInput` via:
//
//	SentryNotificationActionMap{ "key": SentryNotificationActionArgs{...} }
type SentryNotificationActionMapInput interface {
	pulumi.Input

	ToSentryNotificationActionMapOutput() SentryNotificationActionMapOutput
	ToSentryNotificationActionMapOutputWithContext(context.Context) SentryNotificationActionMapOutput
}

type SentryNotificationActionMap map[string]SentryNotificationActionInput

func (SentryNotificationActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryNotificationAction)(nil)).Elem()
}

func (i SentryNotificationActionMap) ToSentryNotificationActionMapOutput() SentryNotificationActionMapOutput {
	return i.ToSentryNotificationActionMapOutputWithContext(context.Background())
}

func (i SentryNotificationActionMap) ToSentryNotificationActionMapOutputWithContext(ctx context.Context) SentryNotificationActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryNotificationActionMapOutput)
}

type SentryNotificationActionOutput struct{ *pulumi.OutputState }

func (SentryNotificationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryNotificationAction)(nil)).Elem()
}

func (o SentryNotificationActionOutput) ToSentryNotificationActionOutput() SentryNotificationActionOutput {
	return o
}

func (o SentryNotificationActionOutput) ToSentryNotificationActionOutputWithContext(ctx context.Context) SentryNotificationActionOutput {
	return o
}

// The ID of the integration that is used for sending the notification. Use the `getSentryOrganizationIntegration` data source to retrieve an integration. Required if `serviceType` is `slack`, `pagerduty` or `opsgenie`.
func (o SentryNotificationActionOutput) IntegrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringPtrOutput { return v.IntegrationId }).(pulumi.StringPtrOutput)
}

// The slug of the organization the project belongs to.
func (o SentryNotificationActionOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The list of project slugs that the Notification Action is created for.
func (o SentryNotificationActionOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringArrayOutput { return v.Projects }).(pulumi.StringArrayOutput)
}

// The service that is used for sending the notification.
func (o SentryNotificationActionOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

// The display name of the target that is used for sending the notification (e.g. Slack channel name). Required if `serviceType` is `slack` or `opsgenie`.
func (o SentryNotificationActionOutput) TargetDisplay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringPtrOutput { return v.TargetDisplay }).(pulumi.StringPtrOutput)
}

// The identifier of the target that is used for sending the notification (e.g. Slack channel ID). Required if `serviceType` is `slack` or `opsgenie`.
func (o SentryNotificationActionOutput) TargetIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringPtrOutput { return v.TargetIdentifier }).(pulumi.StringPtrOutput)
}

// The type of trigger that will activate this action. Valid values are `spike-protection`.
func (o SentryNotificationActionOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryNotificationAction) pulumi.StringOutput { return v.TriggerType }).(pulumi.StringOutput)
}

type SentryNotificationActionArrayOutput struct{ *pulumi.OutputState }

func (SentryNotificationActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryNotificationAction)(nil)).Elem()
}

func (o SentryNotificationActionArrayOutput) ToSentryNotificationActionArrayOutput() SentryNotificationActionArrayOutput {
	return o
}

func (o SentryNotificationActionArrayOutput) ToSentryNotificationActionArrayOutputWithContext(ctx context.Context) SentryNotificationActionArrayOutput {
	return o
}

func (o SentryNotificationActionArrayOutput) Index(i pulumi.IntInput) SentryNotificationActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryNotificationAction {
		return vs[0].([]*SentryNotificationAction)[vs[1].(int)]
	}).(SentryNotificationActionOutput)
}

type SentryNotificationActionMapOutput struct{ *pulumi.OutputState }

func (SentryNotificationActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryNotificationAction)(nil)).Elem()
}

func (o SentryNotificationActionMapOutput) ToSentryNotificationActionMapOutput() SentryNotificationActionMapOutput {
	return o
}

func (o SentryNotificationActionMapOutput) ToSentryNotificationActionMapOutputWithContext(ctx context.Context) SentryNotificationActionMapOutput {
	return o
}

func (o SentryNotificationActionMapOutput) MapIndex(k pulumi.StringInput) SentryNotificationActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryNotificationAction {
		return vs[0].(map[string]*SentryNotificationAction)[vs[1].(string)]
	}).(SentryNotificationActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryNotificationActionInput)(nil)).Elem(), &SentryNotificationAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryNotificationActionArrayInput)(nil)).Elem(), SentryNotificationActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryNotificationActionMapInput)(nil)).Elem(), SentryNotificationActionMap{})
	pulumi.RegisterOutputType(SentryNotificationActionOutput{})
	pulumi.RegisterOutputType(SentryNotificationActionArrayOutput{})
	pulumi.RegisterOutputType(SentryNotificationActionMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// ## Example Usage
//
// ## Import
//
// import using the organization, project slugs and rule id from the URL:
//
// https://sentry.io/organizations/[org-slug]/alerts/rules/[project-slug]/[rule-id]/details/
//
// ```sh
// $ pulumi import sentry:index/sentryIssueAlert:SentryIssueAlert default org-slug/project-slug/rule-id
// ```
type SentryIssueAlert struct {
	pulumi.CustomResourceState

	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringOutput `pulumi:"actionMatch"`
	// List of actions. In JSON string format.
	Actions pulumi.StringOutput `pulumi:"actions"`
	// List of conditions. In JSON string format.
	Conditions pulumi.StringOutput `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch pulumi.StringPtrOutput `pulumi:"filterMatch"`
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters pulumi.StringPtrOutput `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// The issue alert name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The ID of the team or user that owns the rule.
	Owner pulumi.StringPtrOutput `pulumi:"owner"`
	// The slug of the project the resource belongs to.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewSentryIssueAlert registers a new resource with the given unique name, arguments, and options.
func NewSentryIssueAlert(ctx *pulumi.Context,
	name string, args *SentryIssueAlertArgs, opts ...pulumi.ResourceOption) (*SentryIssueAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionMatch == nil {
		return nil, errors.New("invalid value for required argument 'ActionMatch'")
	}
	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryIssueAlert
	err := ctx.RegisterResource("sentry:index/sentryIssueAlert:SentryIssueAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryIssueAlert gets an existing SentryIssueAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryIssueAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryIssueAlertState, opts ...pulumi.ResourceOption) (*SentryIssueAlert, error) {
	var resource SentryIssueAlert
	err := ctx.ReadResource("sentry:index/sentryIssueAlert:SentryIssueAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryIssueAlert resources.
type sentryIssueAlertState struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch *string `pulumi:"actionMatch"`
	// List of actions. In JSON string format.
	Actions *string `pulumi:"actions"`
	// List of conditions. In JSON string format.
	Conditions *string `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment *string `pulumi:"environment"`
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch *string `pulumi:"filterMatch"`
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters *string `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue.
	Frequency *int `pulumi:"frequency"`
	// The issue alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the resource belongs to.
	Organization *string `pulumi:"organization"`
	// The ID of the team or user that owns the rule.
	Owner *string `pulumi:"owner"`
	// The slug of the project the resource belongs to.
	Project *string `pulumi:"project"`
}

type SentryIssueAlertState struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringPtrInput
	// List of actions. In JSON string format.
	Actions pulumi.StringPtrInput
	// List of conditions. In JSON string format.
	Conditions pulumi.StringPtrInput
	// Perform issue alert in a specific environment.
	Environment pulumi.StringPtrInput
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch pulumi.StringPtrInput
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters pulumi.StringPtrInput
	// Perform actions at most once every `X` minutes for this issue.
	Frequency pulumi.IntPtrInput
	// The issue alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringPtrInput
	// The ID of the team or user that owns the rule.
	Owner pulumi.StringPtrInput
	// The slug of the project the resource belongs to.
	Project pulumi.StringPtrInput
}

func (SentryIssueAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryIssueAlertState)(nil)).Elem()
}

type sentryIssueAlertArgs struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch string `pulumi:"actionMatch"`
	// List of actions. In JSON string format.
	Actions string `pulumi:"actions"`
	// List of conditions. In JSON string format.
	Conditions string `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment *string `pulumi:"environment"`
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch *string `pulumi:"filterMatch"`
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters *string `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue.
	Frequency int `pulumi:"frequency"`
	// The issue alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the resource belongs to.
	Organization string `pulumi:"organization"`
	// The ID of the team or user that owns the rule.
	Owner *string `pulumi:"owner"`
	// The slug of the project the resource belongs to.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a SentryIssueAlert resource.
type SentryIssueAlertArgs struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch pulumi.StringInput
	// List of actions. In JSON string format.
	Actions pulumi.StringInput
	// List of conditions. In JSON string format.
	Conditions pulumi.StringInput
	// Perform issue alert in a specific environment.
	Environment pulumi.StringPtrInput
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch pulumi.StringPtrInput
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters pulumi.StringPtrInput
	// Perform actions at most once every `X` minutes for this issue.
	Frequency pulumi.IntInput
	// The issue alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringInput
	// The ID of the team or user that owns the rule.
	Owner pulumi.StringPtrInput
	// The slug of the project the resource belongs to.
	Project pulumi.StringInput
}

func (SentryIssueAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryIssueAlertArgs)(nil)).Elem()
}

type SentryIssueAlertInput interface {
	pulumi.Input

	ToSentryIssueAlertOutput() SentryIssueAlertOutput
	ToSentryIssueAlertOutputWithContext(ctx context.Context) SentryIssueAlertOutput
}

func (*SentryIssueAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryIssueAlert)(nil)).Elem()
}

func (i *SentryIssueAlert) ToSentryIssueAlertOutput() SentryIssueAlertOutput {
	return i.ToSentryIssueAlertOutputWithContext(context.Background())
}

func (i *SentryIssueAlert) ToSentryIssueAlertOutputWithContext(ctx context.Context) SentryIssueAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIssueAlertOutput)
}

// SentryIssueAlertArrayInput is an input type that accepts SentryIssueAlertArray and SentryIssueAlertArrayOutput values.
// You can construct a concrete instance of `SentryIssueAlertArrayInput` via:
//
//	SentryIssueAlertArray{ SentryIssueAlertArgs{...} }
type SentryIssueAlertArrayInput interface {
	pulumi.Input

	ToSentryIssueAlertArrayOutput() SentryIssueAlertArrayOutput
	ToSentryIssueAlertArrayOutputWithContext(context.Context) SentryIssueAlertArrayOutput
}

type SentryIssueAlertArray []SentryIssueAlertInput

func (SentryIssueAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryIssueAlert)(nil)).Elem()
}

func (i SentryIssueAlertArray) ToSentryIssueAlertArrayOutput() SentryIssueAlertArrayOutput {
	return i.ToSentryIssueAlertArrayOutputWithContext(context.Background())
}

func (i SentryIssueAlertArray) ToSentryIssueAlertArrayOutputWithContext(ctx context.Context) SentryIssueAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIssueAlertArrayOutput)
}

// SentryIssueAlertMapInput is an input type that accepts SentryIssueAlertMap and SentryIssueAlertMapOutput values.
// You can construct a concrete instance of `SentryIssueAlertMapInput` via:
//
//	SentryIssueAlertMap{ "key": SentryIssueAlertArgs{...} }
type SentryIssueAlertMapInput interface {
	pulumi.Input

	ToSentryIssueAlertMapOutput() SentryIssueAlertMapOutput
	ToSentryIssueAlertMapOutputWithContext(context.Context) SentryIssueAlertMapOutput
}

type SentryIssueAlertMap map[string]SentryIssueAlertInput

func (SentryIssueAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryIssueAlert)(nil)).Elem()
}

func (i SentryIssueAlertMap) ToSentryIssueAlertMapOutput() SentryIssueAlertMapOutput {
	return i.ToSentryIssueAlertMapOutputWithContext(context.Background())
}

func (i SentryIssueAlertMap) ToSentryIssueAlertMapOutputWithContext(ctx context.Context) SentryIssueAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIssueAlertMapOutput)
}

type SentryIssueAlertOutput struct{ *pulumi.OutputState }

func (SentryIssueAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryIssueAlert)(nil)).Elem()
}

func (o SentryIssueAlertOutput) ToSentryIssueAlertOutput() SentryIssueAlertOutput {
	return o
}

func (o SentryIssueAlertOutput) ToSentryIssueAlertOutputWithContext(ctx context.Context) SentryIssueAlertOutput {
	return o
}

// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
func (o SentryIssueAlertOutput) ActionMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.ActionMatch }).(pulumi.StringOutput)
}

// List of actions. In JSON string format.
func (o SentryIssueAlertOutput) Actions() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.Actions }).(pulumi.StringOutput)
}

// List of conditions. In JSON string format.
func (o SentryIssueAlertOutput) Conditions() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.Conditions }).(pulumi.StringOutput)
}

// Perform issue alert in a specific environment.
func (o SentryIssueAlertOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
func (o SentryIssueAlertOutput) FilterMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringPtrOutput { return v.FilterMatch }).(pulumi.StringPtrOutput)
}

// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
func (o SentryIssueAlertOutput) Filters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringPtrOutput { return v.Filters }).(pulumi.StringPtrOutput)
}

// Perform actions at most once every `X` minutes for this issue.
func (o SentryIssueAlertOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// The issue alert name.
func (o SentryIssueAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the resource belongs to.
func (o SentryIssueAlertOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The ID of the team or user that owns the rule.
func (o SentryIssueAlertOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringPtrOutput { return v.Owner }).(pulumi.StringPtrOutput)
}

// The slug of the project the resource belongs to.
func (o SentryIssueAlertOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIssueAlert) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type SentryIssueAlertArrayOutput struct{ *pulumi.OutputState }

func (SentryIssueAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryIssueAlert)(nil)).Elem()
}

func (o SentryIssueAlertArrayOutput) ToSentryIssueAlertArrayOutput() SentryIssueAlertArrayOutput {
	return o
}

func (o SentryIssueAlertArrayOutput) ToSentryIssueAlertArrayOutputWithContext(ctx context.Context) SentryIssueAlertArrayOutput {
	return o
}

func (o SentryIssueAlertArrayOutput) Index(i pulumi.IntInput) SentryIssueAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryIssueAlert {
		return vs[0].([]*SentryIssueAlert)[vs[1].(int)]
	}).(SentryIssueAlertOutput)
}

type SentryIssueAlertMapOutput struct{ *pulumi.OutputState }

func (SentryIssueAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryIssueAlert)(nil)).Elem()
}

func (o SentryIssueAlertMapOutput) ToSentryIssueAlertMapOutput() SentryIssueAlertMapOutput {
	return o
}

func (o SentryIssueAlertMapOutput) ToSentryIssueAlertMapOutputWithContext(ctx context.Context) SentryIssueAlertMapOutput {
	return o
}

func (o SentryIssueAlertMapOutput) MapIndex(k pulumi.StringInput) SentryIssueAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryIssueAlert {
		return vs[0].(map[string]*SentryIssueAlert)[vs[1].(string)]
	}).(SentryIssueAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIssueAlertInput)(nil)).Elem(), &SentryIssueAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIssueAlertArrayInput)(nil)).Elem(), SentryIssueAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIssueAlertMapInput)(nil)).Elem(), SentryIssueAlertMap{})
	pulumi.RegisterOutputType(SentryIssueAlertOutput{})
	pulumi.RegisterOutputType(SentryIssueAlertArrayOutput{})
	pulumi.RegisterOutputType(SentryIssueAlertMapOutput{})
}

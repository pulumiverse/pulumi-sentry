// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Manage an Opsgenie team integration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			opsgenie, err := sentry.GetSentryOrganizationIntegration(ctx, &sentry.GetSentryOrganizationIntegrationArgs{
//				Organization: "my-organization",
//				ProviderKey:  "opsgenie",
//				Name:         "my-pagerduty-organization",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Associate a Opsgenie service and integration key with a Sentry Opsgenie integration
//			_, err = sentry.NewSentryIntegrationOpsgenie(ctx, "test", &sentry.SentryIntegrationOpsgenieArgs{
//				Organization:   pulumi.String("my-organization"),
//				IntegrationId:  pulumi.String(opsgenie.Id),
//				Team:           pulumi.String("my-opsgenie-team"),
//				IntegrationKey: pulumi.String("c6100908-5c5d-4905-8436-2448fad41bee"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the organization slug from the URL:
//
// https://sentry.io/api/0/organizations/[org-slug]/integrations/
//
// [integration-id] is the top-level `id` of the Opsgenie organization integration
//
// [service-id] is the `id` of the service_table record to import under the configData property
//
// ```sh
// $ pulumi import sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie default org-slug/integration-id/service-id
// ```
type SentryIntegrationOpsgenie struct {
	pulumi.CustomResourceState

	// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The integration key of the Opsgenie service.
	IntegrationKey pulumi.StringOutput `pulumi:"integrationKey"`
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The name of the Opsgenie team. In Sentry, this is called Label.
	Team pulumi.StringOutput `pulumi:"team"`
}

// NewSentryIntegrationOpsgenie registers a new resource with the given unique name, arguments, and options.
func NewSentryIntegrationOpsgenie(ctx *pulumi.Context,
	name string, args *SentryIntegrationOpsgenieArgs, opts ...pulumi.ResourceOption) (*SentryIntegrationOpsgenie, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.IntegrationKey == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationKey'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Team == nil {
		return nil, errors.New("invalid value for required argument 'Team'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryIntegrationOpsgenie
	err := ctx.RegisterResource("sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryIntegrationOpsgenie gets an existing SentryIntegrationOpsgenie resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryIntegrationOpsgenie(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryIntegrationOpsgenieState, opts ...pulumi.ResourceOption) (*SentryIntegrationOpsgenie, error) {
	var resource SentryIntegrationOpsgenie
	err := ctx.ReadResource("sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryIntegrationOpsgenie resources.
type sentryIntegrationOpsgenieState struct {
	// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
	IntegrationId *string `pulumi:"integrationId"`
	// The integration key of the Opsgenie service.
	IntegrationKey *string `pulumi:"integrationKey"`
	// The slug of the organization the resource belongs to.
	Organization *string `pulumi:"organization"`
	// The name of the Opsgenie team. In Sentry, this is called Label.
	Team *string `pulumi:"team"`
}

type SentryIntegrationOpsgenieState struct {
	// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
	IntegrationId pulumi.StringPtrInput
	// The integration key of the Opsgenie service.
	IntegrationKey pulumi.StringPtrInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringPtrInput
	// The name of the Opsgenie team. In Sentry, this is called Label.
	Team pulumi.StringPtrInput
}

func (SentryIntegrationOpsgenieState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryIntegrationOpsgenieState)(nil)).Elem()
}

type sentryIntegrationOpsgenieArgs struct {
	// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
	IntegrationId string `pulumi:"integrationId"`
	// The integration key of the Opsgenie service.
	IntegrationKey string `pulumi:"integrationKey"`
	// The slug of the organization the resource belongs to.
	Organization string `pulumi:"organization"`
	// The name of the Opsgenie team. In Sentry, this is called Label.
	Team string `pulumi:"team"`
}

// The set of arguments for constructing a SentryIntegrationOpsgenie resource.
type SentryIntegrationOpsgenieArgs struct {
	// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
	IntegrationId pulumi.StringInput
	// The integration key of the Opsgenie service.
	IntegrationKey pulumi.StringInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringInput
	// The name of the Opsgenie team. In Sentry, this is called Label.
	Team pulumi.StringInput
}

func (SentryIntegrationOpsgenieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryIntegrationOpsgenieArgs)(nil)).Elem()
}

type SentryIntegrationOpsgenieInput interface {
	pulumi.Input

	ToSentryIntegrationOpsgenieOutput() SentryIntegrationOpsgenieOutput
	ToSentryIntegrationOpsgenieOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieOutput
}

func (*SentryIntegrationOpsgenie) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryIntegrationOpsgenie)(nil)).Elem()
}

func (i *SentryIntegrationOpsgenie) ToSentryIntegrationOpsgenieOutput() SentryIntegrationOpsgenieOutput {
	return i.ToSentryIntegrationOpsgenieOutputWithContext(context.Background())
}

func (i *SentryIntegrationOpsgenie) ToSentryIntegrationOpsgenieOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIntegrationOpsgenieOutput)
}

// SentryIntegrationOpsgenieArrayInput is an input type that accepts SentryIntegrationOpsgenieArray and SentryIntegrationOpsgenieArrayOutput values.
// You can construct a concrete instance of `SentryIntegrationOpsgenieArrayInput` via:
//
//	SentryIntegrationOpsgenieArray{ SentryIntegrationOpsgenieArgs{...} }
type SentryIntegrationOpsgenieArrayInput interface {
	pulumi.Input

	ToSentryIntegrationOpsgenieArrayOutput() SentryIntegrationOpsgenieArrayOutput
	ToSentryIntegrationOpsgenieArrayOutputWithContext(context.Context) SentryIntegrationOpsgenieArrayOutput
}

type SentryIntegrationOpsgenieArray []SentryIntegrationOpsgenieInput

func (SentryIntegrationOpsgenieArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryIntegrationOpsgenie)(nil)).Elem()
}

func (i SentryIntegrationOpsgenieArray) ToSentryIntegrationOpsgenieArrayOutput() SentryIntegrationOpsgenieArrayOutput {
	return i.ToSentryIntegrationOpsgenieArrayOutputWithContext(context.Background())
}

func (i SentryIntegrationOpsgenieArray) ToSentryIntegrationOpsgenieArrayOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIntegrationOpsgenieArrayOutput)
}

// SentryIntegrationOpsgenieMapInput is an input type that accepts SentryIntegrationOpsgenieMap and SentryIntegrationOpsgenieMapOutput values.
// You can construct a concrete instance of `SentryIntegrationOpsgenieMapInput` via:
//
//	SentryIntegrationOpsgenieMap{ "key": SentryIntegrationOpsgenieArgs{...} }
type SentryIntegrationOpsgenieMapInput interface {
	pulumi.Input

	ToSentryIntegrationOpsgenieMapOutput() SentryIntegrationOpsgenieMapOutput
	ToSentryIntegrationOpsgenieMapOutputWithContext(context.Context) SentryIntegrationOpsgenieMapOutput
}

type SentryIntegrationOpsgenieMap map[string]SentryIntegrationOpsgenieInput

func (SentryIntegrationOpsgenieMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryIntegrationOpsgenie)(nil)).Elem()
}

func (i SentryIntegrationOpsgenieMap) ToSentryIntegrationOpsgenieMapOutput() SentryIntegrationOpsgenieMapOutput {
	return i.ToSentryIntegrationOpsgenieMapOutputWithContext(context.Background())
}

func (i SentryIntegrationOpsgenieMap) ToSentryIntegrationOpsgenieMapOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryIntegrationOpsgenieMapOutput)
}

type SentryIntegrationOpsgenieOutput struct{ *pulumi.OutputState }

func (SentryIntegrationOpsgenieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryIntegrationOpsgenie)(nil)).Elem()
}

func (o SentryIntegrationOpsgenieOutput) ToSentryIntegrationOpsgenieOutput() SentryIntegrationOpsgenieOutput {
	return o
}

func (o SentryIntegrationOpsgenieOutput) ToSentryIntegrationOpsgenieOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieOutput {
	return o
}

// The ID of the Opsgenie integration. Source from the URL `https://<organization>.sentry.io/settings/integrations/opsgenie/<integration-id>/` or use the `getSentryOrganizationIntegration` data source.
func (o SentryIntegrationOpsgenieOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIntegrationOpsgenie) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The integration key of the Opsgenie service.
func (o SentryIntegrationOpsgenieOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIntegrationOpsgenie) pulumi.StringOutput { return v.IntegrationKey }).(pulumi.StringOutput)
}

// The slug of the organization the resource belongs to.
func (o SentryIntegrationOpsgenieOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIntegrationOpsgenie) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The name of the Opsgenie team. In Sentry, this is called Label.
func (o SentryIntegrationOpsgenieOutput) Team() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryIntegrationOpsgenie) pulumi.StringOutput { return v.Team }).(pulumi.StringOutput)
}

type SentryIntegrationOpsgenieArrayOutput struct{ *pulumi.OutputState }

func (SentryIntegrationOpsgenieArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryIntegrationOpsgenie)(nil)).Elem()
}

func (o SentryIntegrationOpsgenieArrayOutput) ToSentryIntegrationOpsgenieArrayOutput() SentryIntegrationOpsgenieArrayOutput {
	return o
}

func (o SentryIntegrationOpsgenieArrayOutput) ToSentryIntegrationOpsgenieArrayOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieArrayOutput {
	return o
}

func (o SentryIntegrationOpsgenieArrayOutput) Index(i pulumi.IntInput) SentryIntegrationOpsgenieOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryIntegrationOpsgenie {
		return vs[0].([]*SentryIntegrationOpsgenie)[vs[1].(int)]
	}).(SentryIntegrationOpsgenieOutput)
}

type SentryIntegrationOpsgenieMapOutput struct{ *pulumi.OutputState }

func (SentryIntegrationOpsgenieMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryIntegrationOpsgenie)(nil)).Elem()
}

func (o SentryIntegrationOpsgenieMapOutput) ToSentryIntegrationOpsgenieMapOutput() SentryIntegrationOpsgenieMapOutput {
	return o
}

func (o SentryIntegrationOpsgenieMapOutput) ToSentryIntegrationOpsgenieMapOutputWithContext(ctx context.Context) SentryIntegrationOpsgenieMapOutput {
	return o
}

func (o SentryIntegrationOpsgenieMapOutput) MapIndex(k pulumi.StringInput) SentryIntegrationOpsgenieOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryIntegrationOpsgenie {
		return vs[0].(map[string]*SentryIntegrationOpsgenie)[vs[1].(string)]
	}).(SentryIntegrationOpsgenieOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIntegrationOpsgenieInput)(nil)).Elem(), &SentryIntegrationOpsgenie{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIntegrationOpsgenieArrayInput)(nil)).Elem(), SentryIntegrationOpsgenieArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryIntegrationOpsgenieMapInput)(nil)).Elem(), SentryIntegrationOpsgenieMap{})
	pulumi.RegisterOutputType(SentryIntegrationOpsgenieOutput{})
	pulumi.RegisterOutputType(SentryIntegrationOpsgenieArrayOutput{})
	pulumi.RegisterOutputType(SentryIntegrationOpsgenieMapOutput{})
}

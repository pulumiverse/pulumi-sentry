// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection":
		r = &SentryAllProjectsSpikeProtection{}
	case "sentry:index/sentryDashboard:SentryDashboard":
		r = &SentryDashboard{}
	case "sentry:index/sentryIntegrationOpsgenie:SentryIntegrationOpsgenie":
		r = &SentryIntegrationOpsgenie{}
	case "sentry:index/sentryIntegrationPagerDuty:SentryIntegrationPagerDuty":
		r = &SentryIntegrationPagerDuty{}
	case "sentry:index/sentryIssueAlert:SentryIssueAlert":
		r = &SentryIssueAlert{}
	case "sentry:index/sentryKey:SentryKey":
		r = &SentryKey{}
	case "sentry:index/sentryMetricAlert:SentryMetricAlert":
		r = &SentryMetricAlert{}
	case "sentry:index/sentryNotificationAction:SentryNotificationAction":
		r = &SentryNotificationAction{}
	case "sentry:index/sentryOrganization:SentryOrganization":
		r = &SentryOrganization{}
	case "sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping":
		r = &SentryOrganizationCodeMapping{}
	case "sentry:index/sentryOrganizationMember:SentryOrganizationMember":
		r = &SentryOrganizationMember{}
	case "sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub":
		r = &SentryOrganizationRepositoryGithub{}
	case "sentry:index/sentryPlugin:SentryPlugin":
		r = &SentryPlugin{}
	case "sentry:index/sentryProject:SentryProject":
		r = &SentryProject{}
	case "sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter":
		r = &SentryProjectInboundDataFilter{}
	case "sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection":
		r = &SentryProjectSpikeProtection{}
	case "sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource":
		r = &SentryProjectSymbolSource{}
	case "sentry:index/sentryTeam:SentryTeam":
		r = &SentryTeam{}
	case "sentry:index/sentryTeamMember:SentryTeamMember":
		r = &SentryTeamMember{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:sentry" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryAllProjectsSpikeProtection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryDashboard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryIntegrationOpsgenie",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryIntegrationPagerDuty",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryIssueAlert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryMetricAlert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryNotificationAction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryOrganization",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryOrganizationCodeMapping",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryOrganizationMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryOrganizationRepositoryGithub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryPlugin",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryProject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryProjectInboundDataFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryProjectSpikeProtection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryProjectSymbolSource",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryTeam",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sentry",
		"index/sentryTeamMember",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"sentry",
		&pkg{version},
	)
}

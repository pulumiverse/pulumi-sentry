// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Key resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Create a key
//			_, err := sentry.NewSentryKey(ctx, "default", &sentry.SentryKeyArgs{
//				Organization: pulumi.String("my-organization"),
//				Project:      pulumi.String("web-app"),
//				Name:         pulumi.String("My Key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the organization, project slugs and key id from the URL:
//
// https://sentry.io/settings/[org-slug]/projects/[project-slug]/keys/[key-id]/
//
// ```sh
// $ pulumi import sentry:index/sentryKey:SentryKey default org-slug/project-slug/key-id
// ```
type SentryKey struct {
	pulumi.CustomResourceState

	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp pulumi.StringOutput `pulumi:"dsnCsp"`
	// DSN for the key.
	DsnPublic pulumi.StringOutput `pulumi:"dsnPublic"`
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret pulumi.StringOutput `pulumi:"dsnSecret"`
	// Flag indicating the key is active.
	IsActive pulumi.BoolOutput `pulumi:"isActive"`
	// The name of the key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project pulumi.StringOutput `pulumi:"project"`
	// The ID of the project that the key belongs to.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Public key portion of the client key.
	Public pulumi.StringOutput `pulumi:"public"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntOutput `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntOutput `pulumi:"rateLimitWindow"`
	// Secret key portion of the client key.
	Secret pulumi.StringOutput `pulumi:"secret"`
}

// NewSentryKey registers a new resource with the given unique name, arguments, and options.
func NewSentryKey(ctx *pulumi.Context,
	name string, args *SentryKeyArgs, opts ...pulumi.ResourceOption) (*SentryKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"dsnSecret",
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryKey
	err := ctx.RegisterResource("sentry:index/sentryKey:SentryKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryKey gets an existing SentryKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryKeyState, opts ...pulumi.ResourceOption) (*SentryKey, error) {
	var resource SentryKey
	err := ctx.ReadResource("sentry:index/sentryKey:SentryKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryKey resources.
type sentryKeyState struct {
	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp *string `pulumi:"dsnCsp"`
	// DSN for the key.
	DsnPublic *string `pulumi:"dsnPublic"`
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret *string `pulumi:"dsnSecret"`
	// Flag indicating the key is active.
	IsActive *bool `pulumi:"isActive"`
	// The name of the key.
	Name *string `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization *string `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project *string `pulumi:"project"`
	// The ID of the project that the key belongs to.
	ProjectId *int `pulumi:"projectId"`
	// Public key portion of the client key.
	Public *string `pulumi:"public"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount *int `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow *int `pulumi:"rateLimitWindow"`
	// Secret key portion of the client key.
	Secret *string `pulumi:"secret"`
}

type SentryKeyState struct {
	// DSN for the Content Security Policy (CSP) for the key.
	DsnCsp pulumi.StringPtrInput
	// DSN for the key.
	DsnPublic pulumi.StringPtrInput
	// Deprecated: DSN (Deprecated) for the key.
	DsnSecret pulumi.StringPtrInput
	// Flag indicating the key is active.
	IsActive pulumi.BoolPtrInput
	// The name of the key.
	Name pulumi.StringPtrInput
	// The slug of the organization the key should be created for.
	Organization pulumi.StringPtrInput
	// The slug of the project the key should be created for.
	Project pulumi.StringPtrInput
	// The ID of the project that the key belongs to.
	ProjectId pulumi.IntPtrInput
	// Public key portion of the client key.
	Public pulumi.StringPtrInput
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntPtrInput
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntPtrInput
	// Secret key portion of the client key.
	Secret pulumi.StringPtrInput
}

func (SentryKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryKeyState)(nil)).Elem()
}

type sentryKeyArgs struct {
	// The name of the key.
	Name *string `pulumi:"name"`
	// The slug of the organization the key should be created for.
	Organization string `pulumi:"organization"`
	// The slug of the project the key should be created for.
	Project string `pulumi:"project"`
	// Number of events that can be reported within the rate limit window.
	RateLimitCount *int `pulumi:"rateLimitCount"`
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow *int `pulumi:"rateLimitWindow"`
}

// The set of arguments for constructing a SentryKey resource.
type SentryKeyArgs struct {
	// The name of the key.
	Name pulumi.StringPtrInput
	// The slug of the organization the key should be created for.
	Organization pulumi.StringInput
	// The slug of the project the key should be created for.
	Project pulumi.StringInput
	// Number of events that can be reported within the rate limit window.
	RateLimitCount pulumi.IntPtrInput
	// Length of time that will be considered when checking the rate limit.
	RateLimitWindow pulumi.IntPtrInput
}

func (SentryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryKeyArgs)(nil)).Elem()
}

type SentryKeyInput interface {
	pulumi.Input

	ToSentryKeyOutput() SentryKeyOutput
	ToSentryKeyOutputWithContext(ctx context.Context) SentryKeyOutput
}

func (*SentryKey) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryKey)(nil)).Elem()
}

func (i *SentryKey) ToSentryKeyOutput() SentryKeyOutput {
	return i.ToSentryKeyOutputWithContext(context.Background())
}

func (i *SentryKey) ToSentryKeyOutputWithContext(ctx context.Context) SentryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryKeyOutput)
}

// SentryKeyArrayInput is an input type that accepts SentryKeyArray and SentryKeyArrayOutput values.
// You can construct a concrete instance of `SentryKeyArrayInput` via:
//
//	SentryKeyArray{ SentryKeyArgs{...} }
type SentryKeyArrayInput interface {
	pulumi.Input

	ToSentryKeyArrayOutput() SentryKeyArrayOutput
	ToSentryKeyArrayOutputWithContext(context.Context) SentryKeyArrayOutput
}

type SentryKeyArray []SentryKeyInput

func (SentryKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryKey)(nil)).Elem()
}

func (i SentryKeyArray) ToSentryKeyArrayOutput() SentryKeyArrayOutput {
	return i.ToSentryKeyArrayOutputWithContext(context.Background())
}

func (i SentryKeyArray) ToSentryKeyArrayOutputWithContext(ctx context.Context) SentryKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryKeyArrayOutput)
}

// SentryKeyMapInput is an input type that accepts SentryKeyMap and SentryKeyMapOutput values.
// You can construct a concrete instance of `SentryKeyMapInput` via:
//
//	SentryKeyMap{ "key": SentryKeyArgs{...} }
type SentryKeyMapInput interface {
	pulumi.Input

	ToSentryKeyMapOutput() SentryKeyMapOutput
	ToSentryKeyMapOutputWithContext(context.Context) SentryKeyMapOutput
}

type SentryKeyMap map[string]SentryKeyInput

func (SentryKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryKey)(nil)).Elem()
}

func (i SentryKeyMap) ToSentryKeyMapOutput() SentryKeyMapOutput {
	return i.ToSentryKeyMapOutputWithContext(context.Background())
}

func (i SentryKeyMap) ToSentryKeyMapOutputWithContext(ctx context.Context) SentryKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryKeyMapOutput)
}

type SentryKeyOutput struct{ *pulumi.OutputState }

func (SentryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryKey)(nil)).Elem()
}

func (o SentryKeyOutput) ToSentryKeyOutput() SentryKeyOutput {
	return o
}

func (o SentryKeyOutput) ToSentryKeyOutputWithContext(ctx context.Context) SentryKeyOutput {
	return o
}

// DSN for the Content Security Policy (CSP) for the key.
func (o SentryKeyOutput) DsnCsp() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.DsnCsp }).(pulumi.StringOutput)
}

// DSN for the key.
func (o SentryKeyOutput) DsnPublic() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.DsnPublic }).(pulumi.StringOutput)
}

// Deprecated: DSN (Deprecated) for the key.
func (o SentryKeyOutput) DsnSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.DsnSecret }).(pulumi.StringOutput)
}

// Flag indicating the key is active.
func (o SentryKeyOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.BoolOutput { return v.IsActive }).(pulumi.BoolOutput)
}

// The name of the key.
func (o SentryKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the key should be created for.
func (o SentryKeyOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project the key should be created for.
func (o SentryKeyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The ID of the project that the key belongs to.
func (o SentryKeyOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Public key portion of the client key.
func (o SentryKeyOutput) Public() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.Public }).(pulumi.StringOutput)
}

// Number of events that can be reported within the rate limit window.
func (o SentryKeyOutput) RateLimitCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.IntOutput { return v.RateLimitCount }).(pulumi.IntOutput)
}

// Length of time that will be considered when checking the rate limit.
func (o SentryKeyOutput) RateLimitWindow() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.IntOutput { return v.RateLimitWindow }).(pulumi.IntOutput)
}

// Secret key portion of the client key.
func (o SentryKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

type SentryKeyArrayOutput struct{ *pulumi.OutputState }

func (SentryKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryKey)(nil)).Elem()
}

func (o SentryKeyArrayOutput) ToSentryKeyArrayOutput() SentryKeyArrayOutput {
	return o
}

func (o SentryKeyArrayOutput) ToSentryKeyArrayOutputWithContext(ctx context.Context) SentryKeyArrayOutput {
	return o
}

func (o SentryKeyArrayOutput) Index(i pulumi.IntInput) SentryKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryKey {
		return vs[0].([]*SentryKey)[vs[1].(int)]
	}).(SentryKeyOutput)
}

type SentryKeyMapOutput struct{ *pulumi.OutputState }

func (SentryKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryKey)(nil)).Elem()
}

func (o SentryKeyMapOutput) ToSentryKeyMapOutput() SentryKeyMapOutput {
	return o
}

func (o SentryKeyMapOutput) ToSentryKeyMapOutputWithContext(ctx context.Context) SentryKeyMapOutput {
	return o
}

func (o SentryKeyMapOutput) MapIndex(k pulumi.StringInput) SentryKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryKey {
		return vs[0].(map[string]*SentryKey)[vs[1].(string)]
	}).(SentryKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryKeyInput)(nil)).Elem(), &SentryKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryKeyArrayInput)(nil)).Elem(), SentryKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryKeyMapInput)(nil)).Elem(), SentryKeyMap{})
	pulumi.RegisterOutputType(SentryKeyOutput{})
	pulumi.RegisterOutputType(SentryKeyArrayOutput{})
	pulumi.RegisterOutputType(SentryKeyMapOutput{})
}

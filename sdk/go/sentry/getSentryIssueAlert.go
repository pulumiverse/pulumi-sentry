// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Issue Alert data source. As the object structure of `conditions`, `filters`, and `actions` are undocumented, a tip is to set up an Issue Alert via the Web UI, and use this data source to copy its object structure to your resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve an Issue Alert
//			// URL format: https://sentry.io/organizations/[organization]/alerts/rules/[project]/[internal_id]/details/
//			original, err := sentry.LookupSentryIssueAlert(ctx, &sentry.LookupSentryIssueAlertArgs{
//				Organization: "my-organization",
//				Project:      "my-project",
//				InternalId:   "42",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create a copy of an Issue Alert
//			_, err = sentry.NewSentryIssueAlert(ctx, "copy", &sentry.SentryIssueAlertArgs{
//				Organization: pulumi.String(original.Organization),
//				Project:      pulumi.String(original.Project),
//				Name:         pulumi.Sprintf("%v-copy", original.Name),
//				ActionMatch:  pulumi.String(original.ActionMatch),
//				FilterMatch:  pulumi.String(original.FilterMatch),
//				Frequency:    pulumi.Int(original.Frequency),
//				Conditions:   interface{}(original.Conditions),
//				Filters:      interface{}(original.Filters),
//				Actions:      interface{}(original.Actions),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSentryIssueAlert(ctx *pulumi.Context, args *LookupSentryIssueAlertArgs, opts ...pulumi.InvokeOption) (*LookupSentryIssueAlertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSentryIssueAlertResult
	err := ctx.Invoke("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSentryIssueAlert.
type LookupSentryIssueAlertArgs struct {
	// The internal ID for this issue alert.
	InternalId string `pulumi:"internalId"`
	// The slug of the organization the issue alert belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project the issue alert belongs to.
	Project string `pulumi:"project"`
}

// A collection of values returned by getSentryIssueAlert.
type LookupSentryIssueAlertResult struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch string `pulumi:"actionMatch"`
	// List of actions.
	Actions []map[string]string `pulumi:"actions"`
	// List of conditions.
	Conditions []map[string]string `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment string `pulumi:"environment"`
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch string `pulumi:"filterMatch"`
	// List of filters.
	Filters []map[string]string `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency int `pulumi:"frequency"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The internal ID for this issue alert.
	InternalId string `pulumi:"internalId"`
	// The issue alert name.
	Name string `pulumi:"name"`
	// The slug of the organization the issue alert belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project the issue alert belongs to.
	Project string `pulumi:"project"`
}

func LookupSentryIssueAlertOutput(ctx *pulumi.Context, args LookupSentryIssueAlertOutputArgs, opts ...pulumi.InvokeOption) LookupSentryIssueAlertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSentryIssueAlertResultOutput, error) {
			args := v.(LookupSentryIssueAlertArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSentryIssueAlertResult
			secret, err := ctx.InvokePackageRaw("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args, &rv, "", opts...)
			if err != nil {
				return LookupSentryIssueAlertResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSentryIssueAlertResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSentryIssueAlertResultOutput), nil
			}
			return output, nil
		}).(LookupSentryIssueAlertResultOutput)
}

// A collection of arguments for invoking getSentryIssueAlert.
type LookupSentryIssueAlertOutputArgs struct {
	// The internal ID for this issue alert.
	InternalId pulumi.StringInput `pulumi:"internalId"`
	// The slug of the organization the issue alert belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The slug of the project the issue alert belongs to.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupSentryIssueAlertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSentryIssueAlertArgs)(nil)).Elem()
}

// A collection of values returned by getSentryIssueAlert.
type LookupSentryIssueAlertResultOutput struct{ *pulumi.OutputState }

func (LookupSentryIssueAlertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSentryIssueAlertResult)(nil)).Elem()
}

func (o LookupSentryIssueAlertResultOutput) ToLookupSentryIssueAlertResultOutput() LookupSentryIssueAlertResultOutput {
	return o
}

func (o LookupSentryIssueAlertResultOutput) ToLookupSentryIssueAlertResultOutputWithContext(ctx context.Context) LookupSentryIssueAlertResultOutput {
	return o
}

// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
func (o LookupSentryIssueAlertResultOutput) ActionMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.ActionMatch }).(pulumi.StringOutput)
}

// List of actions.
func (o LookupSentryIssueAlertResultOutput) Actions() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) []map[string]string { return v.Actions }).(pulumi.StringMapArrayOutput)
}

// List of conditions.
func (o LookupSentryIssueAlertResultOutput) Conditions() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) []map[string]string { return v.Conditions }).(pulumi.StringMapArrayOutput)
}

// Perform issue alert in a specific environment.
func (o LookupSentryIssueAlertResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Environment }).(pulumi.StringOutput)
}

// Trigger actions if `all`, `any`, or `none` of the specified filters match.
func (o LookupSentryIssueAlertResultOutput) FilterMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.FilterMatch }).(pulumi.StringOutput)
}

// List of filters.
func (o LookupSentryIssueAlertResultOutput) Filters() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) []map[string]string { return v.Filters }).(pulumi.StringMapArrayOutput)
}

// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
func (o LookupSentryIssueAlertResultOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) int { return v.Frequency }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSentryIssueAlertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Id }).(pulumi.StringOutput)
}

// The internal ID for this issue alert.
func (o LookupSentryIssueAlertResultOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.InternalId }).(pulumi.StringOutput)
}

// The issue alert name.
func (o LookupSentryIssueAlertResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the issue alert belongs to.
func (o LookupSentryIssueAlertResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project the issue alert belongs to.
func (o LookupSentryIssueAlertResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSentryIssueAlertResultOutput{})
}

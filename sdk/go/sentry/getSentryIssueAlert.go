// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Issue Alert data source. See the [Sentry documentation](https://docs.sentry.io/api/alerts/retrieve-an-issue-alert-rule-for-a-project/) for more information.
func LookupSentryIssueAlert(ctx *pulumi.Context, args *LookupSentryIssueAlertArgs, opts ...pulumi.InvokeOption) (*LookupSentryIssueAlertResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSentryIssueAlertResult
	err := ctx.Invoke("sentry:index/getSentryIssueAlert:getSentryIssueAlert", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSentryIssueAlert.
type LookupSentryIssueAlertArgs struct {
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The slug of the organization the resource belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project the resource belongs to.
	Project string `pulumi:"project"`
}

// A collection of values returned by getSentryIssueAlert.
type LookupSentryIssueAlertResult struct {
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch string `pulumi:"actionMatch"`
	// List of actions. In JSON string format.
	Actions string `pulumi:"actions"`
	// List of conditions. In JSON string format.
	Conditions string `pulumi:"conditions"`
	// Perform issue alert in a specific environment.
	Environment string `pulumi:"environment"`
	// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
	FilterMatch string `pulumi:"filterMatch"`
	// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
	Filters string `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue.
	Frequency int `pulumi:"frequency"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The issue alert name.
	Name string `pulumi:"name"`
	// The slug of the organization the resource belongs to.
	Organization string `pulumi:"organization"`
	// The ID of the team or user that owns the rule.
	Owner string `pulumi:"owner"`
	// The slug of the project the resource belongs to.
	Project string `pulumi:"project"`
}

func LookupSentryIssueAlertOutput(ctx *pulumi.Context, args LookupSentryIssueAlertOutputArgs, opts ...pulumi.InvokeOption) LookupSentryIssueAlertResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSentryIssueAlertResult, error) {
			args := v.(LookupSentryIssueAlertArgs)
			r, err := LookupSentryIssueAlert(ctx, &args, opts...)
			var s LookupSentryIssueAlertResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSentryIssueAlertResultOutput)
}

// A collection of arguments for invoking getSentryIssueAlert.
type LookupSentryIssueAlertOutputArgs struct {
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringInput `pulumi:"organization"`
	// The slug of the project the resource belongs to.
	Project pulumi.StringInput `pulumi:"project"`
}

func (LookupSentryIssueAlertOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSentryIssueAlertArgs)(nil)).Elem()
}

// A collection of values returned by getSentryIssueAlert.
type LookupSentryIssueAlertResultOutput struct{ *pulumi.OutputState }

func (LookupSentryIssueAlertResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSentryIssueAlertResult)(nil)).Elem()
}

func (o LookupSentryIssueAlertResultOutput) ToLookupSentryIssueAlertResultOutput() LookupSentryIssueAlertResultOutput {
	return o
}

func (o LookupSentryIssueAlertResultOutput) ToLookupSentryIssueAlertResultOutputWithContext(ctx context.Context) LookupSentryIssueAlertResultOutput {
	return o
}

// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
func (o LookupSentryIssueAlertResultOutput) ActionMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.ActionMatch }).(pulumi.StringOutput)
}

// List of actions. In JSON string format.
func (o LookupSentryIssueAlertResultOutput) Actions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Actions }).(pulumi.StringOutput)
}

// List of conditions. In JSON string format.
func (o LookupSentryIssueAlertResultOutput) Conditions() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Conditions }).(pulumi.StringOutput)
}

// Perform issue alert in a specific environment.
func (o LookupSentryIssueAlertResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Environment }).(pulumi.StringOutput)
}

// A string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.
func (o LookupSentryIssueAlertResultOutput) FilterMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.FilterMatch }).(pulumi.StringOutput)
}

// A list of filters that determine if a rule fires after the necessary conditions have been met. In JSON string format.
func (o LookupSentryIssueAlertResultOutput) Filters() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Filters }).(pulumi.StringOutput)
}

// Perform actions at most once every `X` minutes for this issue.
func (o LookupSentryIssueAlertResultOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) int { return v.Frequency }).(pulumi.IntOutput)
}

// The ID of this resource.
func (o LookupSentryIssueAlertResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Id }).(pulumi.StringOutput)
}

// The issue alert name.
func (o LookupSentryIssueAlertResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the resource belongs to.
func (o LookupSentryIssueAlertResultOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Organization }).(pulumi.StringOutput)
}

// The ID of the team or user that owns the rule.
func (o LookupSentryIssueAlertResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Owner }).(pulumi.StringOutput)
}

// The slug of the project the resource belongs to.
func (o LookupSentryIssueAlertResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSentryIssueAlertResult) string { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSentryIssueAlertResultOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Metric Alert resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			slack, err := sentry.GetSentryOrganizationIntegration(ctx, &sentry.GetSentryOrganizationIntegrationArgs{
//				Organization: mainSentryProject.Organization,
//				ProviderKey:  "slack",
//				Name:         "Slack Workspace",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryMetricAlert(ctx, "main", &sentry.SentryMetricAlertArgs{
//				Organization:     pulumi.Any(mainSentryProject.Organization),
//				Project:          pulumi.Any(mainSentryProject.Id),
//				Name:             pulumi.String("My metric alert"),
//				Dataset:          pulumi.String("events"),
//				Query:            pulumi.String(""),
//				Aggregate:        pulumi.String("count()"),
//				TimeWindow:       pulumi.Float64(60),
//				ThresholdType:    pulumi.Int(0),
//				ResolveThreshold: pulumi.Float64(0),
//				Triggers: sentry.SentryMetricAlertTriggerArray{
//					&sentry.SentryMetricAlertTriggerArgs{
//						Actions: sentry.SentryMetricAlertTriggerActionArray{
//							&sentry.SentryMetricAlertTriggerActionArgs{
//								Type:             pulumi.String("email"),
//								TargetType:       pulumi.String("team"),
//								TargetIdentifier: pulumi.Any(mainSentryTeam.TeamId),
//							},
//						},
//						AlertThreshold: pulumi.Float64(300),
//						Label:          pulumi.String("critical"),
//						ThresholdType:  pulumi.Int(0),
//					},
//					&sentry.SentryMetricAlertTriggerArgs{
//						Actions: sentry.SentryMetricAlertTriggerActionArray{
//							&sentry.SentryMetricAlertTriggerActionArgs{
//								Type:             pulumi.String("slack"),
//								TargetType:       pulumi.String("specific"),
//								TargetIdentifier: pulumi.String("#slack-channel"),
//								IntegrationId:    pulumi.String(slack.Id),
//							},
//						},
//						AlertThreshold: pulumi.Float64(300),
//						Label:          pulumi.String("critical"),
//						ThresholdType:  pulumi.Int(0),
//					},
//					&sentry.SentryMetricAlertTriggerArgs{
//						AlertThreshold: pulumi.Float64(100),
//						Label:          pulumi.String("warning"),
//						ThresholdType:  pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the organization, project slugs and rule id from the URL:
//
// https://sentry.io/organizations/[org-slug]/projects/[project-slug]/
//
// https://sentry.io/organizations/[org-slug]/alerts/rules/details/[rule-id]/
//
// or
//
// https://sentry.io/organizations/[org-slug]/alerts/metric-rules/[project-slug]/[rule-id]/
//
// ```sh
// $ pulumi import sentry:index/sentryMetricAlert:SentryMetricAlert default org-slug/project-slug/rule-id
// ```
type SentryMetricAlert struct {
	pulumi.CustomResourceState

	// The aggregation criteria to apply
	Aggregate pulumi.StringOutput `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset pulumi.StringPtrOutput `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The events type of dataset.
	EventTypes pulumi.StringArrayOutput `pulumi:"eventTypes"`
	// The internal ID for this metric alert.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The metric alert name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project pulumi.StringOutput `pulumi:"project"`
	// The query filter to apply
	Query pulumi.StringOutput `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrOutput `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType pulumi.IntOutput `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64Output                `pulumi:"timeWindow"`
	Triggers   SentryMetricAlertTriggerArrayOutput `pulumi:"triggers"`
}

// NewSentryMetricAlert registers a new resource with the given unique name, arguments, and options.
func NewSentryMetricAlert(ctx *pulumi.Context,
	name string, args *SentryMetricAlertArgs, opts ...pulumi.ResourceOption) (*SentryMetricAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Aggregate == nil {
		return nil, errors.New("invalid value for required argument 'Aggregate'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.ThresholdType == nil {
		return nil, errors.New("invalid value for required argument 'ThresholdType'")
	}
	if args.TimeWindow == nil {
		return nil, errors.New("invalid value for required argument 'TimeWindow'")
	}
	if args.Triggers == nil {
		return nil, errors.New("invalid value for required argument 'Triggers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryMetricAlert
	err := ctx.RegisterResource("sentry:index/sentryMetricAlert:SentryMetricAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryMetricAlert gets an existing SentryMetricAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryMetricAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryMetricAlertState, opts ...pulumi.ResourceOption) (*SentryMetricAlert, error) {
	var resource SentryMetricAlert
	err := ctx.ReadResource("sentry:index/sentryMetricAlert:SentryMetricAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryMetricAlert resources.
type sentryMetricAlertState struct {
	// The aggregation criteria to apply
	Aggregate *string `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset *string `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment *string `pulumi:"environment"`
	// The events type of dataset.
	EventTypes []string `pulumi:"eventTypes"`
	// The internal ID for this metric alert.
	InternalId *string `pulumi:"internalId"`
	// The metric alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization *string `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner *string `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project *string `pulumi:"project"`
	// The query filter to apply
	Query *string `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold *float64 `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType *int `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow *float64                   `pulumi:"timeWindow"`
	Triggers   []SentryMetricAlertTrigger `pulumi:"triggers"`
}

type SentryMetricAlertState struct {
	// The aggregation criteria to apply
	Aggregate pulumi.StringPtrInput
	// The Sentry Alert category
	Dataset pulumi.StringPtrInput
	// Perform Alert rule in a specific environment
	Environment pulumi.StringPtrInput
	// The events type of dataset.
	EventTypes pulumi.StringArrayInput
	// The internal ID for this metric alert.
	InternalId pulumi.StringPtrInput
	// The metric alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringPtrInput
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringPtrInput
	// The slug of the project to create the metric alert for.
	Project pulumi.StringPtrInput
	// The query filter to apply
	Query pulumi.StringPtrInput
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrInput
	// The type of threshold
	ThresholdType pulumi.IntPtrInput
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64PtrInput
	Triggers   SentryMetricAlertTriggerArrayInput
}

func (SentryMetricAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryMetricAlertState)(nil)).Elem()
}

type sentryMetricAlertArgs struct {
	// The aggregation criteria to apply
	Aggregate string `pulumi:"aggregate"`
	// The Sentry Alert category
	Dataset *string `pulumi:"dataset"`
	// Perform Alert rule in a specific environment
	Environment *string `pulumi:"environment"`
	// The events type of dataset.
	EventTypes []string `pulumi:"eventTypes"`
	// The metric alert name.
	Name *string `pulumi:"name"`
	// The slug of the organization the metric alert belongs to.
	Organization string `pulumi:"organization"`
	// Specifies the owner id of this Alert rule
	Owner *string `pulumi:"owner"`
	// The slug of the project to create the metric alert for.
	Project string `pulumi:"project"`
	// The query filter to apply
	Query string `pulumi:"query"`
	// The value at which the Alert rule resolves
	ResolveThreshold *float64 `pulumi:"resolveThreshold"`
	// The type of threshold
	ThresholdType int `pulumi:"thresholdType"`
	// The period to evaluate the Alert rule in minutes
	TimeWindow float64                    `pulumi:"timeWindow"`
	Triggers   []SentryMetricAlertTrigger `pulumi:"triggers"`
}

// The set of arguments for constructing a SentryMetricAlert resource.
type SentryMetricAlertArgs struct {
	// The aggregation criteria to apply
	Aggregate pulumi.StringInput
	// The Sentry Alert category
	Dataset pulumi.StringPtrInput
	// Perform Alert rule in a specific environment
	Environment pulumi.StringPtrInput
	// The events type of dataset.
	EventTypes pulumi.StringArrayInput
	// The metric alert name.
	Name pulumi.StringPtrInput
	// The slug of the organization the metric alert belongs to.
	Organization pulumi.StringInput
	// Specifies the owner id of this Alert rule
	Owner pulumi.StringPtrInput
	// The slug of the project to create the metric alert for.
	Project pulumi.StringInput
	// The query filter to apply
	Query pulumi.StringInput
	// The value at which the Alert rule resolves
	ResolveThreshold pulumi.Float64PtrInput
	// The type of threshold
	ThresholdType pulumi.IntInput
	// The period to evaluate the Alert rule in minutes
	TimeWindow pulumi.Float64Input
	Triggers   SentryMetricAlertTriggerArrayInput
}

func (SentryMetricAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryMetricAlertArgs)(nil)).Elem()
}

type SentryMetricAlertInput interface {
	pulumi.Input

	ToSentryMetricAlertOutput() SentryMetricAlertOutput
	ToSentryMetricAlertOutputWithContext(ctx context.Context) SentryMetricAlertOutput
}

func (*SentryMetricAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryMetricAlert)(nil)).Elem()
}

func (i *SentryMetricAlert) ToSentryMetricAlertOutput() SentryMetricAlertOutput {
	return i.ToSentryMetricAlertOutputWithContext(context.Background())
}

func (i *SentryMetricAlert) ToSentryMetricAlertOutputWithContext(ctx context.Context) SentryMetricAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryMetricAlertOutput)
}

// SentryMetricAlertArrayInput is an input type that accepts SentryMetricAlertArray and SentryMetricAlertArrayOutput values.
// You can construct a concrete instance of `SentryMetricAlertArrayInput` via:
//
//	SentryMetricAlertArray{ SentryMetricAlertArgs{...} }
type SentryMetricAlertArrayInput interface {
	pulumi.Input

	ToSentryMetricAlertArrayOutput() SentryMetricAlertArrayOutput
	ToSentryMetricAlertArrayOutputWithContext(context.Context) SentryMetricAlertArrayOutput
}

type SentryMetricAlertArray []SentryMetricAlertInput

func (SentryMetricAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryMetricAlert)(nil)).Elem()
}

func (i SentryMetricAlertArray) ToSentryMetricAlertArrayOutput() SentryMetricAlertArrayOutput {
	return i.ToSentryMetricAlertArrayOutputWithContext(context.Background())
}

func (i SentryMetricAlertArray) ToSentryMetricAlertArrayOutputWithContext(ctx context.Context) SentryMetricAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryMetricAlertArrayOutput)
}

// SentryMetricAlertMapInput is an input type that accepts SentryMetricAlertMap and SentryMetricAlertMapOutput values.
// You can construct a concrete instance of `SentryMetricAlertMapInput` via:
//
//	SentryMetricAlertMap{ "key": SentryMetricAlertArgs{...} }
type SentryMetricAlertMapInput interface {
	pulumi.Input

	ToSentryMetricAlertMapOutput() SentryMetricAlertMapOutput
	ToSentryMetricAlertMapOutputWithContext(context.Context) SentryMetricAlertMapOutput
}

type SentryMetricAlertMap map[string]SentryMetricAlertInput

func (SentryMetricAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryMetricAlert)(nil)).Elem()
}

func (i SentryMetricAlertMap) ToSentryMetricAlertMapOutput() SentryMetricAlertMapOutput {
	return i.ToSentryMetricAlertMapOutputWithContext(context.Background())
}

func (i SentryMetricAlertMap) ToSentryMetricAlertMapOutputWithContext(ctx context.Context) SentryMetricAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryMetricAlertMapOutput)
}

type SentryMetricAlertOutput struct{ *pulumi.OutputState }

func (SentryMetricAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryMetricAlert)(nil)).Elem()
}

func (o SentryMetricAlertOutput) ToSentryMetricAlertOutput() SentryMetricAlertOutput {
	return o
}

func (o SentryMetricAlertOutput) ToSentryMetricAlertOutputWithContext(ctx context.Context) SentryMetricAlertOutput {
	return o
}

// The aggregation criteria to apply
func (o SentryMetricAlertOutput) Aggregate() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Aggregate }).(pulumi.StringOutput)
}

// The Sentry Alert category
func (o SentryMetricAlertOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringPtrOutput { return v.Dataset }).(pulumi.StringPtrOutput)
}

// Perform Alert rule in a specific environment
func (o SentryMetricAlertOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// The events type of dataset.
func (o SentryMetricAlertOutput) EventTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringArrayOutput { return v.EventTypes }).(pulumi.StringArrayOutput)
}

// The internal ID for this metric alert.
func (o SentryMetricAlertOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The metric alert name.
func (o SentryMetricAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the metric alert belongs to.
func (o SentryMetricAlertOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Specifies the owner id of this Alert rule
func (o SentryMetricAlertOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The slug of the project to create the metric alert for.
func (o SentryMetricAlertOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The query filter to apply
func (o SentryMetricAlertOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// The value at which the Alert rule resolves
func (o SentryMetricAlertOutput) ResolveThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.Float64PtrOutput { return v.ResolveThreshold }).(pulumi.Float64PtrOutput)
}

// The type of threshold
func (o SentryMetricAlertOutput) ThresholdType() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.IntOutput { return v.ThresholdType }).(pulumi.IntOutput)
}

// The period to evaluate the Alert rule in minutes
func (o SentryMetricAlertOutput) TimeWindow() pulumi.Float64Output {
	return o.ApplyT(func(v *SentryMetricAlert) pulumi.Float64Output { return v.TimeWindow }).(pulumi.Float64Output)
}

func (o SentryMetricAlertOutput) Triggers() SentryMetricAlertTriggerArrayOutput {
	return o.ApplyT(func(v *SentryMetricAlert) SentryMetricAlertTriggerArrayOutput { return v.Triggers }).(SentryMetricAlertTriggerArrayOutput)
}

type SentryMetricAlertArrayOutput struct{ *pulumi.OutputState }

func (SentryMetricAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryMetricAlert)(nil)).Elem()
}

func (o SentryMetricAlertArrayOutput) ToSentryMetricAlertArrayOutput() SentryMetricAlertArrayOutput {
	return o
}

func (o SentryMetricAlertArrayOutput) ToSentryMetricAlertArrayOutputWithContext(ctx context.Context) SentryMetricAlertArrayOutput {
	return o
}

func (o SentryMetricAlertArrayOutput) Index(i pulumi.IntInput) SentryMetricAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryMetricAlert {
		return vs[0].([]*SentryMetricAlert)[vs[1].(int)]
	}).(SentryMetricAlertOutput)
}

type SentryMetricAlertMapOutput struct{ *pulumi.OutputState }

func (SentryMetricAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryMetricAlert)(nil)).Elem()
}

func (o SentryMetricAlertMapOutput) ToSentryMetricAlertMapOutput() SentryMetricAlertMapOutput {
	return o
}

func (o SentryMetricAlertMapOutput) ToSentryMetricAlertMapOutputWithContext(ctx context.Context) SentryMetricAlertMapOutput {
	return o
}

func (o SentryMetricAlertMapOutput) MapIndex(k pulumi.StringInput) SentryMetricAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryMetricAlert {
		return vs[0].(map[string]*SentryMetricAlert)[vs[1].(string)]
	}).(SentryMetricAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryMetricAlertInput)(nil)).Elem(), &SentryMetricAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryMetricAlertArrayInput)(nil)).Elem(), SentryMetricAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryMetricAlertMapInput)(nil)).Elem(), SentryMetricAlertMap{})
	pulumi.RegisterOutputType(SentryMetricAlertOutput{})
	pulumi.RegisterOutputType(SentryMetricAlertArrayOutput{})
	pulumi.RegisterOutputType(SentryMetricAlertMapOutput{})
}

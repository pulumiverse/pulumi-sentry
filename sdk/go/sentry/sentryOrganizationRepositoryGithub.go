// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Github Organization Repository resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			github, err := sentry.GetSentryOrganizationIntegration(ctx, &sentry.GetSentryOrganizationIntegrationArgs{
//				Organization: "my-organization",
//				ProviderKey:  "github",
//				Name:         "my-github-organization",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryOrganizationRepositoryGithub(ctx, "this", &sentry.SentryOrganizationRepositoryGithubArgs{
//				Organization:  pulumi.String("my-organization"),
//				IntegrationId: pulumi.String(github.InternalId),
//				Identifier:    pulumi.String("my-github-organization/my-github-repo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the organization slug from the URL:
//
// https://sentry.io/organizations/[org-slug]/
//
// [github-org] and [github-repo] are the slugs to your repo
//
// ```sh
// $ pulumi import sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub this org-slug/github-org/github-repo
// ```
type SentryOrganizationRepositoryGithub struct {
	pulumi.CustomResourceState

	// The repo identifier. For Github it is {github*org}/{github*repo}.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The organization integration ID for Github.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The internal ID for this organization repository.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The slug of the Sentry organization this resource belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
}

// NewSentryOrganizationRepositoryGithub registers a new resource with the given unique name, arguments, and options.
func NewSentryOrganizationRepositoryGithub(ctx *pulumi.Context,
	name string, args *SentryOrganizationRepositoryGithubArgs, opts ...pulumi.ResourceOption) (*SentryOrganizationRepositoryGithub, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryOrganizationRepositoryGithub
	err := ctx.RegisterResource("sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryOrganizationRepositoryGithub gets an existing SentryOrganizationRepositoryGithub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryOrganizationRepositoryGithub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryOrganizationRepositoryGithubState, opts ...pulumi.ResourceOption) (*SentryOrganizationRepositoryGithub, error) {
	var resource SentryOrganizationRepositoryGithub
	err := ctx.ReadResource("sentry:index/sentryOrganizationRepositoryGithub:SentryOrganizationRepositoryGithub", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryOrganizationRepositoryGithub resources.
type sentryOrganizationRepositoryGithubState struct {
	// The repo identifier. For Github it is {github*org}/{github*repo}.
	Identifier *string `pulumi:"identifier"`
	// The organization integration ID for Github.
	IntegrationId *string `pulumi:"integrationId"`
	// The internal ID for this organization repository.
	InternalId *string `pulumi:"internalId"`
	// The slug of the Sentry organization this resource belongs to.
	Organization *string `pulumi:"organization"`
}

type SentryOrganizationRepositoryGithubState struct {
	// The repo identifier. For Github it is {github*org}/{github*repo}.
	Identifier pulumi.StringPtrInput
	// The organization integration ID for Github.
	IntegrationId pulumi.StringPtrInput
	// The internal ID for this organization repository.
	InternalId pulumi.StringPtrInput
	// The slug of the Sentry organization this resource belongs to.
	Organization pulumi.StringPtrInput
}

func (SentryOrganizationRepositoryGithubState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryOrganizationRepositoryGithubState)(nil)).Elem()
}

type sentryOrganizationRepositoryGithubArgs struct {
	// The repo identifier. For Github it is {github*org}/{github*repo}.
	Identifier string `pulumi:"identifier"`
	// The organization integration ID for Github.
	IntegrationId string `pulumi:"integrationId"`
	// The slug of the Sentry organization this resource belongs to.
	Organization string `pulumi:"organization"`
}

// The set of arguments for constructing a SentryOrganizationRepositoryGithub resource.
type SentryOrganizationRepositoryGithubArgs struct {
	// The repo identifier. For Github it is {github*org}/{github*repo}.
	Identifier pulumi.StringInput
	// The organization integration ID for Github.
	IntegrationId pulumi.StringInput
	// The slug of the Sentry organization this resource belongs to.
	Organization pulumi.StringInput
}

func (SentryOrganizationRepositoryGithubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryOrganizationRepositoryGithubArgs)(nil)).Elem()
}

type SentryOrganizationRepositoryGithubInput interface {
	pulumi.Input

	ToSentryOrganizationRepositoryGithubOutput() SentryOrganizationRepositoryGithubOutput
	ToSentryOrganizationRepositoryGithubOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubOutput
}

func (*SentryOrganizationRepositoryGithub) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (i *SentryOrganizationRepositoryGithub) ToSentryOrganizationRepositoryGithubOutput() SentryOrganizationRepositoryGithubOutput {
	return i.ToSentryOrganizationRepositoryGithubOutputWithContext(context.Background())
}

func (i *SentryOrganizationRepositoryGithub) ToSentryOrganizationRepositoryGithubOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationRepositoryGithubOutput)
}

// SentryOrganizationRepositoryGithubArrayInput is an input type that accepts SentryOrganizationRepositoryGithubArray and SentryOrganizationRepositoryGithubArrayOutput values.
// You can construct a concrete instance of `SentryOrganizationRepositoryGithubArrayInput` via:
//
//	SentryOrganizationRepositoryGithubArray{ SentryOrganizationRepositoryGithubArgs{...} }
type SentryOrganizationRepositoryGithubArrayInput interface {
	pulumi.Input

	ToSentryOrganizationRepositoryGithubArrayOutput() SentryOrganizationRepositoryGithubArrayOutput
	ToSentryOrganizationRepositoryGithubArrayOutputWithContext(context.Context) SentryOrganizationRepositoryGithubArrayOutput
}

type SentryOrganizationRepositoryGithubArray []SentryOrganizationRepositoryGithubInput

func (SentryOrganizationRepositoryGithubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (i SentryOrganizationRepositoryGithubArray) ToSentryOrganizationRepositoryGithubArrayOutput() SentryOrganizationRepositoryGithubArrayOutput {
	return i.ToSentryOrganizationRepositoryGithubArrayOutputWithContext(context.Background())
}

func (i SentryOrganizationRepositoryGithubArray) ToSentryOrganizationRepositoryGithubArrayOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationRepositoryGithubArrayOutput)
}

// SentryOrganizationRepositoryGithubMapInput is an input type that accepts SentryOrganizationRepositoryGithubMap and SentryOrganizationRepositoryGithubMapOutput values.
// You can construct a concrete instance of `SentryOrganizationRepositoryGithubMapInput` via:
//
//	SentryOrganizationRepositoryGithubMap{ "key": SentryOrganizationRepositoryGithubArgs{...} }
type SentryOrganizationRepositoryGithubMapInput interface {
	pulumi.Input

	ToSentryOrganizationRepositoryGithubMapOutput() SentryOrganizationRepositoryGithubMapOutput
	ToSentryOrganizationRepositoryGithubMapOutputWithContext(context.Context) SentryOrganizationRepositoryGithubMapOutput
}

type SentryOrganizationRepositoryGithubMap map[string]SentryOrganizationRepositoryGithubInput

func (SentryOrganizationRepositoryGithubMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (i SentryOrganizationRepositoryGithubMap) ToSentryOrganizationRepositoryGithubMapOutput() SentryOrganizationRepositoryGithubMapOutput {
	return i.ToSentryOrganizationRepositoryGithubMapOutputWithContext(context.Background())
}

func (i SentryOrganizationRepositoryGithubMap) ToSentryOrganizationRepositoryGithubMapOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationRepositoryGithubMapOutput)
}

type SentryOrganizationRepositoryGithubOutput struct{ *pulumi.OutputState }

func (SentryOrganizationRepositoryGithubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (o SentryOrganizationRepositoryGithubOutput) ToSentryOrganizationRepositoryGithubOutput() SentryOrganizationRepositoryGithubOutput {
	return o
}

func (o SentryOrganizationRepositoryGithubOutput) ToSentryOrganizationRepositoryGithubOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubOutput {
	return o
}

// The repo identifier. For Github it is {github*org}/{github*repo}.
func (o SentryOrganizationRepositoryGithubOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationRepositoryGithub) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The organization integration ID for Github.
func (o SentryOrganizationRepositoryGithubOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationRepositoryGithub) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The internal ID for this organization repository.
func (o SentryOrganizationRepositoryGithubOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationRepositoryGithub) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The slug of the Sentry organization this resource belongs to.
func (o SentryOrganizationRepositoryGithubOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationRepositoryGithub) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

type SentryOrganizationRepositoryGithubArrayOutput struct{ *pulumi.OutputState }

func (SentryOrganizationRepositoryGithubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (o SentryOrganizationRepositoryGithubArrayOutput) ToSentryOrganizationRepositoryGithubArrayOutput() SentryOrganizationRepositoryGithubArrayOutput {
	return o
}

func (o SentryOrganizationRepositoryGithubArrayOutput) ToSentryOrganizationRepositoryGithubArrayOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubArrayOutput {
	return o
}

func (o SentryOrganizationRepositoryGithubArrayOutput) Index(i pulumi.IntInput) SentryOrganizationRepositoryGithubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryOrganizationRepositoryGithub {
		return vs[0].([]*SentryOrganizationRepositoryGithub)[vs[1].(int)]
	}).(SentryOrganizationRepositoryGithubOutput)
}

type SentryOrganizationRepositoryGithubMapOutput struct{ *pulumi.OutputState }

func (SentryOrganizationRepositoryGithubMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryOrganizationRepositoryGithub)(nil)).Elem()
}

func (o SentryOrganizationRepositoryGithubMapOutput) ToSentryOrganizationRepositoryGithubMapOutput() SentryOrganizationRepositoryGithubMapOutput {
	return o
}

func (o SentryOrganizationRepositoryGithubMapOutput) ToSentryOrganizationRepositoryGithubMapOutputWithContext(ctx context.Context) SentryOrganizationRepositoryGithubMapOutput {
	return o
}

func (o SentryOrganizationRepositoryGithubMapOutput) MapIndex(k pulumi.StringInput) SentryOrganizationRepositoryGithubOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryOrganizationRepositoryGithub {
		return vs[0].(map[string]*SentryOrganizationRepositoryGithub)[vs[1].(string)]
	}).(SentryOrganizationRepositoryGithubOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationRepositoryGithubInput)(nil)).Elem(), &SentryOrganizationRepositoryGithub{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationRepositoryGithubArrayInput)(nil)).Elem(), SentryOrganizationRepositoryGithubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationRepositoryGithubMapInput)(nil)).Elem(), SentryOrganizationRepositoryGithubMap{})
	pulumi.RegisterOutputType(SentryOrganizationRepositoryGithubOutput{})
	pulumi.RegisterOutputType(SentryOrganizationRepositoryGithubArrayOutput{})
	pulumi.RegisterOutputType(SentryOrganizationRepositoryGithubMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Dashboard resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sentry.NewSentryDashboard(ctx, "main", &sentry.SentryDashboardArgs{
//				Organization: pulumi.Any(data.Sentry_organization.Main.Id),
//				Title:        pulumi.String("Test dashboard"),
//				Widgets: sentry.SentryDashboardWidgetArray{
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Number of Errors"),
//						DisplayType: pulumi.String("big_number"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Conditions: pulumi.String("!event.type:transaction"),
//								OrderBy:    pulumi.String("count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(0),
//							Y:    pulumi.Int(0),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(1),
//							MinH: pulumi.Int(1),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Number of Issues"),
//						DisplayType: pulumi.String("big_number"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("count_unique(issue)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count_unique(issue)"),
//								},
//								Conditions: pulumi.String("!event.type:transaction"),
//								OrderBy:    pulumi.String("count_unique(issue)"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(1),
//							Y:    pulumi.Int(0),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(1),
//							MinH: pulumi.Int(1),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Events"),
//						DisplayType: pulumi.String("line"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Name: pulumi.String("Events"),
//								Fields: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Conditions: pulumi.String("!event.type:transaction"),
//								OrderBy:    pulumi.String("count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(2),
//							Y:    pulumi.Int(0),
//							W:    pulumi.Int(4),
//							H:    pulumi.Int(2),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Affected Users"),
//						DisplayType: pulumi.String("line"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Name: pulumi.String("Known Users"),
//								Fields: pulumi.StringArray{
//									pulumi.String("count_unique(user)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count_unique(user)"),
//								},
//								Conditions: pulumi.String("has:user.email !event.type:transaction"),
//								OrderBy:    pulumi.String("count_unique(user)"),
//							},
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Name: pulumi.String("Anonymous Users"),
//								Fields: pulumi.StringArray{
//									pulumi.String("count_unique(user)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count_unique(user)"),
//								},
//								Conditions: pulumi.String("!has:user.email !event.type:transaction"),
//								OrderBy:    pulumi.String("count_unique(user)"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(1),
//							Y:    pulumi.Int(2),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(2),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Handled vs. Unhandled"),
//						DisplayType: pulumi.String("line"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Name: pulumi.String("Handled"),
//								Fields: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Conditions: pulumi.String("error.handled:true"),
//								OrderBy:    pulumi.String("count()"),
//							},
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Name: pulumi.String("Unhandled"),
//								Fields: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Conditions: pulumi.String("error.handled:false"),
//								OrderBy:    pulumi.String("count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(0),
//							Y:    pulumi.Int(2),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(2),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Errors by Country"),
//						DisplayType: pulumi.String("table"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("geo.country_code"),
//									pulumi.String("geo.region"),
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Conditions: pulumi.String("!event.type:transaction has:geo.country_code"),
//								OrderBy:    pulumi.String("count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(4),
//							Y:    pulumi.Int(6),
//							W:    pulumi.Int(2),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("High Throughput Transactions"),
//						DisplayType: pulumi.String("table"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("count()"),
//									pulumi.String("transaction"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("transaction"),
//								},
//								Conditions: pulumi.String("!event.type:error"),
//								OrderBy:    pulumi.String("-count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(0),
//							Y:    pulumi.Int(6),
//							W:    pulumi.Int(2),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Errors by Browser"),
//						DisplayType: pulumi.String("table"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("browser.name"),
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("browser.name"),
//								},
//								Conditions: pulumi.String("!event.type:transaction has:browser.name"),
//								OrderBy:    pulumi.String("-count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(5),
//							Y:    pulumi.Int(2),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Overall User Misery"),
//						DisplayType: pulumi.String("big_number"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("user_misery(300)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("user_misery(300)"),
//								},
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(0),
//							Y:    pulumi.Int(1),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(1),
//							MinH: pulumi.Int(1),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Overall Apdex"),
//						DisplayType: pulumi.String("big_number"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("apdex(300)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("apdex(300)"),
//								},
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(1),
//							Y:    pulumi.Int(1),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(1),
//							MinH: pulumi.Int(1),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("High Throughput Transactions"),
//						DisplayType: pulumi.String("top_n"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("transaction"),
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("transaction"),
//								},
//								Conditions: pulumi.String("!event.type:error"),
//								OrderBy:    pulumi.String("-count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(0),
//							Y:    pulumi.Int(4),
//							W:    pulumi.Int(2),
//							H:    pulumi.Int(2),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Issues Assigned to Me or My Teams"),
//						DisplayType: pulumi.String("table"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("issue"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("assignee"),
//									pulumi.String("issue"),
//									pulumi.String("title"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("assignee"),
//									pulumi.String("issue"),
//									pulumi.String("title"),
//								},
//								Conditions: pulumi.String("assigned_or_suggested:me is:unresolved"),
//								OrderBy:    pulumi.String("priority"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(2),
//							Y:    pulumi.Int(2),
//							W:    pulumi.Int(2),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Transactions Ordered by Misery"),
//						DisplayType: pulumi.String("table"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("transaction"),
//									pulumi.String("user_misery(300)"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("user_misery(300)"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("transaction"),
//								},
//								OrderBy: pulumi.String("-user_misery(300)"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(2),
//							Y:    pulumi.Int(6),
//							W:    pulumi.Int(2),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//					&sentry.SentryDashboardWidgetArgs{
//						Title:       pulumi.String("Errors by Browser Over Time"),
//						DisplayType: pulumi.String("top_n"),
//						Interval:    pulumi.String("5m"),
//						WidgetType:  pulumi.String("discover"),
//						Queries: sentry.SentryDashboardWidgetQueryArray{
//							&sentry.SentryDashboardWidgetQueryArgs{
//								Fields: pulumi.StringArray{
//									pulumi.String("browser.name"),
//									pulumi.String("count()"),
//								},
//								Aggregates: pulumi.StringArray{
//									pulumi.String("count()"),
//								},
//								Columns: pulumi.StringArray{
//									pulumi.String("browser.name"),
//								},
//								Conditions: pulumi.String("event.type:error has:browser.name"),
//								OrderBy:    pulumi.String("-count()"),
//							},
//						},
//						Layout: &sentry.SentryDashboardWidgetLayoutArgs{
//							X:    pulumi.Int(4),
//							Y:    pulumi.Int(2),
//							W:    pulumi.Int(1),
//							H:    pulumi.Int(4),
//							MinH: pulumi.Int(2),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the dashboard id from the URL:
//
// https://sentry.io/dashboard/[dashboard-id]
//
// ```sh
// $ pulumi import sentry:index/sentryDashboard:SentryDashboard default org-slug/dashboard-id
// ```
type SentryDashboard struct {
	pulumi.CustomResourceState

	// The internal ID for this dashboard.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The slug of the organization the dashboard belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Dashboard title.
	Title pulumi.StringOutput `pulumi:"title"`
	// Dashboard widgets.
	Widgets SentryDashboardWidgetArrayOutput `pulumi:"widgets"`
}

// NewSentryDashboard registers a new resource with the given unique name, arguments, and options.
func NewSentryDashboard(ctx *pulumi.Context,
	name string, args *SentryDashboardArgs, opts ...pulumi.ResourceOption) (*SentryDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryDashboard
	err := ctx.RegisterResource("sentry:index/sentryDashboard:SentryDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryDashboard gets an existing SentryDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryDashboardState, opts ...pulumi.ResourceOption) (*SentryDashboard, error) {
	var resource SentryDashboard
	err := ctx.ReadResource("sentry:index/sentryDashboard:SentryDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryDashboard resources.
type sentryDashboardState struct {
	// The internal ID for this dashboard.
	InternalId *string `pulumi:"internalId"`
	// The slug of the organization the dashboard belongs to.
	Organization *string `pulumi:"organization"`
	// Dashboard title.
	Title *string `pulumi:"title"`
	// Dashboard widgets.
	Widgets []SentryDashboardWidget `pulumi:"widgets"`
}

type SentryDashboardState struct {
	// The internal ID for this dashboard.
	InternalId pulumi.StringPtrInput
	// The slug of the organization the dashboard belongs to.
	Organization pulumi.StringPtrInput
	// Dashboard title.
	Title pulumi.StringPtrInput
	// Dashboard widgets.
	Widgets SentryDashboardWidgetArrayInput
}

func (SentryDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryDashboardState)(nil)).Elem()
}

type sentryDashboardArgs struct {
	// The slug of the organization the dashboard belongs to.
	Organization string `pulumi:"organization"`
	// Dashboard title.
	Title string `pulumi:"title"`
	// Dashboard widgets.
	Widgets []SentryDashboardWidget `pulumi:"widgets"`
}

// The set of arguments for constructing a SentryDashboard resource.
type SentryDashboardArgs struct {
	// The slug of the organization the dashboard belongs to.
	Organization pulumi.StringInput
	// Dashboard title.
	Title pulumi.StringInput
	// Dashboard widgets.
	Widgets SentryDashboardWidgetArrayInput
}

func (SentryDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryDashboardArgs)(nil)).Elem()
}

type SentryDashboardInput interface {
	pulumi.Input

	ToSentryDashboardOutput() SentryDashboardOutput
	ToSentryDashboardOutputWithContext(ctx context.Context) SentryDashboardOutput
}

func (*SentryDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryDashboard)(nil)).Elem()
}

func (i *SentryDashboard) ToSentryDashboardOutput() SentryDashboardOutput {
	return i.ToSentryDashboardOutputWithContext(context.Background())
}

func (i *SentryDashboard) ToSentryDashboardOutputWithContext(ctx context.Context) SentryDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryDashboardOutput)
}

// SentryDashboardArrayInput is an input type that accepts SentryDashboardArray and SentryDashboardArrayOutput values.
// You can construct a concrete instance of `SentryDashboardArrayInput` via:
//
//	SentryDashboardArray{ SentryDashboardArgs{...} }
type SentryDashboardArrayInput interface {
	pulumi.Input

	ToSentryDashboardArrayOutput() SentryDashboardArrayOutput
	ToSentryDashboardArrayOutputWithContext(context.Context) SentryDashboardArrayOutput
}

type SentryDashboardArray []SentryDashboardInput

func (SentryDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryDashboard)(nil)).Elem()
}

func (i SentryDashboardArray) ToSentryDashboardArrayOutput() SentryDashboardArrayOutput {
	return i.ToSentryDashboardArrayOutputWithContext(context.Background())
}

func (i SentryDashboardArray) ToSentryDashboardArrayOutputWithContext(ctx context.Context) SentryDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryDashboardArrayOutput)
}

// SentryDashboardMapInput is an input type that accepts SentryDashboardMap and SentryDashboardMapOutput values.
// You can construct a concrete instance of `SentryDashboardMapInput` via:
//
//	SentryDashboardMap{ "key": SentryDashboardArgs{...} }
type SentryDashboardMapInput interface {
	pulumi.Input

	ToSentryDashboardMapOutput() SentryDashboardMapOutput
	ToSentryDashboardMapOutputWithContext(context.Context) SentryDashboardMapOutput
}

type SentryDashboardMap map[string]SentryDashboardInput

func (SentryDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryDashboard)(nil)).Elem()
}

func (i SentryDashboardMap) ToSentryDashboardMapOutput() SentryDashboardMapOutput {
	return i.ToSentryDashboardMapOutputWithContext(context.Background())
}

func (i SentryDashboardMap) ToSentryDashboardMapOutputWithContext(ctx context.Context) SentryDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryDashboardMapOutput)
}

type SentryDashboardOutput struct{ *pulumi.OutputState }

func (SentryDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryDashboard)(nil)).Elem()
}

func (o SentryDashboardOutput) ToSentryDashboardOutput() SentryDashboardOutput {
	return o
}

func (o SentryDashboardOutput) ToSentryDashboardOutputWithContext(ctx context.Context) SentryDashboardOutput {
	return o
}

// The internal ID for this dashboard.
func (o SentryDashboardOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryDashboard) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The slug of the organization the dashboard belongs to.
func (o SentryDashboardOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryDashboard) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Dashboard title.
func (o SentryDashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryDashboard) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Dashboard widgets.
func (o SentryDashboardOutput) Widgets() SentryDashboardWidgetArrayOutput {
	return o.ApplyT(func(v *SentryDashboard) SentryDashboardWidgetArrayOutput { return v.Widgets }).(SentryDashboardWidgetArrayOutput)
}

type SentryDashboardArrayOutput struct{ *pulumi.OutputState }

func (SentryDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryDashboard)(nil)).Elem()
}

func (o SentryDashboardArrayOutput) ToSentryDashboardArrayOutput() SentryDashboardArrayOutput {
	return o
}

func (o SentryDashboardArrayOutput) ToSentryDashboardArrayOutputWithContext(ctx context.Context) SentryDashboardArrayOutput {
	return o
}

func (o SentryDashboardArrayOutput) Index(i pulumi.IntInput) SentryDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryDashboard {
		return vs[0].([]*SentryDashboard)[vs[1].(int)]
	}).(SentryDashboardOutput)
}

type SentryDashboardMapOutput struct{ *pulumi.OutputState }

func (SentryDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryDashboard)(nil)).Elem()
}

func (o SentryDashboardMapOutput) ToSentryDashboardMapOutput() SentryDashboardMapOutput {
	return o
}

func (o SentryDashboardMapOutput) ToSentryDashboardMapOutputWithContext(ctx context.Context) SentryDashboardMapOutput {
	return o
}

func (o SentryDashboardMapOutput) MapIndex(k pulumi.StringInput) SentryDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryDashboard {
		return vs[0].(map[string]*SentryDashboard)[vs[1].(string)]
	}).(SentryDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryDashboardInput)(nil)).Elem(), &SentryDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryDashboardArrayInput)(nil)).Elem(), SentryDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryDashboardMapInput)(nil)).Elem(), SentryDashboardMap{})
	pulumi.RegisterOutputType(SentryDashboardOutput{})
	pulumi.RegisterOutputType(SentryDashboardArrayOutput{})
	pulumi.RegisterOutputType(SentryDashboardMapOutput{})
}

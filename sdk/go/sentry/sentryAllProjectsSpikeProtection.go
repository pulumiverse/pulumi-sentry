// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Enable spike protection for all projects in an organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Enable spike protection for several projects in a Sentry organization.
//			_, err := sentry.NewSentryProject(ctx, "web-app", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-first-team"),
//				},
//				Slug:     pulumi.String("web-app"),
//				Platform: pulumi.String("go"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryProject(ctx, "mobile-app", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-second-team"),
//				},
//				Slug:     pulumi.String("mobile-app"),
//				Platform: pulumi.String("android"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryAllProjectsSpikeProtection(ctx, "mainSentryAllProjectsSpikeProtection", &sentry.SentryAllProjectsSpikeProtectionArgs{
//				Organization: pulumi.String("my-organization"),
//				Projects: pulumi.StringArray{
//					web_app.ID(),
//					mobile_app.ID(),
//				},
//				Enabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			all, err := sentry.GetSentryAllProjects(ctx, &sentry.GetSentryAllProjectsArgs{
//				Organization: "my-organization",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryAllProjectsSpikeProtection(ctx, "mainIndex/sentryAllProjectsSpikeProtectionSentryAllProjectsSpikeProtection", &sentry.SentryAllProjectsSpikeProtectionArgs{
//				Organization: pulumi.String(all.Organization),
//				Projects:     interface{}(all.ProjectSlugs),
//				Enabled:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SentryAllProjectsSpikeProtection struct {
	pulumi.CustomResourceState

	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slugs of the projects to enable or disable spike protection for.
	Projects pulumi.StringArrayOutput `pulumi:"projects"`
}

// NewSentryAllProjectsSpikeProtection registers a new resource with the given unique name, arguments, and options.
func NewSentryAllProjectsSpikeProtection(ctx *pulumi.Context,
	name string, args *SentryAllProjectsSpikeProtectionArgs, opts ...pulumi.ResourceOption) (*SentryAllProjectsSpikeProtection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Projects == nil {
		return nil, errors.New("invalid value for required argument 'Projects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryAllProjectsSpikeProtection
	err := ctx.RegisterResource("sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryAllProjectsSpikeProtection gets an existing SentryAllProjectsSpikeProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryAllProjectsSpikeProtection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryAllProjectsSpikeProtectionState, opts ...pulumi.ResourceOption) (*SentryAllProjectsSpikeProtection, error) {
	var resource SentryAllProjectsSpikeProtection
	err := ctx.ReadResource("sentry:index/sentryAllProjectsSpikeProtection:SentryAllProjectsSpikeProtection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryAllProjectsSpikeProtection resources.
type sentryAllProjectsSpikeProtectionState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
	Enabled *bool `pulumi:"enabled"`
	// The slug of the organization the resource belongs to.
	Organization *string `pulumi:"organization"`
	// The slugs of the projects to enable or disable spike protection for.
	Projects []string `pulumi:"projects"`
}

type SentryAllProjectsSpikeProtectionState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
	Enabled pulumi.BoolPtrInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringPtrInput
	// The slugs of the projects to enable or disable spike protection for.
	Projects pulumi.StringArrayInput
}

func (SentryAllProjectsSpikeProtectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryAllProjectsSpikeProtectionState)(nil)).Elem()
}

type sentryAllProjectsSpikeProtectionArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
	Enabled bool `pulumi:"enabled"`
	// The slug of the organization the resource belongs to.
	Organization string `pulumi:"organization"`
	// The slugs of the projects to enable or disable spike protection for.
	Projects []string `pulumi:"projects"`
}

// The set of arguments for constructing a SentryAllProjectsSpikeProtection resource.
type SentryAllProjectsSpikeProtectionArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
	Enabled pulumi.BoolInput
	// The slug of the organization the resource belongs to.
	Organization pulumi.StringInput
	// The slugs of the projects to enable or disable spike protection for.
	Projects pulumi.StringArrayInput
}

func (SentryAllProjectsSpikeProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryAllProjectsSpikeProtectionArgs)(nil)).Elem()
}

type SentryAllProjectsSpikeProtectionInput interface {
	pulumi.Input

	ToSentryAllProjectsSpikeProtectionOutput() SentryAllProjectsSpikeProtectionOutput
	ToSentryAllProjectsSpikeProtectionOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionOutput
}

func (*SentryAllProjectsSpikeProtection) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (i *SentryAllProjectsSpikeProtection) ToSentryAllProjectsSpikeProtectionOutput() SentryAllProjectsSpikeProtectionOutput {
	return i.ToSentryAllProjectsSpikeProtectionOutputWithContext(context.Background())
}

func (i *SentryAllProjectsSpikeProtection) ToSentryAllProjectsSpikeProtectionOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryAllProjectsSpikeProtectionOutput)
}

// SentryAllProjectsSpikeProtectionArrayInput is an input type that accepts SentryAllProjectsSpikeProtectionArray and SentryAllProjectsSpikeProtectionArrayOutput values.
// You can construct a concrete instance of `SentryAllProjectsSpikeProtectionArrayInput` via:
//
//	SentryAllProjectsSpikeProtectionArray{ SentryAllProjectsSpikeProtectionArgs{...} }
type SentryAllProjectsSpikeProtectionArrayInput interface {
	pulumi.Input

	ToSentryAllProjectsSpikeProtectionArrayOutput() SentryAllProjectsSpikeProtectionArrayOutput
	ToSentryAllProjectsSpikeProtectionArrayOutputWithContext(context.Context) SentryAllProjectsSpikeProtectionArrayOutput
}

type SentryAllProjectsSpikeProtectionArray []SentryAllProjectsSpikeProtectionInput

func (SentryAllProjectsSpikeProtectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (i SentryAllProjectsSpikeProtectionArray) ToSentryAllProjectsSpikeProtectionArrayOutput() SentryAllProjectsSpikeProtectionArrayOutput {
	return i.ToSentryAllProjectsSpikeProtectionArrayOutputWithContext(context.Background())
}

func (i SentryAllProjectsSpikeProtectionArray) ToSentryAllProjectsSpikeProtectionArrayOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryAllProjectsSpikeProtectionArrayOutput)
}

// SentryAllProjectsSpikeProtectionMapInput is an input type that accepts SentryAllProjectsSpikeProtectionMap and SentryAllProjectsSpikeProtectionMapOutput values.
// You can construct a concrete instance of `SentryAllProjectsSpikeProtectionMapInput` via:
//
//	SentryAllProjectsSpikeProtectionMap{ "key": SentryAllProjectsSpikeProtectionArgs{...} }
type SentryAllProjectsSpikeProtectionMapInput interface {
	pulumi.Input

	ToSentryAllProjectsSpikeProtectionMapOutput() SentryAllProjectsSpikeProtectionMapOutput
	ToSentryAllProjectsSpikeProtectionMapOutputWithContext(context.Context) SentryAllProjectsSpikeProtectionMapOutput
}

type SentryAllProjectsSpikeProtectionMap map[string]SentryAllProjectsSpikeProtectionInput

func (SentryAllProjectsSpikeProtectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (i SentryAllProjectsSpikeProtectionMap) ToSentryAllProjectsSpikeProtectionMapOutput() SentryAllProjectsSpikeProtectionMapOutput {
	return i.ToSentryAllProjectsSpikeProtectionMapOutputWithContext(context.Background())
}

func (i SentryAllProjectsSpikeProtectionMap) ToSentryAllProjectsSpikeProtectionMapOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryAllProjectsSpikeProtectionMapOutput)
}

type SentryAllProjectsSpikeProtectionOutput struct{ *pulumi.OutputState }

func (SentryAllProjectsSpikeProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (o SentryAllProjectsSpikeProtectionOutput) ToSentryAllProjectsSpikeProtectionOutput() SentryAllProjectsSpikeProtectionOutput {
	return o
}

func (o SentryAllProjectsSpikeProtectionOutput) ToSentryAllProjectsSpikeProtectionOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionOutput {
	return o
}

// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off for all projects.
func (o SentryAllProjectsSpikeProtectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SentryAllProjectsSpikeProtection) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The slug of the organization the resource belongs to.
func (o SentryAllProjectsSpikeProtectionOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryAllProjectsSpikeProtection) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slugs of the projects to enable or disable spike protection for.
func (o SentryAllProjectsSpikeProtectionOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SentryAllProjectsSpikeProtection) pulumi.StringArrayOutput { return v.Projects }).(pulumi.StringArrayOutput)
}

type SentryAllProjectsSpikeProtectionArrayOutput struct{ *pulumi.OutputState }

func (SentryAllProjectsSpikeProtectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (o SentryAllProjectsSpikeProtectionArrayOutput) ToSentryAllProjectsSpikeProtectionArrayOutput() SentryAllProjectsSpikeProtectionArrayOutput {
	return o
}

func (o SentryAllProjectsSpikeProtectionArrayOutput) ToSentryAllProjectsSpikeProtectionArrayOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionArrayOutput {
	return o
}

func (o SentryAllProjectsSpikeProtectionArrayOutput) Index(i pulumi.IntInput) SentryAllProjectsSpikeProtectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryAllProjectsSpikeProtection {
		return vs[0].([]*SentryAllProjectsSpikeProtection)[vs[1].(int)]
	}).(SentryAllProjectsSpikeProtectionOutput)
}

type SentryAllProjectsSpikeProtectionMapOutput struct{ *pulumi.OutputState }

func (SentryAllProjectsSpikeProtectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryAllProjectsSpikeProtection)(nil)).Elem()
}

func (o SentryAllProjectsSpikeProtectionMapOutput) ToSentryAllProjectsSpikeProtectionMapOutput() SentryAllProjectsSpikeProtectionMapOutput {
	return o
}

func (o SentryAllProjectsSpikeProtectionMapOutput) ToSentryAllProjectsSpikeProtectionMapOutputWithContext(ctx context.Context) SentryAllProjectsSpikeProtectionMapOutput {
	return o
}

func (o SentryAllProjectsSpikeProtectionMapOutput) MapIndex(k pulumi.StringInput) SentryAllProjectsSpikeProtectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryAllProjectsSpikeProtection {
		return vs[0].(map[string]*SentryAllProjectsSpikeProtection)[vs[1].(string)]
	}).(SentryAllProjectsSpikeProtectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryAllProjectsSpikeProtectionInput)(nil)).Elem(), &SentryAllProjectsSpikeProtection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryAllProjectsSpikeProtectionArrayInput)(nil)).Elem(), SentryAllProjectsSpikeProtectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryAllProjectsSpikeProtectionMapInput)(nil)).Elem(), SentryAllProjectsSpikeProtectionMap{})
	pulumi.RegisterOutputType(SentryAllProjectsSpikeProtectionOutput{})
	pulumi.RegisterOutputType(SentryAllProjectsSpikeProtectionArrayOutput{})
	pulumi.RegisterOutputType(SentryAllProjectsSpikeProtectionMapOutput{})
}

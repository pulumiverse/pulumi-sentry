// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Project Inbound Data Filter resource. This resource is used to create and manage inbound data filters for a project. For more information on what filters are available, see the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sentry.NewSentryProject(ctx, "default", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-first-team"),
//					pulumi.String("my-second-team"),
//				},
//				Platform: pulumi.String("javascript"),
//			})
//			if err != nil {
//				return err
//			}
//			// Create an inbound data filter for a project
//			_, err = sentry.NewSentryProjectInboundDataFilter(ctx, "testSentryProjectInboundDataFilter", &sentry.SentryProjectInboundDataFilterArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				FilterId:     pulumi.String("browser-extensions"),
//				Active:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Create an inbound data filter with subfilters. Only applicable to the
//			// `legacy-browser` filter.
//			_, err = sentry.NewSentryProjectInboundDataFilter(ctx, "testIndex/sentryProjectInboundDataFilterSentryProjectInboundDataFilter", &sentry.SentryProjectInboundDataFilterArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				FilterId:     pulumi.String("legacy-browser"),
//				Subfilters: pulumi.StringArray{
//					pulumi.String("ie_pre_9"),
//					pulumi.String("ie9"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SentryProjectInboundDataFilter struct {
	pulumi.CustomResourceState

	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
	FilterId pulumi.StringOutput `pulumi:"filterId"`
	// The slug of the organization the project belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project to create the filter for.
	Project pulumi.StringOutput `pulumi:"project"`
	// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
	Subfilters pulumi.StringArrayOutput `pulumi:"subfilters"`
}

// NewSentryProjectInboundDataFilter registers a new resource with the given unique name, arguments, and options.
func NewSentryProjectInboundDataFilter(ctx *pulumi.Context,
	name string, args *SentryProjectInboundDataFilterArgs, opts ...pulumi.ResourceOption) (*SentryProjectInboundDataFilter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FilterId == nil {
		return nil, errors.New("invalid value for required argument 'FilterId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryProjectInboundDataFilter
	err := ctx.RegisterResource("sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryProjectInboundDataFilter gets an existing SentryProjectInboundDataFilter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryProjectInboundDataFilter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryProjectInboundDataFilterState, opts ...pulumi.ResourceOption) (*SentryProjectInboundDataFilter, error) {
	var resource SentryProjectInboundDataFilter
	err := ctx.ReadResource("sentry:index/sentryProjectInboundDataFilter:SentryProjectInboundDataFilter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryProjectInboundDataFilter resources.
type sentryProjectInboundDataFilterState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Active *bool `pulumi:"active"`
	// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
	FilterId *string `pulumi:"filterId"`
	// The slug of the organization the project belongs to.
	Organization *string `pulumi:"organization"`
	// The slug of the project to create the filter for.
	Project *string `pulumi:"project"`
	// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
	Subfilters []string `pulumi:"subfilters"`
}

type SentryProjectInboundDataFilterState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Active pulumi.BoolPtrInput
	// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
	FilterId pulumi.StringPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringPtrInput
	// The slug of the project to create the filter for.
	Project pulumi.StringPtrInput
	// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
	Subfilters pulumi.StringArrayInput
}

func (SentryProjectInboundDataFilterState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectInboundDataFilterState)(nil)).Elem()
}

type sentryProjectInboundDataFilterArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Active *bool `pulumi:"active"`
	// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
	FilterId string `pulumi:"filterId"`
	// The slug of the organization the project belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project to create the filter for.
	Project string `pulumi:"project"`
	// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
	Subfilters []string `pulumi:"subfilters"`
}

// The set of arguments for constructing a SentryProjectInboundDataFilter resource.
type SentryProjectInboundDataFilterArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Active pulumi.BoolPtrInput
	// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
	FilterId pulumi.StringInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringInput
	// The slug of the project to create the filter for.
	Project pulumi.StringInput
	// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
	Subfilters pulumi.StringArrayInput
}

func (SentryProjectInboundDataFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectInboundDataFilterArgs)(nil)).Elem()
}

type SentryProjectInboundDataFilterInput interface {
	pulumi.Input

	ToSentryProjectInboundDataFilterOutput() SentryProjectInboundDataFilterOutput
	ToSentryProjectInboundDataFilterOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterOutput
}

func (*SentryProjectInboundDataFilter) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectInboundDataFilter)(nil)).Elem()
}

func (i *SentryProjectInboundDataFilter) ToSentryProjectInboundDataFilterOutput() SentryProjectInboundDataFilterOutput {
	return i.ToSentryProjectInboundDataFilterOutputWithContext(context.Background())
}

func (i *SentryProjectInboundDataFilter) ToSentryProjectInboundDataFilterOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectInboundDataFilterOutput)
}

// SentryProjectInboundDataFilterArrayInput is an input type that accepts SentryProjectInboundDataFilterArray and SentryProjectInboundDataFilterArrayOutput values.
// You can construct a concrete instance of `SentryProjectInboundDataFilterArrayInput` via:
//
//	SentryProjectInboundDataFilterArray{ SentryProjectInboundDataFilterArgs{...} }
type SentryProjectInboundDataFilterArrayInput interface {
	pulumi.Input

	ToSentryProjectInboundDataFilterArrayOutput() SentryProjectInboundDataFilterArrayOutput
	ToSentryProjectInboundDataFilterArrayOutputWithContext(context.Context) SentryProjectInboundDataFilterArrayOutput
}

type SentryProjectInboundDataFilterArray []SentryProjectInboundDataFilterInput

func (SentryProjectInboundDataFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectInboundDataFilter)(nil)).Elem()
}

func (i SentryProjectInboundDataFilterArray) ToSentryProjectInboundDataFilterArrayOutput() SentryProjectInboundDataFilterArrayOutput {
	return i.ToSentryProjectInboundDataFilterArrayOutputWithContext(context.Background())
}

func (i SentryProjectInboundDataFilterArray) ToSentryProjectInboundDataFilterArrayOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectInboundDataFilterArrayOutput)
}

// SentryProjectInboundDataFilterMapInput is an input type that accepts SentryProjectInboundDataFilterMap and SentryProjectInboundDataFilterMapOutput values.
// You can construct a concrete instance of `SentryProjectInboundDataFilterMapInput` via:
//
//	SentryProjectInboundDataFilterMap{ "key": SentryProjectInboundDataFilterArgs{...} }
type SentryProjectInboundDataFilterMapInput interface {
	pulumi.Input

	ToSentryProjectInboundDataFilterMapOutput() SentryProjectInboundDataFilterMapOutput
	ToSentryProjectInboundDataFilterMapOutputWithContext(context.Context) SentryProjectInboundDataFilterMapOutput
}

type SentryProjectInboundDataFilterMap map[string]SentryProjectInboundDataFilterInput

func (SentryProjectInboundDataFilterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectInboundDataFilter)(nil)).Elem()
}

func (i SentryProjectInboundDataFilterMap) ToSentryProjectInboundDataFilterMapOutput() SentryProjectInboundDataFilterMapOutput {
	return i.ToSentryProjectInboundDataFilterMapOutputWithContext(context.Background())
}

func (i SentryProjectInboundDataFilterMap) ToSentryProjectInboundDataFilterMapOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectInboundDataFilterMapOutput)
}

type SentryProjectInboundDataFilterOutput struct{ *pulumi.OutputState }

func (SentryProjectInboundDataFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectInboundDataFilter)(nil)).Elem()
}

func (o SentryProjectInboundDataFilterOutput) ToSentryProjectInboundDataFilterOutput() SentryProjectInboundDataFilterOutput {
	return o
}

func (o SentryProjectInboundDataFilterOutput) ToSentryProjectInboundDataFilterOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterOutput {
	return o
}

// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
func (o SentryProjectInboundDataFilterOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SentryProjectInboundDataFilter) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The type of filter toggle to update. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available filters.
func (o SentryProjectInboundDataFilterOutput) FilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectInboundDataFilter) pulumi.StringOutput { return v.FilterId }).(pulumi.StringOutput)
}

// The slug of the organization the project belongs to.
func (o SentryProjectInboundDataFilterOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectInboundDataFilter) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project to create the filter for.
func (o SentryProjectInboundDataFilterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectInboundDataFilter) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Specifies which legacy browser filters should be active. Anything excluded from the list will be disabled. See the [Sentry documentation](https://docs.sentry.io/api/projects/update-an-inbound-data-filter/) for a list of available subfilters.
func (o SentryProjectInboundDataFilterOutput) Subfilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SentryProjectInboundDataFilter) pulumi.StringArrayOutput { return v.Subfilters }).(pulumi.StringArrayOutput)
}

type SentryProjectInboundDataFilterArrayOutput struct{ *pulumi.OutputState }

func (SentryProjectInboundDataFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectInboundDataFilter)(nil)).Elem()
}

func (o SentryProjectInboundDataFilterArrayOutput) ToSentryProjectInboundDataFilterArrayOutput() SentryProjectInboundDataFilterArrayOutput {
	return o
}

func (o SentryProjectInboundDataFilterArrayOutput) ToSentryProjectInboundDataFilterArrayOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterArrayOutput {
	return o
}

func (o SentryProjectInboundDataFilterArrayOutput) Index(i pulumi.IntInput) SentryProjectInboundDataFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryProjectInboundDataFilter {
		return vs[0].([]*SentryProjectInboundDataFilter)[vs[1].(int)]
	}).(SentryProjectInboundDataFilterOutput)
}

type SentryProjectInboundDataFilterMapOutput struct{ *pulumi.OutputState }

func (SentryProjectInboundDataFilterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectInboundDataFilter)(nil)).Elem()
}

func (o SentryProjectInboundDataFilterMapOutput) ToSentryProjectInboundDataFilterMapOutput() SentryProjectInboundDataFilterMapOutput {
	return o
}

func (o SentryProjectInboundDataFilterMapOutput) ToSentryProjectInboundDataFilterMapOutputWithContext(ctx context.Context) SentryProjectInboundDataFilterMapOutput {
	return o
}

func (o SentryProjectInboundDataFilterMapOutput) MapIndex(k pulumi.StringInput) SentryProjectInboundDataFilterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryProjectInboundDataFilter {
		return vs[0].(map[string]*SentryProjectInboundDataFilter)[vs[1].(string)]
	}).(SentryProjectInboundDataFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectInboundDataFilterInput)(nil)).Elem(), &SentryProjectInboundDataFilter{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectInboundDataFilterArrayInput)(nil)).Elem(), SentryProjectInboundDataFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectInboundDataFilterMapInput)(nil)).Elem(), SentryProjectInboundDataFilterMap{})
	pulumi.RegisterOutputType(SentryProjectInboundDataFilterOutput{})
	pulumi.RegisterOutputType(SentryProjectInboundDataFilterArrayOutput{})
	pulumi.RegisterOutputType(SentryProjectInboundDataFilterMapOutput{})
}

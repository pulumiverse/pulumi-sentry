// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Project Symbol Source. See the [Sentry documentation](https://docs.sentry.io/api/projects/add-a-symbol-source-to-a-project/) for more information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sentry.NewSentryProject(ctx, "default", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-first-team"),
//					pulumi.String("my-second-team"),
//				},
//				Platform: pulumi.String("javascript"),
//			})
//			if err != nil {
//				return err
//			}
//			// Add an App Store Connect source to the project
//			_, err = sentry.NewSentryProjectSymbolSource(ctx, "httpSentryProjectSymbolSource", &sentry.SentryProjectSymbolSourceArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				Type:         pulumi.String("appStoreConnect"),
//				Layout: &sentry.SentryProjectSymbolSourceLayoutArgs{
//					Type:   pulumi.String("native"),
//					Casing: pulumi.String("default"),
//				},
//				AppConnectIssuer:     pulumi.String("app_connect_issuer"),
//				AppConnectPrivateKey: pulumi.String("-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n"),
//				AppId:                pulumi.String("app_id"),
//			})
//			if err != nil {
//				return err
//			}
//			// Add a SymbolServer (HTTP) symbol source to the project
//			_, err = sentry.NewSentryProjectSymbolSource(ctx, "httpIndex/sentryProjectSymbolSourceSentryProjectSymbolSource", &sentry.SentryProjectSymbolSourceArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				Type:         pulumi.String("http"),
//				Layout: &sentry.SentryProjectSymbolSourceLayoutArgs{
//					Type:   pulumi.String("native"),
//					Casing: pulumi.String("default"),
//				},
//				Url: pulumi.String("https://example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			// Add a Google Cloud Storage symbol source to the project
//			_, err = sentry.NewSentryProjectSymbolSource(ctx, "gcs", &sentry.SentryProjectSymbolSourceArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				Type:         pulumi.String("s3"),
//				Layout: &sentry.SentryProjectSymbolSourceLayoutArgs{
//					Type:   pulumi.String("native"),
//					Casing: pulumi.String("default"),
//				},
//				Bucket:      pulumi.String("gcs-bucket-name"),
//				ClientEmail: pulumi.String("user@project.iam.gserviceaccount.com"),
//				PrivateKey:  pulumi.String("-----BEGIN PRIVATE KEY-----\n[PRIVATE-KEY]\n-----END PRIVATE KEY-----\n"),
//			})
//			if err != nil {
//				return err
//			}
//			// Add an Amazon S3 symbol source to the project
//			_, err = sentry.NewSentryProjectSymbolSource(ctx, "s3", &sentry.SentryProjectSymbolSourceArgs{
//				Organization: _default.Organization,
//				Project:      _default.ID(),
//				Type:         pulumi.String("s3"),
//				Layout: &sentry.SentryProjectSymbolSourceLayoutArgs{
//					Type:   pulumi.String("native"),
//					Casing: pulumi.String("default"),
//				},
//				Bucket:    pulumi.String("s3-bucket-name"),
//				Region:    pulumi.String("us-east-1"),
//				AccessKey: pulumi.String("access_key"),
//				SecretKey: pulumi.String("secret_key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource default org-slug/project-slug/symbol-source-id
// ```
type SentryProjectSymbolSource struct {
	pulumi.CustomResourceState

	// The AWS Access Key.Required for S3 sources, invalid for all others.
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
	AppConnectIssuer pulumi.StringPtrOutput `pulumi:"appConnectIssuer"`
	// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
	AppConnectPrivateKey pulumi.StringPtrOutput `pulumi:"appConnectPrivateKey"`
	// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
	AppId pulumi.StringPtrOutput `pulumi:"appId"`
	// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Bucket pulumi.StringPtrOutput `pulumi:"bucket"`
	// The GCS email address for authentication. Required for GCS sources, invalid for all others.
	ClientEmail pulumi.StringPtrOutput `pulumi:"clientEmail"`
	// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
	Layout SentryProjectSymbolSourceLayoutPtrOutput `pulumi:"layout"`
	// The human-readable name of the source.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the project belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The password for accessing the source. Optional for HTTP sources, invalid for all others.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// The GCS private key. Required for GCS sources, invalid for all others.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// The slug of the project to create the filter for.
	Project pulumi.StringOutput `pulumi:"project"`
	// The source's S3 region. Required for S3 sources, invalid for all others.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
	// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
	Type pulumi.StringOutput `pulumi:"type"`
	// The source's URL. Optional for HTTP sources, invalid for all others.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewSentryProjectSymbolSource registers a new resource with the given unique name, arguments, and options.
func NewSentryProjectSymbolSource(ctx *pulumi.Context,
	name string, args *SentryProjectSymbolSourceArgs, opts ...pulumi.ResourceOption) (*SentryProjectSymbolSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.AppConnectPrivateKey != nil {
		args.AppConnectPrivateKey = pulumi.ToSecret(args.AppConnectPrivateKey).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"appConnectPrivateKey",
		"password",
		"privateKey",
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryProjectSymbolSource
	err := ctx.RegisterResource("sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryProjectSymbolSource gets an existing SentryProjectSymbolSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryProjectSymbolSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryProjectSymbolSourceState, opts ...pulumi.ResourceOption) (*SentryProjectSymbolSource, error) {
	var resource SentryProjectSymbolSource
	err := ctx.ReadResource("sentry:index/sentryProjectSymbolSource:SentryProjectSymbolSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryProjectSymbolSource resources.
type sentryProjectSymbolSourceState struct {
	// The AWS Access Key.Required for S3 sources, invalid for all others.
	AccessKey *string `pulumi:"accessKey"`
	// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
	AppConnectIssuer *string `pulumi:"appConnectIssuer"`
	// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
	AppConnectPrivateKey *string `pulumi:"appConnectPrivateKey"`
	// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
	AppId *string `pulumi:"appId"`
	// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Bucket *string `pulumi:"bucket"`
	// The GCS email address for authentication. Required for GCS sources, invalid for all others.
	ClientEmail *string `pulumi:"clientEmail"`
	// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
	Layout *SentryProjectSymbolSourceLayout `pulumi:"layout"`
	// The human-readable name of the source.
	Name *string `pulumi:"name"`
	// The slug of the organization the project belongs to.
	Organization *string `pulumi:"organization"`
	// The password for accessing the source. Optional for HTTP sources, invalid for all others.
	Password *string `pulumi:"password"`
	// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Prefix *string `pulumi:"prefix"`
	// The GCS private key. Required for GCS sources, invalid for all others.
	PrivateKey *string `pulumi:"privateKey"`
	// The slug of the project to create the filter for.
	Project *string `pulumi:"project"`
	// The source's S3 region. Required for S3 sources, invalid for all others.
	Region *string `pulumi:"region"`
	// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
	SecretKey *string `pulumi:"secretKey"`
	// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
	Type *string `pulumi:"type"`
	// The source's URL. Optional for HTTP sources, invalid for all others.
	Url *string `pulumi:"url"`
	// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
	Username *string `pulumi:"username"`
}

type SentryProjectSymbolSourceState struct {
	// The AWS Access Key.Required for S3 sources, invalid for all others.
	AccessKey pulumi.StringPtrInput
	// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
	AppConnectIssuer pulumi.StringPtrInput
	// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
	AppConnectPrivateKey pulumi.StringPtrInput
	// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
	AppId pulumi.StringPtrInput
	// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Bucket pulumi.StringPtrInput
	// The GCS email address for authentication. Required for GCS sources, invalid for all others.
	ClientEmail pulumi.StringPtrInput
	// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
	Layout SentryProjectSymbolSourceLayoutPtrInput
	// The human-readable name of the source.
	Name pulumi.StringPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringPtrInput
	// The password for accessing the source. Optional for HTTP sources, invalid for all others.
	Password pulumi.StringPtrInput
	// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Prefix pulumi.StringPtrInput
	// The GCS private key. Required for GCS sources, invalid for all others.
	PrivateKey pulumi.StringPtrInput
	// The slug of the project to create the filter for.
	Project pulumi.StringPtrInput
	// The source's S3 region. Required for S3 sources, invalid for all others.
	Region pulumi.StringPtrInput
	// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
	SecretKey pulumi.StringPtrInput
	// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
	Type pulumi.StringPtrInput
	// The source's URL. Optional for HTTP sources, invalid for all others.
	Url pulumi.StringPtrInput
	// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
	Username pulumi.StringPtrInput
}

func (SentryProjectSymbolSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectSymbolSourceState)(nil)).Elem()
}

type sentryProjectSymbolSourceArgs struct {
	// The AWS Access Key.Required for S3 sources, invalid for all others.
	AccessKey *string `pulumi:"accessKey"`
	// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
	AppConnectIssuer *string `pulumi:"appConnectIssuer"`
	// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
	AppConnectPrivateKey *string `pulumi:"appConnectPrivateKey"`
	// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
	AppId *string `pulumi:"appId"`
	// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Bucket *string `pulumi:"bucket"`
	// The GCS email address for authentication. Required for GCS sources, invalid for all others.
	ClientEmail *string `pulumi:"clientEmail"`
	// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
	Layout *SentryProjectSymbolSourceLayout `pulumi:"layout"`
	// The human-readable name of the source.
	Name *string `pulumi:"name"`
	// The slug of the organization the project belongs to.
	Organization string `pulumi:"organization"`
	// The password for accessing the source. Optional for HTTP sources, invalid for all others.
	Password *string `pulumi:"password"`
	// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Prefix *string `pulumi:"prefix"`
	// The GCS private key. Required for GCS sources, invalid for all others.
	PrivateKey *string `pulumi:"privateKey"`
	// The slug of the project to create the filter for.
	Project string `pulumi:"project"`
	// The source's S3 region. Required for S3 sources, invalid for all others.
	Region *string `pulumi:"region"`
	// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
	SecretKey *string `pulumi:"secretKey"`
	// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
	Type string `pulumi:"type"`
	// The source's URL. Optional for HTTP sources, invalid for all others.
	Url *string `pulumi:"url"`
	// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a SentryProjectSymbolSource resource.
type SentryProjectSymbolSourceArgs struct {
	// The AWS Access Key.Required for S3 sources, invalid for all others.
	AccessKey pulumi.StringPtrInput
	// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
	AppConnectIssuer pulumi.StringPtrInput
	// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
	AppConnectPrivateKey pulumi.StringPtrInput
	// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
	AppId pulumi.StringPtrInput
	// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Bucket pulumi.StringPtrInput
	// The GCS email address for authentication. Required for GCS sources, invalid for all others.
	ClientEmail pulumi.StringPtrInput
	// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
	Layout SentryProjectSymbolSourceLayoutPtrInput
	// The human-readable name of the source.
	Name pulumi.StringPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringInput
	// The password for accessing the source. Optional for HTTP sources, invalid for all others.
	Password pulumi.StringPtrInput
	// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
	Prefix pulumi.StringPtrInput
	// The GCS private key. Required for GCS sources, invalid for all others.
	PrivateKey pulumi.StringPtrInput
	// The slug of the project to create the filter for.
	Project pulumi.StringInput
	// The source's S3 region. Required for S3 sources, invalid for all others.
	Region pulumi.StringPtrInput
	// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
	SecretKey pulumi.StringPtrInput
	// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
	Type pulumi.StringInput
	// The source's URL. Optional for HTTP sources, invalid for all others.
	Url pulumi.StringPtrInput
	// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
	Username pulumi.StringPtrInput
}

func (SentryProjectSymbolSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectSymbolSourceArgs)(nil)).Elem()
}

type SentryProjectSymbolSourceInput interface {
	pulumi.Input

	ToSentryProjectSymbolSourceOutput() SentryProjectSymbolSourceOutput
	ToSentryProjectSymbolSourceOutputWithContext(ctx context.Context) SentryProjectSymbolSourceOutput
}

func (*SentryProjectSymbolSource) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectSymbolSource)(nil)).Elem()
}

func (i *SentryProjectSymbolSource) ToSentryProjectSymbolSourceOutput() SentryProjectSymbolSourceOutput {
	return i.ToSentryProjectSymbolSourceOutputWithContext(context.Background())
}

func (i *SentryProjectSymbolSource) ToSentryProjectSymbolSourceOutputWithContext(ctx context.Context) SentryProjectSymbolSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSymbolSourceOutput)
}

// SentryProjectSymbolSourceArrayInput is an input type that accepts SentryProjectSymbolSourceArray and SentryProjectSymbolSourceArrayOutput values.
// You can construct a concrete instance of `SentryProjectSymbolSourceArrayInput` via:
//
//	SentryProjectSymbolSourceArray{ SentryProjectSymbolSourceArgs{...} }
type SentryProjectSymbolSourceArrayInput interface {
	pulumi.Input

	ToSentryProjectSymbolSourceArrayOutput() SentryProjectSymbolSourceArrayOutput
	ToSentryProjectSymbolSourceArrayOutputWithContext(context.Context) SentryProjectSymbolSourceArrayOutput
}

type SentryProjectSymbolSourceArray []SentryProjectSymbolSourceInput

func (SentryProjectSymbolSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectSymbolSource)(nil)).Elem()
}

func (i SentryProjectSymbolSourceArray) ToSentryProjectSymbolSourceArrayOutput() SentryProjectSymbolSourceArrayOutput {
	return i.ToSentryProjectSymbolSourceArrayOutputWithContext(context.Background())
}

func (i SentryProjectSymbolSourceArray) ToSentryProjectSymbolSourceArrayOutputWithContext(ctx context.Context) SentryProjectSymbolSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSymbolSourceArrayOutput)
}

// SentryProjectSymbolSourceMapInput is an input type that accepts SentryProjectSymbolSourceMap and SentryProjectSymbolSourceMapOutput values.
// You can construct a concrete instance of `SentryProjectSymbolSourceMapInput` via:
//
//	SentryProjectSymbolSourceMap{ "key": SentryProjectSymbolSourceArgs{...} }
type SentryProjectSymbolSourceMapInput interface {
	pulumi.Input

	ToSentryProjectSymbolSourceMapOutput() SentryProjectSymbolSourceMapOutput
	ToSentryProjectSymbolSourceMapOutputWithContext(context.Context) SentryProjectSymbolSourceMapOutput
}

type SentryProjectSymbolSourceMap map[string]SentryProjectSymbolSourceInput

func (SentryProjectSymbolSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectSymbolSource)(nil)).Elem()
}

func (i SentryProjectSymbolSourceMap) ToSentryProjectSymbolSourceMapOutput() SentryProjectSymbolSourceMapOutput {
	return i.ToSentryProjectSymbolSourceMapOutputWithContext(context.Background())
}

func (i SentryProjectSymbolSourceMap) ToSentryProjectSymbolSourceMapOutputWithContext(ctx context.Context) SentryProjectSymbolSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSymbolSourceMapOutput)
}

type SentryProjectSymbolSourceOutput struct{ *pulumi.OutputState }

func (SentryProjectSymbolSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectSymbolSource)(nil)).Elem()
}

func (o SentryProjectSymbolSourceOutput) ToSentryProjectSymbolSourceOutput() SentryProjectSymbolSourceOutput {
	return o
}

func (o SentryProjectSymbolSourceOutput) ToSentryProjectSymbolSourceOutputWithContext(ctx context.Context) SentryProjectSymbolSourceOutput {
	return o
}

// The AWS Access Key.Required for S3 sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The App Store Connect Issuer ID. Required for AppStoreConnect sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) AppConnectIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.AppConnectIssuer }).(pulumi.StringPtrOutput)
}

// The App Store Connect API Private Key. Required for AppStoreConnect sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) AppConnectPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.AppConnectPrivateKey }).(pulumi.StringPtrOutput)
}

// The App Store Connect App ID. Required for AppStoreConnect sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.AppId }).(pulumi.StringPtrOutput)
}

// The GCS or S3 bucket where the source resides. Required for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
func (o SentryProjectSymbolSourceOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Bucket }).(pulumi.StringPtrOutput)
}

// The GCS email address for authentication. Required for GCS sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) ClientEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.ClientEmail }).(pulumi.StringPtrOutput)
}

// Layout settings for the source. This is required for HTTP, GCS, and S3 sources and invalid for AppStoreConnect sources.
func (o SentryProjectSymbolSourceOutput) Layout() SentryProjectSymbolSourceLayoutPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) SentryProjectSymbolSourceLayoutPtrOutput { return v.Layout }).(SentryProjectSymbolSourceLayoutPtrOutput)
}

// The human-readable name of the source.
func (o SentryProjectSymbolSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the project belongs to.
func (o SentryProjectSymbolSourceOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The password for accessing the source. Optional for HTTP sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The GCS or S3 prefix. Optional for GCS and S3 sourcse, invalid for HTTP and AppStoreConnect sources.
func (o SentryProjectSymbolSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// The GCS private key. Required for GCS sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The slug of the project to create the filter for.
func (o SentryProjectSymbolSourceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The source's S3 region. Required for S3 sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// The AWS Secret Access Key.Required for S3 sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The type of symbol source. One of `appStoreConnect` (App Store Connect), `http` (SymbolServer (HTTP)), `gcs` (Google Cloud Storage), `s3` (Amazon S3).
func (o SentryProjectSymbolSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The source's URL. Optional for HTTP sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The user name for accessing the source. Optional for HTTP sources, invalid for all others.
func (o SentryProjectSymbolSourceOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryProjectSymbolSource) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type SentryProjectSymbolSourceArrayOutput struct{ *pulumi.OutputState }

func (SentryProjectSymbolSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectSymbolSource)(nil)).Elem()
}

func (o SentryProjectSymbolSourceArrayOutput) ToSentryProjectSymbolSourceArrayOutput() SentryProjectSymbolSourceArrayOutput {
	return o
}

func (o SentryProjectSymbolSourceArrayOutput) ToSentryProjectSymbolSourceArrayOutputWithContext(ctx context.Context) SentryProjectSymbolSourceArrayOutput {
	return o
}

func (o SentryProjectSymbolSourceArrayOutput) Index(i pulumi.IntInput) SentryProjectSymbolSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryProjectSymbolSource {
		return vs[0].([]*SentryProjectSymbolSource)[vs[1].(int)]
	}).(SentryProjectSymbolSourceOutput)
}

type SentryProjectSymbolSourceMapOutput struct{ *pulumi.OutputState }

func (SentryProjectSymbolSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectSymbolSource)(nil)).Elem()
}

func (o SentryProjectSymbolSourceMapOutput) ToSentryProjectSymbolSourceMapOutput() SentryProjectSymbolSourceMapOutput {
	return o
}

func (o SentryProjectSymbolSourceMapOutput) ToSentryProjectSymbolSourceMapOutputWithContext(ctx context.Context) SentryProjectSymbolSourceMapOutput {
	return o
}

func (o SentryProjectSymbolSourceMapOutput) MapIndex(k pulumi.StringInput) SentryProjectSymbolSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryProjectSymbolSource {
		return vs[0].(map[string]*SentryProjectSymbolSource)[vs[1].(string)]
	}).(SentryProjectSymbolSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSymbolSourceInput)(nil)).Elem(), &SentryProjectSymbolSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSymbolSourceArrayInput)(nil)).Elem(), SentryProjectSymbolSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSymbolSourceMapInput)(nil)).Elem(), SentryProjectSymbolSourceMap{})
	pulumi.RegisterOutputType(SentryProjectSymbolSourceOutput{})
	pulumi.RegisterOutputType(SentryProjectSymbolSourceArrayOutput{})
	pulumi.RegisterOutputType(SentryProjectSymbolSourceMapOutput{})
}

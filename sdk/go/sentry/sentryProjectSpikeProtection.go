// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Project Spike Protection resource. This resource is used to create and manage spike protection for a project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			defaultSentryProject, err := sentry.NewSentryProject(ctx, "defaultSentryProject", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Teams: pulumi.StringArray{
//					pulumi.String("my-first-team"),
//					pulumi.String("my-second-team"),
//				},
//				Platform: pulumi.String("javascript"),
//			})
//			if err != nil {
//				return err
//			}
//			// Enable spike protection for the project
//			_, err = sentry.NewSentryProjectSpikeProtection(ctx, "defaultSentryProjectSpikeProtection", &sentry.SentryProjectSpikeProtectionArgs{
//				Organization: defaultSentryProject.Organization,
//				Project:      defaultSentryProject.ID(),
//				Enabled:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SentryProjectSpikeProtection struct {
	pulumi.CustomResourceState

	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The slug of the organization the project belongs to.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project to enable or disable spike protection for.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewSentryProjectSpikeProtection registers a new resource with the given unique name, arguments, and options.
func NewSentryProjectSpikeProtection(ctx *pulumi.Context,
	name string, args *SentryProjectSpikeProtectionArgs, opts ...pulumi.ResourceOption) (*SentryProjectSpikeProtection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryProjectSpikeProtection
	err := ctx.RegisterResource("sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryProjectSpikeProtection gets an existing SentryProjectSpikeProtection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryProjectSpikeProtection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryProjectSpikeProtectionState, opts ...pulumi.ResourceOption) (*SentryProjectSpikeProtection, error) {
	var resource SentryProjectSpikeProtection
	err := ctx.ReadResource("sentry:index/sentryProjectSpikeProtection:SentryProjectSpikeProtection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryProjectSpikeProtection resources.
type sentryProjectSpikeProtectionState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Enabled *bool `pulumi:"enabled"`
	// The slug of the organization the project belongs to.
	Organization *string `pulumi:"organization"`
	// The slug of the project to enable or disable spike protection for.
	Project *string `pulumi:"project"`
}

type SentryProjectSpikeProtectionState struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Enabled pulumi.BoolPtrInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringPtrInput
	// The slug of the project to enable or disable spike protection for.
	Project pulumi.StringPtrInput
}

func (SentryProjectSpikeProtectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectSpikeProtectionState)(nil)).Elem()
}

type sentryProjectSpikeProtectionArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Enabled bool `pulumi:"enabled"`
	// The slug of the organization the project belongs to.
	Organization string `pulumi:"organization"`
	// The slug of the project to enable or disable spike protection for.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a SentryProjectSpikeProtection resource.
type SentryProjectSpikeProtectionArgs struct {
	// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
	Enabled pulumi.BoolInput
	// The slug of the organization the project belongs to.
	Organization pulumi.StringInput
	// The slug of the project to enable or disable spike protection for.
	Project pulumi.StringInput
}

func (SentryProjectSpikeProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectSpikeProtectionArgs)(nil)).Elem()
}

type SentryProjectSpikeProtectionInput interface {
	pulumi.Input

	ToSentryProjectSpikeProtectionOutput() SentryProjectSpikeProtectionOutput
	ToSentryProjectSpikeProtectionOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionOutput
}

func (*SentryProjectSpikeProtection) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectSpikeProtection)(nil)).Elem()
}

func (i *SentryProjectSpikeProtection) ToSentryProjectSpikeProtectionOutput() SentryProjectSpikeProtectionOutput {
	return i.ToSentryProjectSpikeProtectionOutputWithContext(context.Background())
}

func (i *SentryProjectSpikeProtection) ToSentryProjectSpikeProtectionOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSpikeProtectionOutput)
}

// SentryProjectSpikeProtectionArrayInput is an input type that accepts SentryProjectSpikeProtectionArray and SentryProjectSpikeProtectionArrayOutput values.
// You can construct a concrete instance of `SentryProjectSpikeProtectionArrayInput` via:
//
//	SentryProjectSpikeProtectionArray{ SentryProjectSpikeProtectionArgs{...} }
type SentryProjectSpikeProtectionArrayInput interface {
	pulumi.Input

	ToSentryProjectSpikeProtectionArrayOutput() SentryProjectSpikeProtectionArrayOutput
	ToSentryProjectSpikeProtectionArrayOutputWithContext(context.Context) SentryProjectSpikeProtectionArrayOutput
}

type SentryProjectSpikeProtectionArray []SentryProjectSpikeProtectionInput

func (SentryProjectSpikeProtectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectSpikeProtection)(nil)).Elem()
}

func (i SentryProjectSpikeProtectionArray) ToSentryProjectSpikeProtectionArrayOutput() SentryProjectSpikeProtectionArrayOutput {
	return i.ToSentryProjectSpikeProtectionArrayOutputWithContext(context.Background())
}

func (i SentryProjectSpikeProtectionArray) ToSentryProjectSpikeProtectionArrayOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSpikeProtectionArrayOutput)
}

// SentryProjectSpikeProtectionMapInput is an input type that accepts SentryProjectSpikeProtectionMap and SentryProjectSpikeProtectionMapOutput values.
// You can construct a concrete instance of `SentryProjectSpikeProtectionMapInput` via:
//
//	SentryProjectSpikeProtectionMap{ "key": SentryProjectSpikeProtectionArgs{...} }
type SentryProjectSpikeProtectionMapInput interface {
	pulumi.Input

	ToSentryProjectSpikeProtectionMapOutput() SentryProjectSpikeProtectionMapOutput
	ToSentryProjectSpikeProtectionMapOutputWithContext(context.Context) SentryProjectSpikeProtectionMapOutput
}

type SentryProjectSpikeProtectionMap map[string]SentryProjectSpikeProtectionInput

func (SentryProjectSpikeProtectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectSpikeProtection)(nil)).Elem()
}

func (i SentryProjectSpikeProtectionMap) ToSentryProjectSpikeProtectionMapOutput() SentryProjectSpikeProtectionMapOutput {
	return i.ToSentryProjectSpikeProtectionMapOutputWithContext(context.Background())
}

func (i SentryProjectSpikeProtectionMap) ToSentryProjectSpikeProtectionMapOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectSpikeProtectionMapOutput)
}

type SentryProjectSpikeProtectionOutput struct{ *pulumi.OutputState }

func (SentryProjectSpikeProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProjectSpikeProtection)(nil)).Elem()
}

func (o SentryProjectSpikeProtectionOutput) ToSentryProjectSpikeProtectionOutput() SentryProjectSpikeProtectionOutput {
	return o
}

func (o SentryProjectSpikeProtectionOutput) ToSentryProjectSpikeProtectionOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionOutput {
	return o
}

// Toggle the browser-extensions, localhost, filtered-transaction, or web-crawlers filter on or off.
func (o SentryProjectSpikeProtectionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *SentryProjectSpikeProtection) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The slug of the organization the project belongs to.
func (o SentryProjectSpikeProtectionOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSpikeProtection) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project to enable or disable spike protection for.
func (o SentryProjectSpikeProtectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProjectSpikeProtection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type SentryProjectSpikeProtectionArrayOutput struct{ *pulumi.OutputState }

func (SentryProjectSpikeProtectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProjectSpikeProtection)(nil)).Elem()
}

func (o SentryProjectSpikeProtectionArrayOutput) ToSentryProjectSpikeProtectionArrayOutput() SentryProjectSpikeProtectionArrayOutput {
	return o
}

func (o SentryProjectSpikeProtectionArrayOutput) ToSentryProjectSpikeProtectionArrayOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionArrayOutput {
	return o
}

func (o SentryProjectSpikeProtectionArrayOutput) Index(i pulumi.IntInput) SentryProjectSpikeProtectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryProjectSpikeProtection {
		return vs[0].([]*SentryProjectSpikeProtection)[vs[1].(int)]
	}).(SentryProjectSpikeProtectionOutput)
}

type SentryProjectSpikeProtectionMapOutput struct{ *pulumi.OutputState }

func (SentryProjectSpikeProtectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProjectSpikeProtection)(nil)).Elem()
}

func (o SentryProjectSpikeProtectionMapOutput) ToSentryProjectSpikeProtectionMapOutput() SentryProjectSpikeProtectionMapOutput {
	return o
}

func (o SentryProjectSpikeProtectionMapOutput) ToSentryProjectSpikeProtectionMapOutputWithContext(ctx context.Context) SentryProjectSpikeProtectionMapOutput {
	return o
}

func (o SentryProjectSpikeProtectionMapOutput) MapIndex(k pulumi.StringInput) SentryProjectSpikeProtectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryProjectSpikeProtection {
		return vs[0].(map[string]*SentryProjectSpikeProtection)[vs[1].(string)]
	}).(SentryProjectSpikeProtectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSpikeProtectionInput)(nil)).Elem(), &SentryProjectSpikeProtection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSpikeProtectionArrayInput)(nil)).Elem(), SentryProjectSpikeProtectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectSpikeProtectionMapInput)(nil)).Elem(), SentryProjectSpikeProtectionMap{})
	pulumi.RegisterOutputType(SentryProjectSpikeProtectionOutput{})
	pulumi.RegisterOutputType(SentryProjectSpikeProtectionArrayOutput{})
	pulumi.RegisterOutputType(SentryProjectSpikeProtectionMapOutput{})
}

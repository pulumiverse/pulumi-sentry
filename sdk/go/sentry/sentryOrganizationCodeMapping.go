// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry/internal"
)

// Sentry Organization Code Mapping resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Retrieve the Github organization integration
//			github, err := sentry.GetSentryOrganizationIntegration(ctx, &sentry.GetSentryOrganizationIntegrationArgs{
//				Organization: "my-organization",
//				ProviderKey:  "github",
//				Name:         "my-github-organization",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			this, err := sentry.NewSentryProject(ctx, "this", &sentry.SentryProjectArgs{
//				Organization: pulumi.String("my-organization"),
//				Team:         pulumi.String("my-team"),
//				Name:         pulumi.String("Web App"),
//				Slug:         pulumi.String("web-app"),
//				Platform:     pulumi.String("javascript"),
//				ResolveAge:   pulumi.Int(720),
//			})
//			if err != nil {
//				return err
//			}
//			thisSentryOrganizationRepositoryGithub, err := sentry.NewSentryOrganizationRepositoryGithub(ctx, "this", &sentry.SentryOrganizationRepositoryGithubArgs{
//				Organization:  pulumi.String("my-organization"),
//				IntegrationId: pulumi.String(github.InternalId),
//				Identifier:    pulumi.String("my-github-organization/my-github-repo"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sentry.NewSentryOrganizationCodeMapping(ctx, "this", &sentry.SentryOrganizationCodeMappingArgs{
//				Organization:  pulumi.String("my-organization"),
//				IntegrationId: pulumi.String(github.InternalId),
//				RepositoryId:  thisSentryOrganizationRepositoryGithub.InternalId,
//				ProjectId:     this.InternalId,
//				DefaultBranch: pulumi.String("main"),
//				StackRoot:     pulumi.String("/"),
//				SourceRoot:    pulumi.String("src/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using the organization slug from the URL:
//
// https://sentry.io/settings/[org-slug]/integrations/github/[org-integration-id]/
//
// and inspect network tab for request to https://sentry.io/api/0/organizations/[org-slug]/code-mappings/
//
// find the corresponding list element and reference [code-mapping-id] from the key "id"
//
// ```sh
// $ pulumi import sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping this org-slug/31347
// ```
type SentryOrganizationCodeMapping struct {
	pulumi.CustomResourceState

	// Default branch of your code we fall back to if you do not have commit tracking set up.
	DefaultBranch pulumi.StringOutput `pulumi:"defaultBranch"`
	// Sentry Organization Integration ID.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// The internal ID for this resource.
	InternalId pulumi.StringOutput `pulumi:"internalId"`
	// The slug of the organization the code mapping is under.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Sentry Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Sentry Organization Repository ID.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	SourceRoot pulumi.StringPtrOutput `pulumi:"sourceRoot"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	StackRoot pulumi.StringPtrOutput `pulumi:"stackRoot"`
}

// NewSentryOrganizationCodeMapping registers a new resource with the given unique name, arguments, and options.
func NewSentryOrganizationCodeMapping(ctx *pulumi.Context,
	name string, args *SentryOrganizationCodeMappingArgs, opts ...pulumi.ResourceOption) (*SentryOrganizationCodeMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultBranch == nil {
		return nil, errors.New("invalid value for required argument 'DefaultBranch'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SentryOrganizationCodeMapping
	err := ctx.RegisterResource("sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryOrganizationCodeMapping gets an existing SentryOrganizationCodeMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryOrganizationCodeMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryOrganizationCodeMappingState, opts ...pulumi.ResourceOption) (*SentryOrganizationCodeMapping, error) {
	var resource SentryOrganizationCodeMapping
	err := ctx.ReadResource("sentry:index/sentryOrganizationCodeMapping:SentryOrganizationCodeMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryOrganizationCodeMapping resources.
type sentryOrganizationCodeMappingState struct {
	// Default branch of your code we fall back to if you do not have commit tracking set up.
	DefaultBranch *string `pulumi:"defaultBranch"`
	// Sentry Organization Integration ID.
	IntegrationId *string `pulumi:"integrationId"`
	// The internal ID for this resource.
	InternalId *string `pulumi:"internalId"`
	// The slug of the organization the code mapping is under.
	Organization *string `pulumi:"organization"`
	// Sentry Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Sentry Organization Repository ID.
	RepositoryId *string `pulumi:"repositoryId"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	SourceRoot *string `pulumi:"sourceRoot"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	StackRoot *string `pulumi:"stackRoot"`
}

type SentryOrganizationCodeMappingState struct {
	// Default branch of your code we fall back to if you do not have commit tracking set up.
	DefaultBranch pulumi.StringPtrInput
	// Sentry Organization Integration ID.
	IntegrationId pulumi.StringPtrInput
	// The internal ID for this resource.
	InternalId pulumi.StringPtrInput
	// The slug of the organization the code mapping is under.
	Organization pulumi.StringPtrInput
	// Sentry Project ID.
	ProjectId pulumi.StringPtrInput
	// Sentry Organization Repository ID.
	RepositoryId pulumi.StringPtrInput
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	SourceRoot pulumi.StringPtrInput
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	StackRoot pulumi.StringPtrInput
}

func (SentryOrganizationCodeMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryOrganizationCodeMappingState)(nil)).Elem()
}

type sentryOrganizationCodeMappingArgs struct {
	// Default branch of your code we fall back to if you do not have commit tracking set up.
	DefaultBranch string `pulumi:"defaultBranch"`
	// Sentry Organization Integration ID.
	IntegrationId string `pulumi:"integrationId"`
	// The slug of the organization the code mapping is under.
	Organization string `pulumi:"organization"`
	// Sentry Project ID.
	ProjectId string `pulumi:"projectId"`
	// Sentry Organization Repository ID.
	RepositoryId string `pulumi:"repositoryId"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	SourceRoot *string `pulumi:"sourceRoot"`
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	StackRoot *string `pulumi:"stackRoot"`
}

// The set of arguments for constructing a SentryOrganizationCodeMapping resource.
type SentryOrganizationCodeMappingArgs struct {
	// Default branch of your code we fall back to if you do not have commit tracking set up.
	DefaultBranch pulumi.StringInput
	// Sentry Organization Integration ID.
	IntegrationId pulumi.StringInput
	// The slug of the organization the code mapping is under.
	Organization pulumi.StringInput
	// Sentry Project ID.
	ProjectId pulumi.StringInput
	// Sentry Organization Repository ID.
	RepositoryId pulumi.StringInput
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	SourceRoot pulumi.StringPtrInput
	// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
	StackRoot pulumi.StringPtrInput
}

func (SentryOrganizationCodeMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryOrganizationCodeMappingArgs)(nil)).Elem()
}

type SentryOrganizationCodeMappingInput interface {
	pulumi.Input

	ToSentryOrganizationCodeMappingOutput() SentryOrganizationCodeMappingOutput
	ToSentryOrganizationCodeMappingOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingOutput
}

func (*SentryOrganizationCodeMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryOrganizationCodeMapping)(nil)).Elem()
}

func (i *SentryOrganizationCodeMapping) ToSentryOrganizationCodeMappingOutput() SentryOrganizationCodeMappingOutput {
	return i.ToSentryOrganizationCodeMappingOutputWithContext(context.Background())
}

func (i *SentryOrganizationCodeMapping) ToSentryOrganizationCodeMappingOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationCodeMappingOutput)
}

// SentryOrganizationCodeMappingArrayInput is an input type that accepts SentryOrganizationCodeMappingArray and SentryOrganizationCodeMappingArrayOutput values.
// You can construct a concrete instance of `SentryOrganizationCodeMappingArrayInput` via:
//
//	SentryOrganizationCodeMappingArray{ SentryOrganizationCodeMappingArgs{...} }
type SentryOrganizationCodeMappingArrayInput interface {
	pulumi.Input

	ToSentryOrganizationCodeMappingArrayOutput() SentryOrganizationCodeMappingArrayOutput
	ToSentryOrganizationCodeMappingArrayOutputWithContext(context.Context) SentryOrganizationCodeMappingArrayOutput
}

type SentryOrganizationCodeMappingArray []SentryOrganizationCodeMappingInput

func (SentryOrganizationCodeMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryOrganizationCodeMapping)(nil)).Elem()
}

func (i SentryOrganizationCodeMappingArray) ToSentryOrganizationCodeMappingArrayOutput() SentryOrganizationCodeMappingArrayOutput {
	return i.ToSentryOrganizationCodeMappingArrayOutputWithContext(context.Background())
}

func (i SentryOrganizationCodeMappingArray) ToSentryOrganizationCodeMappingArrayOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationCodeMappingArrayOutput)
}

// SentryOrganizationCodeMappingMapInput is an input type that accepts SentryOrganizationCodeMappingMap and SentryOrganizationCodeMappingMapOutput values.
// You can construct a concrete instance of `SentryOrganizationCodeMappingMapInput` via:
//
//	SentryOrganizationCodeMappingMap{ "key": SentryOrganizationCodeMappingArgs{...} }
type SentryOrganizationCodeMappingMapInput interface {
	pulumi.Input

	ToSentryOrganizationCodeMappingMapOutput() SentryOrganizationCodeMappingMapOutput
	ToSentryOrganizationCodeMappingMapOutputWithContext(context.Context) SentryOrganizationCodeMappingMapOutput
}

type SentryOrganizationCodeMappingMap map[string]SentryOrganizationCodeMappingInput

func (SentryOrganizationCodeMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryOrganizationCodeMapping)(nil)).Elem()
}

func (i SentryOrganizationCodeMappingMap) ToSentryOrganizationCodeMappingMapOutput() SentryOrganizationCodeMappingMapOutput {
	return i.ToSentryOrganizationCodeMappingMapOutputWithContext(context.Background())
}

func (i SentryOrganizationCodeMappingMap) ToSentryOrganizationCodeMappingMapOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryOrganizationCodeMappingMapOutput)
}

type SentryOrganizationCodeMappingOutput struct{ *pulumi.OutputState }

func (SentryOrganizationCodeMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryOrganizationCodeMapping)(nil)).Elem()
}

func (o SentryOrganizationCodeMappingOutput) ToSentryOrganizationCodeMappingOutput() SentryOrganizationCodeMappingOutput {
	return o
}

func (o SentryOrganizationCodeMappingOutput) ToSentryOrganizationCodeMappingOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingOutput {
	return o
}

// Default branch of your code we fall back to if you do not have commit tracking set up.
func (o SentryOrganizationCodeMappingOutput) DefaultBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.DefaultBranch }).(pulumi.StringOutput)
}

// Sentry Organization Integration ID.
func (o SentryOrganizationCodeMappingOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// The internal ID for this resource.
func (o SentryOrganizationCodeMappingOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.InternalId }).(pulumi.StringOutput)
}

// The slug of the organization the code mapping is under.
func (o SentryOrganizationCodeMappingOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Sentry Project ID.
func (o SentryOrganizationCodeMappingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Sentry Organization Repository ID.
func (o SentryOrganizationCodeMappingOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
func (o SentryOrganizationCodeMappingOutput) SourceRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringPtrOutput { return v.SourceRoot }).(pulumi.StringPtrOutput)
}

// https://docs.sentry.io/product/integrations/source-code-mgmt/github/#stack-trace-linking
func (o SentryOrganizationCodeMappingOutput) StackRoot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SentryOrganizationCodeMapping) pulumi.StringPtrOutput { return v.StackRoot }).(pulumi.StringPtrOutput)
}

type SentryOrganizationCodeMappingArrayOutput struct{ *pulumi.OutputState }

func (SentryOrganizationCodeMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryOrganizationCodeMapping)(nil)).Elem()
}

func (o SentryOrganizationCodeMappingArrayOutput) ToSentryOrganizationCodeMappingArrayOutput() SentryOrganizationCodeMappingArrayOutput {
	return o
}

func (o SentryOrganizationCodeMappingArrayOutput) ToSentryOrganizationCodeMappingArrayOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingArrayOutput {
	return o
}

func (o SentryOrganizationCodeMappingArrayOutput) Index(i pulumi.IntInput) SentryOrganizationCodeMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryOrganizationCodeMapping {
		return vs[0].([]*SentryOrganizationCodeMapping)[vs[1].(int)]
	}).(SentryOrganizationCodeMappingOutput)
}

type SentryOrganizationCodeMappingMapOutput struct{ *pulumi.OutputState }

func (SentryOrganizationCodeMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryOrganizationCodeMapping)(nil)).Elem()
}

func (o SentryOrganizationCodeMappingMapOutput) ToSentryOrganizationCodeMappingMapOutput() SentryOrganizationCodeMappingMapOutput {
	return o
}

func (o SentryOrganizationCodeMappingMapOutput) ToSentryOrganizationCodeMappingMapOutputWithContext(ctx context.Context) SentryOrganizationCodeMappingMapOutput {
	return o
}

func (o SentryOrganizationCodeMappingMapOutput) MapIndex(k pulumi.StringInput) SentryOrganizationCodeMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryOrganizationCodeMapping {
		return vs[0].(map[string]*SentryOrganizationCodeMapping)[vs[1].(string)]
	}).(SentryOrganizationCodeMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationCodeMappingInput)(nil)).Elem(), &SentryOrganizationCodeMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationCodeMappingArrayInput)(nil)).Elem(), SentryOrganizationCodeMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryOrganizationCodeMappingMapInput)(nil)).Elem(), SentryOrganizationCodeMappingMap{})
	pulumi.RegisterOutputType(SentryOrganizationCodeMappingOutput{})
	pulumi.RegisterOutputType(SentryOrganizationCodeMappingArrayOutput{})
	pulumi.RegisterOutputType(SentryOrganizationCodeMappingMapOutput{})
}
